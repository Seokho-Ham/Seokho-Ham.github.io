I"<p><br /></p>

<!--more-->

<p>기존의 객체지향 프로그래밍에 대한 개념은 “현실세계를 추상화해서 소프트웨어로 만들어내는 것” 이었다.
하지만 실제 현실세계의 사물과 소프트웨어 내의 객체는 닮지 않았다. 이런 개념 때문에 개발자들에게 개발할 때 현실을 있는 그대로 만들어내야한다는 오해를 심어준다.</p>

<p>그렇다면 객체지향 프로그래밍은 무엇일까?<br />
현실 세계의 문제를 풀어나가기 위해서 현실을 모방하는것이 아닌, 새로운 세계를 창조해내는 것이다.</p>

<p><br /></p>

<h2 id="역할-책임-협력">역할, 책임, 협력</h2>

<hr />

<p>객체에게는 각각의 <strong>역할</strong>과 <strong>책임</strong>이 주어진다.</p>

<p>커피를 주문하는 과정을 예시로 들어보자.</p>

<ol>
  <li>손님은 주문할 책임을 가지고 있다.</li>
  <li>직원은 주문을 받을 책임을 가지고 있다.</li>
  <li>바리스타는 커피를 제조할 책임을 가지고 있다.</li>
</ol>

<p>이런 역할과 책임에는 4가지 특징이 있다.</p>

<ul>
  <li>여러 객체가 동일한 역할을 할 수 있다.</li>
  <li>역할은 대체가능하다.</li>
  <li>책임을 수행하는 방법은 객체가 자율적으로 선택할 수 있다.</li>
  <li>하나의 객체가 동시에 여러 역할을 할 수 있다.</li>
</ul>

<p>하나의 소프트웨어는 이러한 역할과 책임을 가진 객체들간의 <strong>협력</strong>을 통해 동작한다.
여기서의 협력은 객체들간에 서로 요청하고 응답하는 과정을 의미한다.
그리고 좋은 협력 품질을 가지려면 좋은 품질을 가진 객체들로 구성되어야한다.</p>

<p><br /></p>

<h2 id="좋은-품질의-객체">좋은 품질의 객체</h2>

<hr />

<p>좋은 품질의 객체를 만들려면 2가지 조건이 있다.</p>

<h5 id="1-충분히-협력적인가">1. 충분히 협력적인가?</h5>

<ul>
  <li>다른 객체로부터의 요청에 대해 열려있어야 한다.</li>
</ul>

<h5 id="2-충분히-자율적인가">2. 충분히 자율적인가?</h5>

<ul>
  <li>요청에 대한 처리를 객체 스스로가 결정할 수 있어야한다. 이러기 위해서는 내부의 정보는 외부로부터 감추고, 메세지를 통해서 제공해야한다.</li>
  <li>어떤 일을 처리했는지는 공개하되, 구체적인 처리방식은 공개하면 안된다.
    <ul>
      <li>ex) 직원이 커피를 만들어달라고 바리스타에 요청은 하지만, 어떻게 만드는지에는 관여하지 않는다.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><strong><em>객체 지향 설계는 적절한 객체에게 적절한 책임을 할당하는것에서부터 시작된다.</em></strong></p>
</blockquote>
:ET
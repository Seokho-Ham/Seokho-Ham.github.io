I"<!--more-->

<h2 id="-하루-일과">🛎 하루 일과</h2>

<blockquote>
  <p>10:00 ~ 10:40 데일리 스크럼<br />
10:40 ~ 11:30 미션 3단계 완성 및 제출<br />
11:30 ~ 12:00 학습 정리<br />
21:00 ~ 01:30 미션 3단계 구현 및 배포 도전<br />
01:30 ~ 2:00 회고 작성</p>
</blockquote>

<h2 id="-학습-회고">👨‍💻 학습 회고</h2>

<h3 id="스프링-미션-3단계">스프링 미션 3단계</h3>

<ul>
  <li>어제 Repository를 테스트하는데 생성자를 통해서는 의존성이 주입이 되지 않았다. 쿠킴의 도움을 받아 필드에 @Autowired를 붙여줘야 의존성 주입이 된다는걸 알게 되어서 해결했다. 문제 해결과 별개로 이유가 궁금해서 찾아보고 정리했다.</li>
</ul>

<blockquote>
  <p><a href="https://seokho-ham.github.io/spring/why-autowired-is-necessary-in-junit">Test에서는 왜 @Autowired 없이는 의존성 주입이 안될까?</a></p>
</blockquote>

<h3 id="jar-vs-plainjar">.jar vs plain.jar</h3>

<p>heroku를 사용해 배포할때 안에서 빌드가 된다. 이때 빌드의 결과물로 2개의 jar파일이 생성되는데, heroku에서는 <code class="language-plaintext highlighter-rouge">*.jar</code> 이런식으로 모든 jar파일을 읽고 실행한다. plain.jar를 실행하는데서 문제가 발생했고, jay의 글 덕분에 문제는 쉽게 해결했다.<br />
생성되는 2개의 jar파일이 어떤 차이인지 몰라서 간단하게 정리한다.</p>

<p>Spring Boot 빌드 시 <strong>프로젝트 이름과 버전만 적힌 jar파일</strong>과 <strong>plain까지 함께 적힌 jar파일</strong> 2개가 생긴다.</p>

<h4 id="-plainjar-파일">*-plain.jar 파일</h4>

<ul>
  <li>Jar task에 의해 생성되는 파일이며 <strong>plain archive</strong>라고 부른다.</li>
  <li>클래스 파일과 리소스 파일 이외의 의존성은 가지지 않는다. 앱 실행에 필요한 의존성들이 없기 때문에 <code class="language-plaintext highlighter-rouge">java -jar</code> 명령어로 실행이 불가능하다.</li>
</ul>

<h4 id="jar-파일">*.jar 파일</h4>

<ul>
  <li>BootJar task에 의해 생성되며 <strong>executable archive</strong>라고 부른다.</li>
  <li>모든 의존성을 가진 jar 파일이며 앱을 정상적으로 실행할 수 있다.</li>
</ul>

<p>build.gradle 파일에 아래와 같이 작성하면 jar task를 통해 생성하는건 건너뛸 수 있다.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build.gradle</span>

<span class="n">jar</span><span class="o">{</span>
	<span class="n">enabled</span> <span class="o">=</span> <span class="kc">false</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="️-개선점">🙋🏻‍♂️ 개선점</h2>
:ET
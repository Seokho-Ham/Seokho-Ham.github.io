<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[서코코]]></description><link>https://seokho-ham.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 23 Jan 2024 14:24:12 GMT</lastBuildDate><item><title><![CDATA[여러 플랫폼에 대응할 수 있는 OAuth 코드로 개선하기]]></title><description><![CDATA[서론 이전 글에서 SpringSecurity가 OAuth 로그인을 처리하는 과정을 디버깅을 통해 학습했습니다. 학습경험을 바탕으로 식도락 프로젝트의 기존 OAuth…]]></description><link>https://seokho-ham.github.io/backend/spring/oauth-refactoring/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/spring/oauth-refactoring/</guid><pubDate>Sun, 04 Jun 2023 01:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://seokho-ham.github.io/backend/spring/spring-security-and-oauth/&quot;&gt;이전 글&lt;/a&gt;에서 SpringSecurity가 OAuth 로그인을 처리하는 과정을 디버깅을 통해 학습했습니다.&lt;/p&gt;
&lt;p&gt;학습경험을 바탕으로 식도락 프로젝트의 기존 OAuth 로그인 코드를 개선한 과정에 대해 글을 써보려 합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;기존의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;기존의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기존의 문제점&lt;/h2&gt;
&lt;h3 id=&quot;카카오-로그인에-의존적이며-확장에-닫혀있는-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%97%90-%EC%9D%98%EC%A1%B4%EC%A0%81%EC%9D%B4%EB%A9%B0-%ED%99%95%EC%9E%A5%EC%97%90-%EB%8B%AB%ED%98%80%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;카카오 로그인에 의존적이며 확장에 닫혀있는 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;카카오 로그인에 의존적이며 확장에 닫혀있는 코드.&lt;/h3&gt;
&lt;p&gt;새로운 플랫폼을 지원하도록 확장하기 위해서는 요청을 보내는 클라이언트뿐만 아니라 비즈니스로직이 담긴 서비스 클래스까지 변경이 발생합니다. 또한 추가적으로 작성해야되는 클래스가 너무 많이 필요합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Properties 클래스의 주입.&lt;/strong&gt;&lt;br&gt;
기존의 서비스 코드에서는 카카오api 사용에 필요한 정보를 담은 KakaoProperties 클래스를 직접 주입받아서 사용하고 있었습니다. 즉, 새로운 플랫폼을 지원할때마다 주입받아야하는 클래스가 늘어나야 했으며 요청 형태에 따라 조건문으로 구별해서 사용해야 했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/dd3db9d1-87a2-4d29-b8e9-04204891c8e6&quot; width=&quot;600px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;589&quot; alt=&quot;re-2&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/13ef419f-3822-445a-97bc-f3cb0e5bc121&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Response 객체.&lt;/strong&gt;&lt;br&gt;
응답을 담든 Response 객체가 카카오의 응답형태에 종속적이었습니다.
중요한건 서버에 저장할 도메인 객체인 User 클래스이지만 기존 구조에서는 이와 직접적으로 관련없는 Response 클래스를 각 플랫폼별로 만들어야했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/07d9b671-3cc2-48c4-9d49-2c7cf9321ead&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client 객체&lt;/strong&gt;&lt;br&gt;
요청을 보내는 클라이언트 객체가 카카오 api에 종속적이었습니다.
플랫폼을 늘리기 위해서는 해당 코드가 동적으로 동작할 수 있도록 개선해야했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/e21b50c1-3870-43be-8190-f046251ed627&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/5f525099-d69b-43a5-befd-c7f30b08a0b5&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;개선-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%84%A0-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;개선 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개선 과정&lt;/h2&gt;
&lt;h3 id=&quot;1-구성정보-객체-추상화-및-동적사용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B5%AC%EC%84%B1%EC%A0%95%EB%B3%B4-%EA%B0%9D%EC%B2%B4-%EC%B6%94%EC%83%81%ED%99%94-%EB%B0%8F-%EB%8F%99%EC%A0%81%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;1 구성정보 객체 추상화 및 동적사용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 구성정보 객체 추상화 및 동적사용&lt;/h3&gt;
&lt;p&gt;각각의 플랫폼에 맞는 Properties 클래스를 일일이 만들고 매번 이를 직접 주입받아서 사용하는건 좋은 방법이 아닌것 같습니다.&lt;/p&gt;
&lt;p&gt;이를 개선하기 위해 SpringSecurity의 &lt;code class=&quot;language-text&quot;&gt;InMemoryClientRegistrationRepository&lt;/code&gt; 클래스를 참고하여 저희 서비스에서 사용할 &lt;code class=&quot;language-text&quot;&gt;InMemoryClientRegistrationRepository&lt;/code&gt; 를 직접 작성했습니다.&lt;br&gt;
(해당 내용이 궁금하다면 &lt;a href=&quot;https://seokho-ham.github.io/backend/spring/spring-security-and-oauth/&quot;&gt;이전 글&lt;/a&gt;을 참고해주세요.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인메모리가 아닌 외부 환경을 이용하는 상황을 대비해 ClientRegistrationRepository 인터페이스를 두고 구현체를 사용하였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/5a595a57-e2dd-4adb-b8bf-128852507deb&quot; width=&quot;600px&quot;&gt; &lt;br/&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8023ce0f-d6ae-4dd0-8899-b350184aa85d&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;저장소를 만들었으니 이제는 실제 구성정보를 담는 객체를 추상화해야 합니다. OAuthClientRegistration 클래스를 작성하였고, 해당 클래스는 2가지 클래스를 조합하여 만들기로 결정했습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/21d8ab2d-fb60-4a59-8614-51768f76dfbc&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Registration 객체를 만들기 위해 먼저는 clientId, secret 등을 가지고 있는 기존의 Properties 객체와 같은 클래스가 필요합니다.&lt;/p&gt;
&lt;p&gt;다행히도 OAuth 프로토콜에서는 해당 플랫폼을 이용하기 위해 필요한 정보와 요청 형태가 표준화 되어 있습니다. 덕분에 공통된 하나의 타입의 클래스인 &lt;strong&gt;OAuthRegistrationProperty&lt;/strong&gt; 클래스를 만들어 이를 해결하였습니다.&lt;/p&gt;
&lt;p&gt;두번째는 &lt;strong&gt;Converter 클래스&lt;/strong&gt;입니다.
플랫폼별로 유저정보의 응답형태가 조금씩 다릅니다. 예를들어 카카오는 유저 이름이 nickname이라는 필드로 제공되는 반면, google의 경우 name으로 제공됩니다. 이렇게 조금씩 다른 응답을 공통된 형태의 응답객체로 사용하고 싶었습니다. 이를 위해 해당 플랫폼에 맞는 Converter를 그때그때 직접 구현하기로 결정하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/dcce9dd9-6fb7-40df-b4fc-f09c15d683b7&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/d18b30d6-7a29-42f5-9379-2dd73fd39c5f&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;개선 후의 구체적인 동작흐름은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 애플리케이션 실행 시 application.yml에 작성된 구성정보를 읽어 OAuthClientProperty 클래스들이 Map에 등록됩니다.&lt;br&gt;
이때 각 플랫폼으로부터 오는 응답을 공통된 형태의 객체로 변환해 줄 Converter 클래스도 함께 등록됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/242c6bc5-8678-447e-bfeb-642277846c96&quot; width=&quot;600px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 프로퍼티 객체들과 컨버터 객체들을 조합하여 플랫폼별 OAuthClientRegistration 클래스를 생성하고 InMemoryClientRegistrationRepository에 등록합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;생성자에서 createRegistrationMap 메서드가 호출되고 이 시점에 Property 객체와 Converter 객체를 조합해 플랫폼별 Registration 클래스를 생성합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7e7a70fc-c8aa-4f21-97e8-40df4043d3cb&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이를 통해 기존에 특정 Property 객체를 직접 주입받아 사용하던 서비스의 코드를 제거할 수 있었으며, 각각 다른 Response 타입을 만드는 대신 Converter를 사용해 공통적으로 사용할 OAuthUserProfile이라는 클래스 타입으로 사용할 수 있었습니다.&lt;br&gt;
더 나아가 요청 형태에 따라 사용할 플랫폼 정보를 동적으로 사용할 수 있도록 개선하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/a77a78db-becd-4e6f-ae81-3d7605aab337&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-client-객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-client-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;2 client 객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Client 객체&lt;/h3&gt;
&lt;p&gt;기존에 사용하던 클라이언트 객체를 요청할 플랫폼에 상관없이 재사용하고 싶었습니다.&lt;br&gt;
이를 위해 FeignClient 문서를 찾아보다 요청의 첫번째 인자로 URI 타입의 정보를 넘겨주면 요청 uri를 동적으로 설정할 수 있다는 사실을 알게 되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7b8b180d-9a49-45eb-befb-2bd80d738614&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;이를 통해 서비스 코드에서는 하나의 Client 객체만으로 모든 OAuth 관련 요청을 처리할 수 있게 되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;getOAuthAccessToken&lt;/strong&gt;: 유저의 정보를 요청할때 필요한 access token을 요청하는 메서드입니다.
필수적으로 필요한 정보를 registration으로부터 꺼내 body에 담아 요청합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getOAuthUserInformation&lt;/strong&gt;: 유저의 정보를 요청하는 메서드입니다.
(이때 kakao의 경우 응답 json의 depth가 2~3까지 들어가는 반면 github은 1입니다. 이 정보들을 평탄화하여 map에 저장하는 작업을 FeignClient Deserializer에서 합니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7d800805-36b9-4b80-86f9-b69985f99808&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7998b377-ea0f-4d63-bda1-1536a40d2932&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;최종-개선&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EC%A2%85-%EA%B0%9C%EC%84%A0&quot; aria-label=&quot;최종 개선 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최종 개선&lt;/h2&gt;
&lt;p&gt;아래는 결과적으로 개선된 코드입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Controller 레이어에서 해당 플랫폼을 처리할 수 있는 Registration 객체를 찾아 서비스에 전달합니다.&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; 서비스에서는 access token, user 정보를 차례대로 요청합니다. 이때 플랫폼 상관없이 공통된 타입의 객체로 응답을 처리합니다.&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; Converter를 사용해 받은 응답으로부터 서비스에서 필요한 정보들만 뽑아 OAuthUserProfile 객체를 만든 뒤, 유저를 저장하는 로직을 처리합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/47e00c4a-347b-4d9d-b281-40a0e5b4d498&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마무리&lt;/h2&gt;
&lt;p&gt;지금까지 유연한 OAuth 로그인 처리를 위해 기존의 코드를 개선한 과정을 작성해보았습니다.&lt;br&gt;
기존 코드에서 새로운 플랫폼을 지원하려고 한다면 아래와 같은 작업들이 필요했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 Properties 작성, Client 클래스 작성&lt;/li&gt;
&lt;li&gt;플랫폼의 응답을 처리할 Response 클래스 작성&lt;/li&gt;
&lt;li&gt;Service 객체에서 새로운 Properties 주입 후 조건문을 통한 동적 사용
동시에 실제 비즈니스 로직이 변경되는것이 아님에도 불구하고 서비스의 코드에 변경이 반영되어야 했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 개선한 뒤에는 아래 2가지 작업만 하면 새로운 플랫폼을 지원할 수 있도록 변경되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.yml에 구성정보 작성&lt;/li&gt;
&lt;li&gt;응답을 처리할 컨버터 클래스 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;결과적으로 기존 코드를 직접 개선하는 경험을 통해 확장에 유연한 코드의 중요성에 대해 더 체감할 수 있었으며 리팩토링의 즐거움 또한 알 수 있었습니다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot;&gt;기존의 문제점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B9%B4%EC%B9%B4%EC%98%A4-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%97%90-%EC%9D%98%EC%A1%B4%EC%A0%81%EC%9D%B4%EB%A9%B0-%ED%99%95%EC%9E%A5%EC%97%90-%EB%8B%AB%ED%98%80%EC%9E%88%EB%8A%94-%EC%BD%94%EB%93%9C&quot;&gt;카카오 로그인에 의존적이며 확장에 닫혀있는 코드.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B0%9C%EC%84%A0-%EA%B3%BC%EC%A0%95&quot;&gt;개선 과정&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EA%B5%AC%EC%84%B1%EC%A0%95%EB%B3%B4-%EA%B0%9D%EC%B2%B4-%EC%B6%94%EC%83%81%ED%99%94-%EB%B0%8F-%EB%8F%99%EC%A0%81%EC%82%AC%EC%9A%A9&quot;&gt;1. 구성정보 객체 추상화 및 동적사용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-client-%EA%B0%9D%EC%B2%B4&quot;&gt;2. Client 객체&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%B5%9C%EC%A2%85-%EA%B0%9C%EC%84%A0&quot;&gt;최종 개선&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[SpringSecurity가 OAuth 로그인을 처리하는 과정 파헤치기]]></title><description><![CDATA[서론 저는 이전에 참여했던 사이드 프로젝트 에서 OAuth…]]></description><link>https://seokho-ham.github.io/backend/spring/spring-security-and-oauth/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/spring/spring-security-and-oauth/</guid><pubDate>Sun, 05 Mar 2023 01:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;저는 이전에 참여했던 사이드 프로젝트 에서 OAuth 로그인 개발을 담당했습니다.&lt;br&gt;
그리고 이번에 프로젝트 리팩토링을 계획하면서 가장 마음에 안들던 로그인 관련 코드를 개선하기로 결정했습니다.&lt;/p&gt;
&lt;p&gt;최초 기획에서는 카카오 로그인만을 사용하기로 했기 때문에 카카오 로그인에 맞게 코드를 작성하였고, 현재 로그인 관련 코드는 카카오 로그인에 종속적인 코드입니다. 때문에 새로운 로그인 방식을 도입하기에도 까다로운 상황이라 이번 기회에 OAuth 로그인 관련 코드를 개선하기로 했습니다.&lt;/p&gt;
&lt;p&gt;OAuth 관련 클래스들을 추상화하기 위해 고민하던 중 SpringSecurity에서는 어떻게 여러개의 플랫폼에 쉽게 대응할 수 있도록 했는지, 실제 내부 동작은 어떻게 동작하는지 궁금해졌고 그래서 디버깅을 통해 내부 동작을 학습해보았습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;springsecurity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#springsecurity&quot; aria-label=&quot;springsecurity permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SpringSecurity?&lt;/h2&gt;
&lt;p&gt;공식문서에서는 애플리케이션 보안(특히 유저의 인증, 인가)을 관리하기 위해 제공되는 프레임워크라고 설명합니다.
대표적인 특징으로는 Spring의 Filter를 이용해서 처리한다는 점이 있습니다.&lt;br&gt;
(더 자세한 설명은 &lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.2.10.RELEASE/reference/htmlsingle/html5/#what-is-acegi-security&quot;&gt;&lt;strong&gt;공식문서&lt;/strong&gt;&lt;/a&gt;를 읽어보시면 될거 같습니다.)&lt;/p&gt;
&lt;p&gt;SpringSecurity에 대한 소개가 주제가 아니기 때문에 해당 글을 읽을때 필수적으로 필요한 개념들만 간단하게 정리하고 넘어가겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SecurityContextHolder&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SpringSecurity에서는 기본적으로 유저의 정보를 ThreadLocal을 SecurityContext를 생성해 관리합니다. 해당 Context를 관리할 수 있는 클래스입니다.&lt;/li&gt;
&lt;li&gt;Context의 생성부터 소멸을 관리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SecurityContext&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;쓰레드별로 생성되는 클래스이며, 실제 요청 유저와 관련된 정보가 담기는 Authentication 객체가 저장되는 공간입니다.&lt;/li&gt;
&lt;li&gt;요청이 끝날때 해당 Context 객체는 사라집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;현재 요청을 보낸 유저의 실제 정보를 담고 있는 객체를 의미합니다.&lt;/li&gt;
&lt;li&gt;유저의 롤, 인증된 플랫폼 명, 유저 정보 등을 담고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AuthenticationProvider(AuthenticationManager)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;요청 정보를 가지고 리소스 서버에 요청을 보내 유저 인증을 처리하는 클래스입니다.&lt;/li&gt;
&lt;li&gt;AuthenticationManager와 동일한 클래스는 아니지만 Manger내부의 Provider가 실제 인증을 처리하기 때문에 여기서는 묶어서 작성했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;springsecurity는-어떻게-여러-플랫폼에-대해-유연하게-처리하는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#springsecurity%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%97%AC%EB%9F%AC-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%97%90-%EB%8C%80%ED%95%B4-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;springsecurity는 어떻게 여러 플랫폼에 대해 유연하게 처리하는가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SpringSecurity는 어떻게 여러 플랫폼에 대해 유연하게 처리하는가?&lt;/h2&gt;
&lt;p&gt;제가 리팩토링에 앞서 가장 고민하던 부분은 각 플랫폼별로 요청 형태와 응답 형태가 조금씩 다른데 이걸 어떻게 깔끔하게 처리할것인가였습니다.&lt;br&gt;
SpringSecurity에서는 다음과 같은 방식으로 각각 처리했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[요청]&lt;/strong&gt;
SpringSecurity에서는 각각의 리소스 서버에 대한 정보(clientId, clientSecret, 각 api uri 등등)를 ClientRegistration이라는 클래스로 관리합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 각각의 플랫폼에 대한 정보를 ClientRegistration 타입의 객체로 생성합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/9e5d48f9-047c-44b3-b38f-c3a5ec7cdf72&quot; width=&quot;600px&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 모든 ClientRegistration 객체들을 InMemoryClientRegistrationRepository 타입의 Bean에서 Map 형태로 관리합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/ee2456b1-7f08-43c1-89c0-78d46379f074&quot; width=&quot;600px&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 유저의 요청이 올때 해당 Repository에서 플랫폼명에 맞는 ClientRegistration 정보를 사용해 인증요청들을 처리합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[응답]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;응답의 경우 객체의 필드에 값을 매핑을하고 있던 저의 방식과 다르게 추상화 된 User객체를 만들고 실제 데이터들은 Map형태로 저장하고 있습니다. 아래 코드에서 보이는 attributes라는 Map형태의 필드에 응답값들을 저장합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/d11efeea-c7a6-4504-b658-7f675680af1e&quot; width=&quot;600px&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;그리고 각 요청에서 실제 필요한 값을 Dto에 매핑하는 작업은 개발자에게 위임하고 있습니다.&lt;br&gt;
엄청 특별한 방법은 아니지만 이 코드를 보며 추상화를 어떻게 해야할지 감을 잡을 수 있었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;springsecurity가-oauth로그인을-처리하는-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#springsecurity%EA%B0%80-oauth%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;springsecurity가 oauth로그인을 처리하는 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SpringSecurity가 OAuth로그인을 처리하는 과정&lt;/h2&gt;
&lt;p&gt;다음은 SpringSecurity가 OAuth 로그인을 처리하는 Flow입니다.&lt;br&gt;
이해를 돕고자 흐름도를 그렸습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/86c7fba8-e51b-4506-9d81-67101b470739&quot; width=&quot;600px&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;첫번째 그림은 유저가 처음 로그인 요청을 했을 때의 Flow입니다.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;[1~2]&lt;/strong&gt; 유저가 우리의 서버에 로그인 요청을 보내면 서버에서는 리소스 서버로 redirect를 시킵니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이때 위에서 설명드린 InMemoryClientRegistrationRepository에서 ClientRegistration 객체를 찾아 정보를 얻어옵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7259b1d3-07b3-4d63-816a-47e0b0dc9ebb&quot; width=&quot;600px&quot;&gt;&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;만약 해당하는 플랫폼명이 없다면 예외를 발생시킵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/ac5843e1-2ebd-4c25-9281-b30acc890ede&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[3]&lt;/strong&gt; 리소스 서버에서 유저가 접근허용을 할 경우 parameter에 담긴 redirectUri로 authorization code와 함께 redirect 시킵니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그림에 보이시는 state값은 OAuth2 프로토콜에서 csrf 공격을 방지하기 위해 전송하는것을 권장하고 있습니다.
Security 내부에서는 처음 요청의 state와 응답의 state값을 비교하여 다를 경우 예외를 발생시키고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;여기서부터는 SpringSecurity 내부의 Flow입니다.&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;(사진이 작으면 확대해주세요)&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/3b9e5c4a-731e-4273-b7b9-701b36e51371&quot;&gt;
&lt;p&gt;&lt;strong&gt;[4]&lt;/strong&gt; authorization code를 서버가 받게되면 &lt;code class=&quot;language-text&quot;&gt;OAuthLoginAuthenticationFilter&lt;/code&gt;의 attemptAuthentication 메서드에서 해당 요청의 처리를 맡게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/dcc3bc15-842a-45db-a3f9-3eec0207a610&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;해당 메서드의 내부로 가보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;코드 내부에서 authorizationRequest, authorizationResponse, redirectUri 객체생성 혹은 검증과 같은 코드도 있지만 이해하는데 필수적이지는 않아서 설명을 제외했습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/3b5a6e0c-fef8-4811-a175-07ef6612233a&quot; width=&quot;900px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[5]&lt;/strong&gt; 다음의 메서드들을 사용하여 AuthorizationCode를 검증합니다. 존재하지 않을 경우 예외를 발생시킵니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/755872a5-b70e-4731-8580-2cc2ffdccc43&quot; width=&quot;800px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[6~7]&lt;/strong&gt; InMemoryClientRegistrationRepository로부터 해당 플랫폼에 맞는 ClientRegistration 객체를 조회해옵니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[8]&lt;/strong&gt; 앞에서 설명드린 OAuthProvider의 구현체인 &lt;code class=&quot;language-text&quot;&gt;OAuth2LoginAuthenticationProvider&lt;/code&gt; 에게 &lt;strong&gt;유저 인증&lt;/strong&gt;을 요청합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파라미터로는 유저의 정보를 가져오는데 사용할 토큰을 저장할 추후 SecurityContext에 저장할 &lt;em&gt;&lt;code class=&quot;language-text&quot;&gt;OAuth2LoginAuthenticationToken&lt;/code&gt;&lt;/em&gt; 객체를 전달합니다.&lt;/li&gt;
&lt;li&gt;현재 시점에서는 access, refresh 토큰이 null이며 authenticated 상태도 false입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;225&quot; alt=&quot;oauth-11&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/0758a840-1368-4a93-883b-a3d60cd24afa&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/20658e32-6612-4764-b0ef-8be36c29a049&quot; witdh=&quot;600px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[9]&lt;/strong&gt; 리소스서버로부터 AccessToken을 요청하는 역할은 OAuth2AuthorizationCodeAuthenticationProvider 클래스가 가지고 있게 때문에 위의 코드에서 볼 수 있듯이 다시한번 authenticate 메서드를 실행합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/748a5d25-3963-4d77-8130-3cbcd5b7904f&quot; width=&quot;900px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[10~12]&lt;/strong&gt; OAuth2AuthorizationCodeAuthenticationProvider의 authenticate 메서드 내에서는 리소스서버에 accessToken 요청을 하고 있습니다. 이후 응답값을 변환하여 반환합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OAuth2AuthorizationCodeAuthenticationProvider는 내부에 &lt;strong&gt;요청을 변환하는 converter&lt;/strong&gt;와 &lt;strong&gt;resttemplate으로 요청을 보내는 client 객체&lt;/strong&gt;를 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;540&quot; alt=&quot;oauth-14&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/6f0f47f7-d15f-4399-80e8-486e12a21df9&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[13]&lt;/strong&gt; OAuth2LoginAuthenticationProvider는 응답받은 AccessToken을 UserRequest 타입의 객체로 &lt;code class=&quot;language-text&quot;&gt;UserService&lt;/code&gt;에게 전달합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UserRequest 타입의 객체는 내부에 ClientRegistration과 AccessToken을 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/e21766b6-708e-4fa1-b3b9-061e34b15e30&quot; width=&quot;900px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[14~16]&lt;/strong&gt; DefaultOAuth2UserService의 loadUser 메서드 내부에서는 getResponse라는 메서드를 호출합니다. 해당 시점에 리소스서버로 유저의 정보를 요청힙니다. 이후 응답 받은 데이터를 파싱하여 추상화 된 유저 클래스로 변환한 뒤 반환합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 UserService는 DB에 저장하는 로직을 가지고 있기 때문에 개발자가 직접 작성하게 됩니다.
이때 SpringSecurity에서 제공하는 DefaultOAuth2UserService를 상속받아서 작성하면 보다 응답값을 사용하여 추가 로직을 작성할 수 있습니다.이 시점에 보통 DB에 저장하는 로직 등이 진행됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;[17]&lt;/strong&gt; 작업이 종료되면 유저 정보를 담은 객체를 AuthenticationProvider에게 반환합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[18]&lt;/strong&gt; 유저 정보를 받은 OAuth2LoginAuthenticationProvider에서는 SecurityContext에 저장할 Authentication 타입의 OAuth2AuthenticationToken 객체로 변환한 뒤 반환합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/03d46e9a-7902-4153-8781-3734154bb6ea&quot; width=&quot;900px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[19]&lt;/strong&gt; 마지막으로 OAuthLoginAuthenticationFilter 에서는 반환된 정보를 SecurityContext에 저장하게 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마무리&lt;/h2&gt;
&lt;p&gt;직접 프로젝트에서 SpringSecurity를 써보지 않고 학습해서 중간중간 코드를 이해하지 못하는 상황
*(ex. Filter에서 AuthorizedClientService에 저장하는 로직 등)*들도 있었지만 이번 기회를 통해 SpringSecurity에 대한 개념과 Security에서의 OAuth 로그인을 이해할 수 있었습니다. 또한 사이드 프로젝트 리팩토링의 방향성을 얻을 수 있었습니다.
다음 포스트는 이번에 학습한 내용을 사이드프로젝트 리팩토링에 녹여낸 경험이 될 것 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;참고자료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot; aria-label=&quot;참고자료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/3.2.10.RELEASE/reference/htmlsingle/html5/#what-is-acegi-security&quot;&gt;https://docs.spring.io/spring-security/site/docs/3.2.10.RELEASE/reference/htmlsingle/html5/#what-is-acegi-security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.callicoder.com/spring-boot-security-oauth2-social-login-part-2/&quot;&gt;https://www.callicoder.com/spring-boot-security-oauth2-social-login-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/76&quot;&gt;https://mangkyu.tistory.com/76&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://velog.io/@max9106/OAuth3&quot;&gt;https://velog.io/@max9106/OAuth3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springsecurity&quot;&gt;SpringSecurity?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springsecurity%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%97%AC%EB%9F%AC-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%97%90-%EB%8C%80%ED%95%B4-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94%EA%B0%80&quot;&gt;SpringSecurity는 어떻게 여러 플랫폼에 대해 유연하게 처리하는가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#springsecurity%EA%B0%80-oauth%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95&quot;&gt;SpringSecurity가 OAuth로그인을 처리하는 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot;&gt;참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[offset과 no offset을 사용한 페이징 성능 차이 분석]]></title><description><![CDATA[서론 최근 진행했던 식도락 프로젝트에서 유저의 피드 목록을 페이징 처리를 하여 제공하는 api를 개발했습니다. 해당 api는 sns…]]></description><link>https://seokho-ham.github.io/backend/database/offset-nooffset/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/database/offset-nooffset/</guid><pubDate>Fri, 06 Jan 2023 01:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;최근 진행했던 식도락 프로젝트에서 유저의 피드 목록을 페이징 처리를 하여 제공하는 api를 개발했습니다.&lt;/p&gt;
&lt;p&gt;해당 api는 sns 특성상 페이지 단위로 제공하기보다는 &lt;strong&gt;무한 스크롤 형식&lt;/strong&gt;에 &lt;strong&gt;최근 작성한 순서&lt;/strong&gt;로 데이터를 제공해야 했습니다.&lt;/p&gt;
&lt;p&gt;페이징 방식을 고민하던 중 offset과 no-offset 방식이 있고 offset 방식을 사용하면 매번 full-scan을 하여 성능적으로 좋지 않다는 것을 알게 되어 개발 당시에는 곧바로 no-offset 방식을 도입하여 개발하였습니다.
하지만 실제로 offset 방식과 no-offset 방식의 성능 차이가 얼마나 나는지 눈으로 확인하기 위해 두가지 방식을 모두 적용하여 성능을 비교해보기로 하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;offset이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#offset%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;offset이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;offset이란?&lt;/h2&gt;
&lt;p&gt;offset 이란 sql에서 조회를 시작할 기준점을 의미합니다. limit은 조회할 결과의 개수를 의미합니다.
예를 들어 아래와 같은 쿼리가 있을 경우 5000번째 행부터 10개의 행을 읽겠다는 의미입니다. (이때 행은 0부터 시작합니다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; TABLE_NAME
&lt;span class=&quot;token keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;offset은 조회를 한 결과에서 limit으로 지정한 개수만큼만 반환하고 나머지는 버리는 방식으로 동작합니다. 위의 쿼리를 예로 들면 5000번째 데이터부터 10개를 조회하기 위해서는 5010개의 데이터를 모두 읽은 뒤, 앞의 필요하지 않은 5000개는 버려야합니다.&lt;/p&gt;
&lt;p&gt;적은 양의 데이터를 조회할때는 성능적인 문제가 발생하지 않지만 &lt;strong&gt;전체 데이터의 개수가 많아질수록 앞에 읽어야하는 데이터의 양이 많아져 문제가 됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;추가적으로 저는 offset 방식은 무한 스크롤에 적합하지 않다고 생각합니다.&lt;/p&gt;
&lt;p&gt;유저가 피드를 조회한다고 가정하고 예를 들어 보겠습니다.
(데이터는 생성 순서대로 제공된다고 가정합니다.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 1번~10번 리뷰를 조회했습니다.&lt;/li&gt;
&lt;li&gt;이 시점에 새로운 데이터가 추가되었습니다.&lt;/li&gt;
&lt;li&gt;11번~20번 리뷰를 이어서 조회합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 데이터가 추가 되었기 때문에 리뷰의 개수는 총 21개가 되며 기존 10번째 행에 있는 리뷰가 11번째 행으로 밀려나게 되고, 사용자는 원래대로 11&lt;del&gt;20번째 리뷰를 조회하게 됩니다. 여기서 문제가 발생하는데 offset 방식은 단순히 21개의 데이터 중 11&lt;/del&gt;20번째 행을 결과로 반환할것입니다. 그러면 스크롤을 내리는 사용자의 화면에는 &lt;strong&gt;리뷰(기존 10번째 리뷰)가 중복되어 보이게 됩니다.&lt;/strong&gt;
(물론 애플리케이션에서 추가적인 코드를 작성하여 해당 문제는 해결할 수 있겠지만 이것 자체가 비용이 발생하는것이고 곧 단점이라고 생각됩니다.)&lt;/p&gt;
&lt;p&gt;위의 문제들을 해결하기 위해 저희 서비스에서는 no-offset방식을 적용하였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;그렇다면-no-offset은-뭘까요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-no-offset%EC%9D%80-%EB%AD%98%EA%B9%8C%EC%9A%94&quot; aria-label=&quot;그렇다면 no offset은 뭘까요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그렇다면 no-offset은 뭘까요?&lt;/h2&gt;
&lt;p&gt;이름 그대로 offset을 사용하지 않고 특정 id를 기준점으로 잡아 where절을 사용하여 데이터를 조회하는 방식입니다.&lt;/p&gt;
&lt;p&gt;이 방식을 사용할 경우 기준점 이전의 데이터도 모두 조회하던 offset과 달리 기준점인 id부터 limit의 개수만 조회하기 때문에 데이터의 개수가 많아져도 성능문제가 발생하지 않습니다.&lt;/p&gt;
&lt;p&gt;이어서 각각의 방식을 사용하여 실제 구현한 코드와 테스트를 통해 성능을 비교해보겠습니다.&lt;br&gt;
동일한 환경으로 테스트를 진행했습니다.&lt;/p&gt;
&lt;h3 id=&quot;테스트-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;테스트 환경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 환경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리뷰 데이터 : 10,000,000건&lt;/li&gt;
&lt;li&gt;유저 데이터 : 1000명&lt;/li&gt;
&lt;li&gt;테스트 시나리오 : 1번 유저가 999명을 팔로우하고 있으며, 1번 유저의 정보로 피드를 조회하도록 요청 (이때 조회할 데이터의 번호는 랜덤입니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-offset-방식의-구현과-성능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-offset-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%84%B1%EB%8A%A5&quot; aria-label=&quot;1 offset 방식의 구현과 성능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. offset 방식의 구현과 성능&lt;/h3&gt;
&lt;p&gt;아래는 실제 저희 서비스에서 유저의 피드를 조회하는 메서드입니다.&lt;br&gt;
메서드의 2번째 파라미터로 페이지 번호와 반환받을 데이터의 개수가 있는 Pageable 타입의 객체를 넘겨줍니다&lt;/p&gt;
&lt;img width=&quot;559&quot; alt=&quot;offset-1&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/72f4beab-35da-48fe-a23f-b911da4936c4&quot;&gt;
&lt;ul&gt;
&lt;li&gt;여기서 Pageable 인터페이스의 실제 구현체인 PageRequest 클래스를 사용하여 객체를 만듭니다.
&lt;ul&gt;
&lt;li&gt;cursor가 페이지 번호, size가 limit을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;224&quot; alt=&quot;offset-2&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/6564a564-6487-445b-8c21-ec2071ee4337&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;다음은 실제 나가는 쿼리입니다. 보시는바와 같이 offset이 적용되어 있습니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8c9a19e8-ea02-4121-b31c-482cfcbcccc1&quot; width=&quot;600px&quot;&gt;
&lt;p&gt;다음은 ngrinder를 사용하여 위에 적어둔 환경으로 3분간 테스트를 진행한 결과입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;초당 처리한 요청의 개수 : 1.5개&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청당 평균 응답 속도 : 약 31초&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;**실패한 요청 개수 : 147개 **&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/865f3959-b716-4f8d-a408-8369b49ce378&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7fb186c4-2854-40de-80f7-ca6ea5e1ff1d&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;많은 요청들이 위와 같이 Connection Pool로부터 커넥션을 가져오지 못해 ConnectionTimeout Exception이 발생하는것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;다음으로는 no-offset 방식과 실제 테스트 결과를 보여드리겠습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&quot;2-no-offset-방식의-구현과-성능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-no-offset-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%84%B1%EB%8A%A5&quot; aria-label=&quot;2 no offset 방식의 구현과 성능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. no-offset 방식의 구현과 성능&lt;/h3&gt;
&lt;p&gt;offset 방식의 메서드와 동일하지만 파라미터로 target id가 추가되었습니다.&lt;br&gt;
(최신 데이터부터 반환해야되기 때문에 조건이 &amp;#x3C;=로 되어 있습니다.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/ebe7d6eb-e81e-420e-921b-85b4ac9d8f29&quot; width=&quot;600px&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;다음은 실제 실행되는 쿼리입니다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/840282ce-4d38-42b4-9d3f-9e0eddf6ce30&quot; width=&quot;600px&quot;&gt;
&lt;ul&gt;
&lt;li&gt;여기서는 offset이 필요하지 않기 때문에 limit 역할을 하는 size만 Pageable 객체에 담습니다.
&lt;ul&gt;
&lt;li&gt;내부적으로는 PageRequest 구현체를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;178&quot; alt=&quot;offset-8&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/5d064ada-9158-45fd-8200-9f2d4c12db54&quot;&gt;
&lt;p&gt;아래는 동일한 환경에서 진행한 테스트를 결과입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;초당 처리한 요청의 개수 : 197개&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청당 평균 응답 속도 : 약 0.5초&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실패한 요청 개수 : 0개&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/a3611462-2e03-4d39-b22b-6aa4542ba74f&quot;&gt;
&lt;p&gt;2가지 방식의 성능차이를 비교하면 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;초당 처리한 요청의 개수 : &lt;span style=&quot;color:red&quot;&gt;1.5개&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 197개 (32배 향상)&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청당 평균 응답 속도 : &lt;span style=&quot;color:red&quot;&gt;약 31초&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 약 0.5초 (60배 향상)&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실패한 요청 개수 : &lt;span style=&quot;color:red&quot;&gt;147개&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 0&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추가적으로 리뷰데이터 백만건을 가지고도 테스트를 진행해보았습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;초당 처리한 요청의 개수 : &lt;span style=&quot;color:red&quot;&gt;12개&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 214개 (17배 향상)&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;요청당 평균 응답 속도 : &lt;span style=&quot;color:red&quot;&gt;약 8.3초&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 약 0.48초 (16배 향상)&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실패한 요청 개수 : &lt;span style=&quot;color:red&quot;&gt;147개&lt;/span&gt; -&gt;&lt;span style=&quot;color:blue&quot;&gt; 0&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8f992ea3-3c77-49fa-ba2a-df11385152f5&quot; width=&quot;600px&quot;&gt;
&lt;p&gt;결과에서 알 수 있듯이 눈에 띄게 성능이 심하게 차이가 났으며 데이터가 많을수록 그 차이는 컸습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;한줄-마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%9C%EC%A4%84-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;한줄 마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한줄 마무리&lt;/h2&gt;
&lt;p&gt;직접 테스트를 진행한 덕분에 각 방식의 동작하는 과정과 성능적으로 얼마나 차이가 나는지에 대해 알 수 있었습니다.&lt;/p&gt;
&lt;p&gt;하지만 결국 서비스의 특성에 맞춰 사용할 방식을 정하고 추후 성능을 개선하는것이 가장 좋은 해결책인것 같습니다.&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&quot;feat-성능비교-과정에서-고려하지-못한-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#feat-%EC%84%B1%EB%8A%A5%EB%B9%84%EA%B5%90-%EA%B3%BC%EC%A0%95%EC%97%90%EC%84%9C-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EC%A0%90&quot; aria-label=&quot;feat 성능비교 과정에서 고려하지 못한 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;feat. 성능비교 과정에서 고려하지 못한 점&lt;/h2&gt;
&lt;p&gt;최초 성능비교를 위한 테스트를 하는 시점에는 인메모리로 h2를 사용했습니다.&lt;/p&gt;
&lt;h3 id=&quot;1-out-of-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-out-of-memory&quot; aria-label=&quot;1 out of memory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Out of Memory&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[문제]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1,000,000건까지는 데이터가 잘 들어갔지만 10,000,000건부터는 OutOfMemory라는 에러메세지와 함께 데이터가 들어가지 않았습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[해결]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;H2 공식문서에서 찾아보니 Embedded 모드로 사용하면 실행하는 애플리케이션과 동일한 jvm 위에서 돌아간다는것을 알았습니다.&lt;/p&gt;
&lt;p&gt;해결방법으로는 앱 실행 시 옵션을 줘서 최대 메모리 용량을 늘려주는 방법이 있었습니다. (jvm은 실행 시 기본적으로 최대 메모리 용량을 256mb로 설정한다고 합니다.)&lt;/p&gt;
&lt;p&gt;하지만 매번 실행될때마다 데이터를 새로 넣는것은 비효율적일것 같아 로컬에서 도커 컨테이너로 mysql을 사용하도록 변경하였습니다.&lt;/p&gt;
&lt;h3 id=&quot;2-인메모리-db와-도커의-성능-차이-미해결&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-db%EC%99%80-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B0%A8%EC%9D%B4-%EB%AF%B8%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;2 인메모리 db와 도커의 성능 차이 미해결 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 인메모리 DB와 도커의 성능 차이 (미해결..)&lt;/h3&gt;
&lt;p&gt;인메모리 DB를 사용하여 테스트할떄는 평균 응답속도가 4초~6가 나오는 반면 로컬에서 도커 컨테이너로 mysql을 띄우고 실행했을때는 0.5초밖에 걸리지 않았습니다. 당연히 메모리상의 DB가 더 빠른 성능을 보여줄것이라고 생각했지만.. 아무래도 같은 jvm 위에서 실행되며 해당 애플리케이션의 쓰레드를 통해 I/O 작업이 발생하기 때문에 부하가 많아질수록 DB 성능도 떨어지는게 아닐까라고 생각됩니다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#offset%EC%9D%B4%EB%9E%80&quot;&gt;offset이란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-no-offset%EC%9D%80-%EB%AD%98%EA%B9%8C%EC%9A%94&quot;&gt;그렇다면 no-offset은 뭘까요?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD&quot;&gt;테스트 환경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1-offset-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%84%B1%EB%8A%A5&quot;&gt;1. offset 방식의 구현과 성능&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-no-offset-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%84%B1%EB%8A%A5&quot;&gt;2. no-offset 방식의 구현과 성능&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%ED%95%9C%EC%A4%84-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;한줄 마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#feat-%EC%84%B1%EB%8A%A5%EB%B9%84%EA%B5%90-%EA%B3%BC%EC%A0%95%EC%97%90%EC%84%9C-%EA%B3%A0%EB%A0%A4%ED%95%98%EC%A7%80-%EB%AA%BB%ED%95%9C-%EC%A0%90&quot;&gt;feat. 성능비교 과정에서 고려하지 못한 점&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-out-of-memory&quot;&gt;1. Out of Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-db%EC%99%80-%EB%8F%84%EC%BB%A4%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B0%A8%EC%9D%B4-%EB%AF%B8%ED%95%B4%EA%B2%B0&quot;&gt;2. 인메모리 DB와 도커의 성능 차이 (미해결..)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Gradle 맛보기]]></title><description><![CDATA[이번에 식도락 프로젝트를 진행하는 과정에서 빌드 시 submodule의 파일들을 복사하는 task를 추가하는 작업을 맡았습니다. 쿠킴의 레퍼런스 덕분에 작업 자체는 수월했지만, gradle에 대해 거의 모르다보니 build…]]></description><link>https://seokho-ham.github.io/backend/gradle/gradle%20%EB%A7%9B%EB%B3%B4%EA%B8%B0/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/gradle/gradle 맛보기/</guid><pubDate>Sun, 20 Nov 2022 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;이번에 식도락 프로젝트를 진행하는 과정에서 빌드 시 submodule의 파일들을 복사하는 task를 추가하는 작업을 맡았습니다.&lt;/p&gt;
&lt;p&gt;쿠킴의 레퍼런스 덕분에 작업 자체는 수월했지만, gradle에 대해 거의 모르다보니 build와의 의존관계설정을 설정해주지 않아서 동작하지 않았던 경험이 있었습니다. 또한 Jay가 작성한 restdocs 관련 task도 설명없이는 이해하지 못했고 답답함을 느껴 이번 기회에 정리해보았습니다.&lt;/p&gt;
&lt;h2 id=&quot;빌드란-무엇인가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94&quot; aria-label=&quot;빌드란 무엇인가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드란 무엇인가요?&lt;/h2&gt;
&lt;p&gt;개발자가 만든 애플리케이션을 컴퓨터에서 구동하기 위해서는 변환작업이 필요합니다. Java 애플리케이션의 경우 2가지 단계를 거치게 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;컴파일&lt;/strong&gt; : 소스코드를 바이트코드로 변환&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;링킹&lt;/strong&gt; : 바이트코드를 의존하고 있는 라이브러리들과 함께 하나의 파일로 압축하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/a004e04c-a30a-4704-ab17-855329bd9546&quot;&gt;
&lt;hr&gt;
&lt;h2 id=&quot;빌드-도구는-왜-필요한가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94&quot; aria-label=&quot;빌드 도구는 왜 필요한가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드 도구는 왜 필요한가요?&lt;/h2&gt;
&lt;p&gt;앞의 설명과 같이 애플리케이션을 실행하려면 먼저 &lt;strong&gt;컴파일과 링킹 과정&lt;/strong&gt;이 필요합니다. 하나의 파일만 컴파일한다면 javac 명령어를 터미널에 쳐서 하면 되겠지만 보통 애플리케이션은 수많은 패키지와 파일들로 구성되어 있습니다.&lt;/p&gt;
&lt;p&gt;이때 우리가 작성한 모든 클래스들에 대해 위의 방식으로 일일이 컴파일 작업을 진행하기는 어렵습니다. 더 나아가 외부의 라이브러리를 사용하고 있는 경우 해당 의존성까지 묶어서 빌드를 진행해야하기 때문에 이 작업을 매번 개발자가 하기는 어렵습니다.&lt;/p&gt;
&lt;p&gt;이런 작업을 수월하게 하기 위해서 빌드 도구를 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;빌드-도구의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;빌드 도구의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드 도구의 종류&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ant도 있지만 현재는 사용하지 않기 때문에 설명에서 제외했습니다.&lt;/strong&gt;
현재 Java에서 대표적으로 사용하는 빌드도구로는 Maven과 Gradle이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이중에서도 오늘은 Gradle에 대해 정리해보려고 합니다.&lt;/p&gt;
&lt;h3 id=&quot;maven&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#maven&quot; aria-label=&quot;maven permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Maven&lt;/h3&gt;
&lt;p&gt;Maven은 가장 많이 사용하고 있는 빌드도구입니다. 아래는 현시점 사용률인데 Maven이 압도적으로 높습니다.
아무래도 오랜기간 사용되어오다보니 점유율이 높을 수 밖에 없는것 같습니다. (첫 릴리스 : 2004년)&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/293e617f-58c4-436f-b884-7a4bba2f4b53&quot;&gt;
&lt;p&gt;Maven의 특징은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xml 파일로 관리한다.&lt;/li&gt;
&lt;li&gt;JVM에서만 동작하며 기본적으로는 Java 애플리케이션만 빌드해준다. (서드파티 플러그인을 이용하면 코틀린, 스칼라 등 다른 언어로 되어 있는 애플리케이션도 빌드가능)&lt;/li&gt;
&lt;li&gt;의존성을 자동으로 관리해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/fe084ae6-60ed-4901-a41f-4666f15cf034&quot;&gt;
&lt;h3 id=&quot;gradle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gradle&quot; aria-label=&quot;gradle permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gradle&lt;/h3&gt;
&lt;p&gt;Maven과 마찬가지로 대표적인 빌드 자동화 도구입니다. (첫 릴리스 : 2012년)&lt;/p&gt;
&lt;p&gt;특징은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다양한 언어를 지원합니다.&lt;/li&gt;
&lt;li&gt;Maven보다 빌드 속도가 2배 가까이 빠릅니다.&lt;/li&gt;
&lt;li&gt;Groovy라는 동적타입 프로그래밍 언어를 사용합니다. 현재는 Kotlin으로도 가능하다고 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h2 id=&quot;왜-gradle을-사용할까요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-gradle%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94&quot; aria-label=&quot;왜 gradle을 사용할까요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 Gradle을 사용할까요?&lt;/h2&gt;
&lt;p&gt;아직 점유율 자체는 Maven이 높지만 새롭게 만드는 프로젝트들은 대부분 Gradle로 작성된다고 합니다. 여러가지 이유들이 있겠지만 가장 큰 2가지 이유는 빌드속도와 작성/가독성의 차이 때문이라고 생각합니다.&lt;/p&gt;
&lt;h3 id=&quot;1-빌드-속도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%B9%8C%EB%93%9C-%EC%86%8D%EB%8F%84&quot; aria-label=&quot;1 빌드 속도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 빌드 속도&lt;/h3&gt;
&lt;p&gt;Gradle 공식문서에는 Maven과 세가지 경우에 대해서 테스트한 결과를 비교한 내용을 제공하고 있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Maven&lt;/th&gt;
&lt;th&gt;Gradle&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;클린 빌드&lt;/td&gt;
&lt;td&gt;26.19초&lt;/td&gt;
&lt;td&gt;14.79초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;재빌드&lt;/td&gt;
&lt;td&gt;25.85초&lt;/td&gt;
&lt;td&gt;0.68초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;코드 일부분만 수정해서 재빌드&lt;/td&gt;
&lt;td&gt;4.08초&lt;/td&gt;
&lt;td&gt;0.55초&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;결과는 위의 표와 같이 &lt;strong&gt;2배 가까이&lt;/strong&gt; 차이가 나고 있습니다.
2배 가까이 차이가 나는 이유는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task의 input, output을 트래킹하기 때문에 이전 빌드와 달라진점이 없다면 빌드를 진행하지 않습니다.&lt;/li&gt;
&lt;li&gt;이전 빌드의 캐시를 가지고 있기 때문에 이전 빌드 결과를 가지고 변경이 발생한 클래스들만 컴파일을 진행합니다.&lt;/li&gt;
&lt;li&gt;gradle daemon이라는 프로세스가 백그라운드에서 동작해서 빌드의 정보들을 메모리에 가지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-작성--가독성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9E%91%EC%84%B1--%EA%B0%80%EB%8F%85%EC%84%B1&quot; aria-label=&quot;2 작성  가독성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 작성 / 가독성&lt;/h3&gt;
&lt;p&gt;Maven은 xml을 사용하기 때문에 태그로 일일이 정보를 감싸서 작성해야하며 중복되는 코드가 많습니다.&lt;/p&gt;
&lt;p&gt;반면 Gradle은 스크립트 언어로 작성되어 작성하기도 수월하고 가독성 또한 좋습니다. 실제로 Maven에서는 이렇게 길었던 코드가 Gradle에서는 4줄로 끝났습니다.&lt;/p&gt;
&lt;img width=&quot;609&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/0bad9110-31fa-4a54-ae9f-795edcca387c&quot;&gt;
&lt;br/&gt;
&lt;img width=&quot;609&quot; alt=&quot;gradle-5&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/6b1ac68b-db12-49a9-80a6-9ff4aa9794a9&quot;&gt;
&lt;br/&gt;
&lt;h2 id=&quot;gradle이-빌드를-하는-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gradle%EC%9D%B4-%EB%B9%8C%EB%93%9C%EB%A5%BC-%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;gradle이 빌드를 하는 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gradle이 빌드를 하는 과정&lt;/h2&gt;
&lt;p&gt;Gradle 세단계를 거쳐 빌드작업을 진행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Initialization(초기화)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;환경변수, 빌드 시 필요한 프로젝트 등 빌드에 필요한 정보를 읽어서 Project 객체를 생성합니다.&lt;/li&gt;
&lt;li&gt;멀티 프로젝트를 지원하는데 이때 사용할 프로젝트의 목록은 settings.gradle 에 존재합니다.
settings.gradle 이 없다면 단일 프로젝트로, 있으면 내부의 목록을 읽고 단일 / 멀티 여부를 결정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuration(환경구성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;초기화 과정에서 생성된 Project 객체에 맞는 빌드 스크립트가 실행되고, 실행한 task와 동일한 이름의 task를 프로젝트에서 찾습니다.&lt;/li&gt;
&lt;li&gt;이때 task 그래프를 만들고 메인 task를 위해 실행해야하는 task들의 순서를 결정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execution(실행) : task들을 실행합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h2 id=&quot;task는-뭔가요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#task%EB%8A%94-%EB%AD%94%EA%B0%80%EC%9A%94&quot; aria-label=&quot;task는 뭔가요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Task는 뭔가요?&lt;/h2&gt;
&lt;p&gt;기본적으로 Gradle은 task 단위로 동작하는데 이름 그대로 빌드 시 실행할 하나의 작업을 의미합니다. 빌드 시 Configure 단계에서 의존성에 기반해서 여러개의 task를 정의하고 실행해야하는 순서를 정한 뒤, 그래프 형태로 연결시킵니다.&lt;/p&gt;
&lt;img width=&quot;422&quot; title=&quot;하하하&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/73486df1-44e1-4006-8005-ee69b2e4d21c&quot;&gt;
&lt;p&gt;Task는 다음과 같이 구성됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action : 어떤 작업을 할지를 나타냅니다.&lt;/li&gt;
&lt;li&gt;Input : 작업을 수행하기 위해서 필요한 입력값 (ex - 변수, 파일, 경로…)을 나타냅니다.&lt;/li&gt;
&lt;li&gt;Output : 작업의 결과로 영향을 받을 파일 혹은 경로를 나타냅니다.
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Gradle의 빌드속도가 빠른 이유는 변한값이 존재하지 않으면 이전 빌드의 결과물을 사용한다고 했는데, task의 input, output을 확인해서 변경 여부를 파악합니다. (변경된 값이 없는 경우, 해당 task는 건너뜁니다)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h2 id=&quot;tip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tip&quot; aria-label=&quot;tip permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIP&lt;/h2&gt;
&lt;p&gt;Task는 서로 의존관계를 설정할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dependsOn 키워드를 사용해서 의존하는 task를 설정할 수 있습니다. 의존관계를 작성하면, 반드시 의존하고 있는 task 이후에 실행됩니다. (dependsOn 이외에도 의존관계를 설정하거나 실행순서를 지정할 수 있는 다양한 메서드가 있습니다. 링크)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;groovy&quot;&gt;&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;secondTask &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      dependsOn firstTask
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//or&lt;/span&gt;

firstTask&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dependOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;secondTask&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Task에서 property 키워드를 사용해 동적으로 환경변수를 지정할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;groovy&quot;&gt;&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;taskName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      property &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래 토글은 input,output이 설정되고 action이 실행되는 과정이 궁금해서 copy task의 동작 과정을 얕게 파본 내용입니다.&lt;br&gt;
(건너뛰어도 무방합니다.)&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;더보기&lt;/summary&gt;
&lt;p&gt;아래는 현재 진행중인 프로젝트에서 사용하고 있는 submodule의 application.yml을 복사하는 task입니다.&lt;/p&gt;
&lt;img width=&quot;315&quot; alt=&quot;gradle-1&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/c16b3606-7382-4f83-ba42-9991fd1c897a&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. 가장 먼저 Copy Task 클래스입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy액션을 생성하는 메서드, copy작업 시 파일 경로등을 담은 스펙을 생성하는 메서드로 구성되어 있있습니다.
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/d67b1b61-08b5-473f-9610-eb132218bce8&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. AbstractCopyTask 추상 클래스의 from, into, include 메서드를 사용해서 경로를 지정해줍니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부적으로는 Spec클래스들에 정보를 저장합니다.&lt;/li&gt;
&lt;li&gt;여기서 MainSpec과 RootSpec은 액션을 수행하기 위해 필요한 정보들을 담고 있는 클래스들입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img width=&quot;451&quot; alt=&quot;gradle-3&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/21385e3c-fe5a-46c3-9ac3-9ab117036367&quot;&gt; &lt;br/&gt;
&lt;img width=&quot;393&quot; alt=&quot;gradle-4&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/1b2f8b69-1d16-48eb-8e95-29876d235e5c&quot;&gt; &lt;br/&gt;
&lt;img width=&quot;431&quot; alt=&quot;gradle-5&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/50ba3b3f-109c-4b47-b4e3-18005a709fd1&quot;&gt; &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractCopyTask 추상 클래스를 보면 생성될 시 현재 구현체의 스펙을 생성하는 메서드를 호출합니다. (여기서 실제 구현체는 Copy 클래스입니다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/1d6b7ec2-455a-4424-b961-6748429f6a43&quot;&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;아래는 Copy 구현체가 생성하는 스펙 클래스입니다.
&lt;ul&gt;
&lt;li&gt;위에서 설정해준 into 경로는 해당 클래스의 destinationDir로 설정됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/b51d63cb-b6a1-465b-91be-4a68661adbc9&quot;&gt;
&lt;p&gt;&lt;strong&gt;3. AbstractCopyTask 추상 클래스로 올라가보면 실제 copyTask가 존재합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;action을 실행시켜줄 executor와 action을 만들어줍니다. 매개변수로는 이전에 생성했던 Spec클래스와 action을 넣어줍니다.&lt;/li&gt;
&lt;li&gt;`@TaskAction“ 어노테이션은 실제 태스크가 실행될때 호출될 메서드를 가리킵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/06841086-8cc4-447c-926e-95b90026c750&quot;&gt;
&lt;ul&gt;
&lt;li&gt;여기서 생성되는 CopyAction은 실제로는 Copy 클래스에 있는 메서드가 생성하는 FileCopyAction클래스가 됩니다.
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/9b689e0d-c480-4486-b5fb-7493a5352e85&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. Task가 실행되면 실제로는 FileCopyAction클래스 내부에 있는 innerClass의 메서드가 호출됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아래 클래스의 processFile 메서드가 호출되고 이때 파일이 복사됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/4b1beea2-0198-40f3-a597-a1937939144c&quot;&gt;
&lt;/details&gt;
&lt;h2 id=&quot;spring-boot-프로젝트의-buildgradle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spring-boot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-buildgradle&quot; aria-label=&quot;spring boot 프로젝트의 buildgradle permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spring Boot 프로젝트의 build.gradle&lt;/h2&gt;
&lt;p&gt;Gradle에 대해 알아보았으니 이제는 SpringBoot 프로젝트의 기본 build.gradle를 간단하게 알아보고자 합니다.&lt;/p&gt;
&lt;img width=&quot;634&quot; alt=&quot;gradle-7&quot; src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/c6cbf50b-02ba-4cc4-ace3-c404d09ca28e&quot;&gt;
&lt;p&gt;&lt;strong&gt;1. plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;plugin이란 일반적으로 사용되는 task들의 묶음이며 프로젝트에 추가함으로써 task를 직접 만들지 않고도 편하게 사용할 수 있습니다.
&lt;ul&gt;
&lt;li&gt;예시로 java 플러그인 내부에는 대표적으로 compileJava, test 등의 task가 존재합니다. 링크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Springboot 프로젝트를 만들면 기본적으로 java, dependency-management 플러그인을 포함합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. sourceCompatibility&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소스코드를 컴파일할때 사용하는 자바 버전을 나타냅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. repositories&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dependencies에 있는 의존성들을 어디서 다운로드할 저장소를 지정하는 블록입니다.&lt;/li&gt;
&lt;li&gt;기본적으로 maven central repository에서 다운받습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트에서 필요한 의존성들을 작성하는 블록입니다.&lt;/li&gt;
&lt;li&gt;아래는 자주 사용되는 속성들입니다.&lt;/li&gt;
&lt;li&gt;설명에 앞서서 모듈의 의존관계가 project → module2 → module1 형태로 되어 있다고 가정해보겠습니다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;api&lt;/strong&gt; : 의존성을 가져올때는 module2가 의존하는 module1까지 가져옵니다. (module1이 필요하지 않은 경우 빌드 시간만 늘어나기 때문에 필요할 경우에만 사용해야합니다.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;implementation&lt;/strong&gt; : 의존성을 가져올때 module2만 가져옵니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;runtimeOnly&lt;/strong&gt; : 실행 시점에만 필요한 의존성을 나타냅니다. 최종 빌드되는 결과물에만 포함됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compileOnly&lt;/strong&gt; : 컴파일 시점에만 필요한 의존성을 나타냅니다. 최종 빌드되는 결과물에는 포함되지 않습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testImplementation&lt;/strong&gt; : 테스트시에만 사용되는 의존성을 나타냅니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotationProcessor&lt;/strong&gt; : 컴파일 시점에 특정 라이브러리의 어노테이션을 읽도록 설정할때 사용됩니다. 대표적으로 Lombok을 사용할때 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5. test&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test task를 실행할 때 테스트 프레임워크로 JUnit을 사용하도록 설정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;지금까지 간단하게나마 Gradle의 동작 과정과 SpringBoot 프로젝트에 생성되는 build.gradle을 정리해보았습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;잘못된 정보에 대한 피드백은 언제든 환영합니다 😁&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;h2 id=&quot;참고자료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot; aria-label=&quot;참고자료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gradle 공식문서&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomgregory.com/gradle-tutorials/&quot;&gt;https://tomgregory.com/gradle-tutorials/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomgregory.com/gradle-task-inputs-and-outputs/&quot;&gt;https://tomgregory.com/gradle-task-inputs-and-outputs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/&quot;&gt;https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94&quot;&gt;빌드란 무엇인가요?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94&quot;&gt;빌드 도구는 왜 필요한가요?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;빌드 도구의 종류&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#maven&quot;&gt;Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#gradle&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%99%9C-gradle%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94&quot;&gt;왜 Gradle을 사용할까요?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EB%B9%8C%EB%93%9C-%EC%86%8D%EB%8F%84&quot;&gt;1. 빌드 속도&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EC%9E%91%EC%84%B1--%EA%B0%80%EB%8F%85%EC%84%B1&quot;&gt;2. 작성 / 가독성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#gradle%EC%9D%B4-%EB%B9%8C%EB%93%9C%EB%A5%BC-%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95&quot;&gt;Gradle이 빌드를 하는 과정&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#task%EB%8A%94-%EB%AD%94%EA%B0%80%EC%9A%94&quot;&gt;Task는 뭔가요?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#tip&quot;&gt;TIP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#spring-boot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-buildgradle&quot;&gt;Spring Boot 프로젝트의 build.gradle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot;&gt;참고자료&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[테스트에서 Wiremock을 이용해서 외부 의존성 줄이기]]></title><description><![CDATA[지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다. 해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud…]]></description><link>https://seokho-ham.github.io/backend/spring/wiremock/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/spring/wiremock/</guid><pubDate>Sun, 21 Aug 2022 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.
저는 OAuth 로그인 기능을 맡았고 해당 기능에 대한 인수테스트를 작성하는 과정에서 “어떻게하면 외부 api에 대해 실제 상황에 가까운 테스트를 할 수 있을지”에 대해 고민하게 되었습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 사용되는 Mockito를 사용하여 테스트를 진행할 수 있었지만 이 방식은 한계가 있다고 느꼈습니다.
외부 api를 사용할때는 http 요청과 응답, 응답값에 대한 역직렬화 과정 등이 발생하는데 Mockito는 단순히 목객체를 주입받아서 메서드를 호출하는 방식으로 동작하기 때문입니다.&lt;br&gt;
그렇다고 실제 카카오 Api를 호출해서 테스트할수도 없는 노릇이었습니다. 그렇게 되면 카카오 서버의 상태에 따라 테스트의 성공 여부가 달려있게 되기 때문입니다.&lt;/p&gt;
&lt;p&gt;그래서 다른 방법을 찾던 중 WireMock이라는 라이브러리를 발견하게 되었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-wiremock이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-wiremock%EC%9D%B4%EB%9E%80&quot; aria-label=&quot; wiremock이란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 Wiremock이란?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Wiremock이란 Http 기반의 api 서비스를 모킹하는 용도로 제공되는 목 서버 라이브러리입니다.&lt;/strong&gt;&lt;br&gt;
여기서 중요한것은 목서버를 제공한다는 점인데, 지정해둔 uri로 요청이 발생할 경우 목서버로 http 요청이 발생하고 미리 지정해둔 형태의 http 응답이 반환됩니다.&lt;/p&gt;
&lt;p&gt;Wiremock을 사용하게 되면 실제 외부 api에 의존하지 않으면서 http 요청/응답을 통한 테스트가 가능해집니다.
또한 외부 서버가 아닌 로컬에 서버를 띄워 사용하기 때문에 속도도 빠릅니다.
이런 이유들로 현재 작성하는 테스트에 적용하기 적합하다고 판단되어 적용하게 되었습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-프로젝트에-적용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot; 프로젝트에 적용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 프로젝트에 적용&lt;/h2&gt;
&lt;p&gt;Wiremock은 2가지 방식으로 사용이 가능합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jar 파일을 받아서 독립적인 서버로 운영하는 방식&lt;/li&gt;
&lt;li&gt;build.gradle 의존성을 사용하여 JUnit 테스트에서만 운영하는 방식
&lt;ul&gt;
&lt;li&gt;이 방식을 사용하게 되면 JUnit이 Wiremock 서버의 생명주기를 관리합니다.
현재 프로젝트에서는 OAuth 인수테스트에서만 사용하기 때문에 2번째 방법을 사용했으며 기본 wiremock 의존성이 아닌, spring-cloud에서 제공되는 의존성을 사용했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-가장-먼저-buildgradle에-wiremock-관련-의존성을-추가했습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;1 가장 먼저 buildgradle에 wiremock 관련 의존성을 추가했습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;dependencies &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// WireMock&lt;/span&gt;
    testImplementation &lt;span class=&quot;token string&quot;&gt;&quot;org.springframework.cloud:spring-cloud-starter-contract-stub-runner&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-목-서버가-필요한-테스트-위에-autoconfigurewiremock-어노테이션을-붙여주었습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;2 목 서버가 필요한 테스트 위에 autoconfigurewiremock 어노테이션을 붙여주었습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.&lt;/h3&gt;
&lt;p&gt;(해당 어노테이션을 목서버가 필요한 테스트 클래스 위해 붙여야 Application Context가 뜰때 목서버가 빈으로 등록됩니다.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;랜덤한 포트를 사용하도록 하기 위해서 0으로 설정했습니다.
&lt;ul&gt;
&lt;li&gt;목서버의 포트는 default로 8080이 세팅되어 있으며 0으로 설정하면 랜덤한 포트를 사용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실제 feign client가 요청을 보내게 되는 uri를 목서버의 uri로 동적으로 변경하기 위해서 properties 설정을 바꾸어주었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@AutoConfigureWireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@TestPropertySource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;properties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;oauth.kakao.service.token_url=http://localhost:${wiremock.server.port}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;oauth.kakao.service.api_url=http://localhost:${wiremock.server.port}&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;OAuth 로그인 인수테스트&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthLoginAcceptanceTest&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InitAcceptanceTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-다음으로는-요청이-들어올-path와-요청에-대한-http-응답을-지정해주었습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;3 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.&lt;/h3&gt;
&lt;p&gt;기본적으로 wiremock은 src/test/resources/mappings 경로에 있는 json 파일을 읽어서 stub를 설정합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 stub이란 http 요청 path와 그에 대한 http 응답을 설정해서 제공하는것을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/resource&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;bodyPatterns&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;matchesJsonPath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$.id&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;response&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;X-Application-Context&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application:-1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 저는 목서버를 사용하는 곳에서 명시적으로 stub를 세팅해주기 위해 응답값만 json 파일로 만들어두고 OAuthMock이라는 객체를 만들어서 메서드 내에서 stub를 설정했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;응답값은 file:src/test/resources/payload 경로에 json 파일 형태로 만들었습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//token-response&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;token_type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bearer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;accessToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;expires_in&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;43199&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;refresh_token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;refreshToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;refresh_token_expires_in&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25184000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;account_email profile&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//user-response&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123456789&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;kakao_account&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;profile_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;nickname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;thumbnail_image_url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://yyy.kakao.com/.../img_110x110.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;profile_image_url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://yyy.kakao.com/dn/.../img_640x640.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;is_default_image&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;name_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;홍길동&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;email_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;is_email_valid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;is_email_verified&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sample@sample.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;age_range_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;age_range&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;20~29&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;birthday_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;birthday&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1130&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;gender_needs_agreement&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;gender&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;female&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래는 실제 stub를 세팅하는 코드입니다.&lt;br&gt;
메서드 내에서 사용한 stubfor, post 등등의 메서드는 모두 WireMock 클래스에서 제공되는 메서드들입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;aResponse&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;equalTo&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;stubFor&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token import static&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tomakehurst&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wiremock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;WireMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token static&quot;&gt;urlEqualTo&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthMocks&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUpResponses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setupMockTokenResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setupMockUserInfoResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setupMockTokenResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stubFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;urlEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/oauth/token?grant_type=authorization_code&amp;amp;client_id=1234&amp;amp;redirect_uri=redirectUri&amp;amp;code=code&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;aResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_JSON_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMockResponseBodyByPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;payload/get-token-response.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setupMockUserInfoResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stubFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;urlEqualTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/v2/user/me&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bearer accessToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;aResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_JSON_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMockResponseBodyByPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;payload/get-user-info-response.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;4-이후-실제-사용하는-테스트에서-oauthmock객체의-메서드를-사용해서-stub를-설정했습니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;4 이후 실제 사용하는 테스트에서 oauthmock객체의 메서드를 사용해서 stub를 설정했습니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DisplayName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;OAuth 로그인 인수테스트&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthLoginAcceptanceTest&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InitAcceptanceTest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@BeforeAll&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setWireMockResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;OAuthMocks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setUpResponses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 순서대로 세팅을 마치고 테스트를 실행했을때 아래와 같은 로그가 찍힙니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;목서버로 온 http 요청&lt;/li&gt;
&lt;li&gt;요청에 일치하는 stub&lt;/li&gt;
&lt;li&gt;http 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7effd444-26a5-4173-a21c-6d63ff862ae8&quot;&gt;
&lt;hr&gt;
&lt;h2 id=&quot;마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot;마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마무리&lt;/h2&gt;
&lt;p&gt;인수테스트는 사용자의 요청 흐름에 맞춰 테스트를 작성합니다.
그렇기 때문에 실제 api 호출 시의 환경에 보다 가까운 테스트를 작성할 수 있어야 한다고 생각합니다.
하지만 이때 로직에 외부 api가 껴있다면 테스트하기가 까다로워지는데 이런 어려움을 해결하기에 Wiremock은 좋은 선택이 될 수 있는것 같습니다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-wiremock%EC%9D%B4%EB%9E%80&quot;&gt;💫 Wiremock이란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9&quot;&gt;💫 프로젝트에 적용&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot;&gt;1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot;&gt;2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot;&gt;3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4&quot;&gt;4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프로젝트에 Feign Client를 적용해보자]]></title><description><![CDATA[서론 현재 진행하고 있는 식당 리뷰 sns 프로젝트에서 유저 로그인 기능의 구현을 담당하고 있다. 카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http…]]></description><link>https://seokho-ham.github.io/backend/spring/feign_client_%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%80%E1%85%B5/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/spring/feign_client_적용기/</guid><pubDate>Sat, 13 Aug 2022 01:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;현재 진행하고 있는 &lt;a href=&quot;https://github.com/jjik-muk/sikdorak&quot;&gt;식당 리뷰 sns 프로젝트&lt;/a&gt;에서 유저 로그인 기능의 구현을 담당하고 있다.&lt;/p&gt;
&lt;p&gt;카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http 요청을 보내기 위해서는 클라이언트 객체를 사용해야했고 흔히 알고 있는 &lt;strong&gt;RestTemplate&lt;/strong&gt;과 &lt;strong&gt;WebClient&lt;/strong&gt;를 후보에 두고 고민하고 있었다.
그러던 중 쿠킴의 소개로 &lt;strong&gt;Feign Client&lt;/strong&gt;의 존재를 알게 되었다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8099416e-a8ab-4a7a-9dfa-fae7a93db4ac&quot; width=&quot;400&quot;&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-feign-client란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-feign-client%EB%9E%80&quot; aria-label=&quot; feign client란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 Feign Client란?&lt;/h2&gt;
&lt;p&gt;Feign Client란 Netflix에서 개발한 Http Client다.&lt;br&gt;
(HttpClient는 Http 요청을 간편하게 만들어서 보낼 수 있도록 돕는 객체라고 생각하면 될것 같다.)&lt;br&gt;
처음에는 Netflix에서 자체적으로 개발을 진행했지만 현재는 오픈소스로 전환했으며 SpringCloud 프레임워크의 프로젝트 중 하나로 들어가있다.&lt;/p&gt;
&lt;h3 id=&quot;장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SpringMvc에서 제공되는 어노테이션을 그대로 사용할 수 있다. (Spring Cloud의 starter-openfeign을 사용할 경우)&lt;/li&gt;
&lt;li&gt;RestTemplate 보다 간편하게 사용할 수 있으며 가독성이 좋다.&lt;/li&gt;
&lt;li&gt;Feign Client를 사용한 통합 테스트가 비교적 간편하다.&lt;/li&gt;
&lt;li&gt;요청에 대한 커스텀이 간편하다.&lt;br&gt;
ex) 요청이 실패했을때 몇초 간격으로 몇번 재요청을 보낼것인지를 구체적으로 정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;동기적으로 동작한다. 즉, 하나의 요청이 끝나야 다음 동작이 가능하다.&lt;br&gt;
(이건 비동기적으로 동작해야하는 경우 단점이 될 수 있을것 같다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;우리 서비스에서는 사용자 로그인 API에서만 사용하기 때문에 비동기가 지원될 필요가 없다고 판단했고&lt;br&gt;
Feign Client를 도입해보기로 결정했다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-프로젝트에-적용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot; 프로젝트에 적용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 프로젝트에 적용&lt;/h2&gt;
&lt;p&gt;FeignClient를 사용하기 위해 먼저 build.gradle에 관련 의존성을 추가했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//프로젝트에서 사용한 버전 정보&lt;/span&gt;
spring&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;boot &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;
spring&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cloud &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2021.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;
spring&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cloud&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;openfeign &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;ext &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	springCloudVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &apos;&lt;span class=&quot;token number&quot;&gt;2021.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt;&apos;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;

dependencyManagement &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	imports &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		mavenBom &lt;span class=&quot;token string&quot;&gt;&quot;org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
dependencies &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	implementation &apos;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cloud&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;spring&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;cloud&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;starter&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;openfeign&apos;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ext&lt;/strong&gt; : gradle 내에서 사용할 변수를 설정할 수 있다. 여기서는 springCloudVersion을 변수로 관리하도록 했다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependencyManagement&lt;/strong&gt; : 사용할 의존성의 버전을 명시해두면 dependencies에서 실제 의존성을 작성할때 버전을 따로 작성하지 않아도 위에 명시된 버전으로 가져온다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;의존성을 가져온 뒤 Feign Client를 사용하여 API 호출을 담당할 클라이언트 인터페이스를 만들었다.&lt;br&gt;
만드는 방법은 간단한데 클라이언트를 인터페이스로 만들고 내부에 호출할 메서드만 작성하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//FeignClient를 사용한 코드&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;oauth-token-client&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://oauth-server.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/oauth/token&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token class-name&quot;&gt;OAuthTokenResponse&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;grant_type&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; grantType&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;client_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; clientId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;redirect_uri&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; redirectUri&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@FeignClient&lt;/strong&gt; : 앱이 런타임 시 해당 어노테이션이 붙은 인터페이스를 토대로 실제 구현체를 만든다.
&lt;ul&gt;
&lt;li&gt;name : 실제 구현체가 Application Context에 빈으로 등록될때 이름으로 사용된다.&lt;/li&gt;
&lt;li&gt;url : 요청을 보낼 엔드포인트를 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@PostMapping&lt;/strong&gt; : 해당 HttpMethod로 요청을 전송한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@RequestParam&lt;/strong&gt; : 요청 시 함께 보낼 파라미터들 설정한다.
&lt;ul&gt;
&lt;li&gt;메서드의 파라미터에 @RequestParam, @RequestHeader 등의 어노테이션을 사용하지 않으면 기본적으로 요청의 Body에 파리미터의 값들이 들어간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;코드를 작성하고나니 의문이 생겼다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;어떻게 SpringMvc의 어노테이션을 사용할 수 있는걸까?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;찾아보니 FeignClient는 빈으로 생성될 때 설정된 configuration 을 읽어서 생성되는데 configuration 내부에는&lt;br&gt;
Client 생성 시 사용할 Decoder, Encoder, Logger, Contract 등을 빈으로 등록하는 코드가 담겨있었다.&lt;/p&gt;
&lt;p&gt;이때 Client에 따로 Configuration 설정을 해주지 않으면 디폴트인 &lt;strong&gt;FeignClientsConfiguration&lt;/strong&gt; 를 사용해서 생성하는데 default로 적용된 Contract는 SpringMvcContract였고 덕분에 SpringMvc의 어노테이션을 사용할 수 있었다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/70687782-c66c-4412-80a9-e8b3126a1e45&quot; width=&quot;1000&quot;&gt;
&lt;ul&gt;
&lt;li&gt;decoder, encoder, logger도 모두 Spring이 사용하는 객체들을 사용하도록 되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/317c2534-6f7c-46b2-9d71-53731eaed5bb&quot; width=&quot;600&quot;&gt;
&lt;p&gt;이후 서비스의 로직에서는 만든 클라이언트 객체를 빈으로 주입받아 사용했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenClient&lt;/span&gt; oAuthTokenClient&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JwtToken&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenResponse&lt;/span&gt; oAuthTokenResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getOAuthAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenResponse&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getOAuthAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; oAuthTokenClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                oAuthProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getGrantType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                oAuthProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClientId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                oAuthProperties&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRedirectUri&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FeignClient는 SpringBootApplication이 실행될때 @FeignClient 어노테이션이 붙은 파일들을 읽어서 구현체를 만들기 때문에 앱 구동시 어노테이션을 읽을 수 있게 @EnableFeignClients 어노테이션을 붙여주었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@EnableFeignClients&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래는 위의 설정을 마치고 실제 OAuth 서버로 요청을 보냈을때의 요청/응답 로그다.&lt;br&gt;
해당 로그가 출력되려면 프로젝트의 로깅 레벨은 DEBUG 로, FeignClient의 로깅 레벨은 FULL로 설정되어 있어야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//application.yml&lt;/span&gt;
logging&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
  level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;project&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; debug

feign&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
  client&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    config&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        loggerLevel&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; FULL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//요청&lt;/span&gt;
---&gt; POST http&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//oauth-server/oauth/token?grant_type=authorization_code&amp;amp;client_id=1234&amp;amp;redirect_uri=redirectUri&amp;amp;code=code HTTP/1.1&lt;/span&gt;
Content-Type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; application/x-www-form-urlencoded;charset=utf&lt;span class=&quot;token number&quot;&gt;-8&lt;/span&gt;
---&gt; END HTTP (&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;-byte body)

&lt;span class=&quot;token comment&quot;&gt;// 응답&lt;/span&gt;
&amp;lt;--- HTTP/&lt;span class=&quot;token number&quot;&gt;1.1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; OK (131ms)
access-control-allow-headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Authorization&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; KA&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Origin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; X-Requested-With&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Content-Type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Accept
access-control-allow-methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; GET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; POST&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OPTIONS
access-control-allow-origin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; *
cache-control&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; no-cache&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; no-store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; max-age=&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; must-revalidate
connection&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; keep-alive
content-type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; application/json;charset=utf&lt;span class=&quot;token number&quot;&gt;-8&lt;/span&gt;
date&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Sat&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; Aug &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; GMT
expires&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
transfer-encoding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; chunked
x-content-type-options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; nosniff
x-frame-options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; DENY
x-xss-protection&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;; mode=block
response-body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;token_type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bearer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;access_token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;accessToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;expires_in&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;43199&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;refresh_token&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;refreshToken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;refresh_token_expires_in&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;25184000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;account_email profile&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&amp;lt;--- END HTTP (&lt;span class=&quot;token number&quot;&gt;190&lt;/span&gt;-byte body)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래는 추가적으로 해준 설정들이다.&lt;/p&gt;
&lt;h2 id=&quot;-커스텀한-configuration-설정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95&quot; aria-label=&quot; 커스텀한 configuration 설정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛠 커스텀한 Configuration 설정&lt;/h2&gt;
&lt;h3 id=&quot;1-공통-헤더적용을-위한-configuration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration&quot; aria-label=&quot;1 공통 헤더적용을 위한 configuration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 공통 헤더적용을 위한 Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;요청에 content-type 헤더가 기본적으로 필요해서 configuration 파일을 만들었고 Client 객체에 적용했다.&lt;/li&gt;
&lt;li&gt;요청을 가로채서 헤더를 세팅하는 requestInterceptor를 빈으로 등록하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FeignClientHeaderConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; APPLICATION_FORM_URLENCODED_UTF8_VALUE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APPLICATION_FORM_URLENCODED_VALUE &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;;charset=utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RequestInterceptor&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; requestTemplate &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; requestTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CONTENT_TYPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; APPLICATION_FORM_URLENCODED_UTF8_VALUE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-feignclient-exception을-서비스-예외로-처리하기-위한-configuration&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration&quot; aria-label=&quot;2 feignclient exception을 서비스 예외로 처리하기 위한 configuration permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Feign Client를 통한 요청이 실패했을 경우 OAuthServer에서의 예외가 발생했다는 메세지를 사용자에게 전달하고 싶었고, 커스텀한 ErrorDecoder를 빈으로 등록하는 configuration을 Client 객체에 적용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FeignClientOAuthErrorConfiguration&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ErrorDecoder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;methodKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{} 요청이 성공하지 못했습니다. requestUrl: {}, requestBody: {}, responseBody: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    methodKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FeignClientResponseUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRequestBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FeignClientResponseUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthServerException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;위의 Configuration들을 적용한 코드&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//적용&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;oauth-token-client&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;oauth-server&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; configuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FeignClientHeaderConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FeignClientOAuthErrorConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때 주의할 점으로는 configuration 파일에 &lt;strong&gt;@Configuration 어노테이션을 붙이는것을 지양&lt;/strong&gt;해야한다.
해당 어노테이션을 붙이게 되면 컴포넌트 스캔이 발생하는 시점에 빈으로 등록되어 모든 FeignClient에 적용된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 서비스에서는 모든 요청에 대해 적용할 decoder라서 어노테이션을 붙일까 고민했지만 변경사항이 발생할 수 있기에 직접 configuration을 설정해줬다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-url을-applicationproperties에서-관리-후-적용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;3 url을 applicationproperties에서 관리 후 적용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. url을 application.properties에서 관리 후 적용&lt;/h3&gt;
&lt;p&gt;url을 하드코딩 하기보다는 프로퍼티에서 관리하는것이 변경이 발생했을때 변경사항을 적용하기 편리하다.&lt;/p&gt;
&lt;p&gt;아래와 같은 방식으로 작성하면 application.properties에서 해당 프로퍼티를 읽어온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;token-client&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${oauth.kakao.service.token_url}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;OAuthTokenClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;-마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot; 마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 마무리&lt;/h2&gt;
&lt;p&gt;이번에 FeignClient를 어노테이션만으로 요청에 필요한 모든 설정을 마칠 수 있다는 점에서 이전에 RestTemplate, WebClient를 사용했을때와 비교해 너무 간편하다는 느낌을 받았다.
물론 추가적인 설정 없이는 비동기적으로 동작하지 않기에 WebClient를 대체할 수는 없지만 특별히 비동기적인 동작이 필요없다면 FeignClient를 사용하지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;또한 WireMock을 함께 사용하면 테스트도 쉽게 할 수 있는데 이 내용은 다음 글에서 이어서 작성하려고 한다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-feign-client%EB%9E%80&quot;&gt;💫 Feign Client란?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot;&gt;장점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot;&gt;단점&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9&quot;&gt;💫 프로젝트에 적용&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95&quot;&gt;🛠 커스텀한 Configuration 설정&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration&quot;&gt;1. 공통 헤더적용을 위한 Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration&quot;&gt;2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9&quot;&gt;3. url을 application.properties에서 관리 후 적용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;💫 마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[2022년 코드스쿼드 회고]]></title><description><![CDATA[백엔드 개발을 공부하기 위해 올해 1월 3일부터 코드스쿼드 백엔드 코스에 참여했고 7월 1일부로 끝이났다.
🤒코로나 이슈😷로 조금 늦은 회고를 작성해본다. 💩 코드스쿼드 이전 20년도 3월부터 8월까지 다른 부트캠프에서…]]></description><link>https://seokho-ham.github.io/review/%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C%20%ED%9A%8C%EA%B3%A0/</link><guid isPermaLink="false">https://seokho-ham.github.io/review/코드스쿼드 회고/</guid><pubDate>Sun, 10 Jul 2022 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;백엔드 개발을 공부하기 위해 올해 1월 3일부터 코드스쿼드 백엔드 코스에 참여했고 7월 1일부로 끝이났다.
🤒코로나 이슈😷로 조금 늦은 회고를 작성해본다.&lt;/p&gt;
&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/4ce1b991-1087-4e94-9049-944c30bf06fa&quot; width=&quot;600px&quot; height=&quot;800px&quot;&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-코드스쿼드-이전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C-%EC%9D%B4%EC%A0%84&quot; aria-label=&quot; 코드스쿼드 이전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💩 코드스쿼드 이전&lt;/h2&gt;
&lt;p&gt;20년도 3월부터 8월까지 다른 부트캠프에서 6개월짜리 웹 풀스택 과정을 수강했고, 이때 개발을 제대로 접해보게 되었다. 시작할때까지만 하더라도 해당 과정이 끝나면 개발자로 취업할 준비가 되겠지라는 생각을 가지고 있었다.&lt;/p&gt;
&lt;p&gt;자바스크립트를 시작으로 리액트, 노드를 배웠고 프로젝트까지 했지만 수료 후 스스로를 돌아보니 뭐 하나 제대로 알고 있는게 없었다. 또한 서버개발자를 생각하고 준비했지만, 내가 경험한 내용들은 프론트에서 사용되는 스택에 더 집중되어 있다고 생각되어서 프론트 개발자를 목표로 바꾸기로 결심하고 1년간 개인 공부를 진행했다.&lt;/p&gt;
&lt;p&gt;개인 공부를 했다고 하지만 지금 돌아보면 공부를 정말 안했다. 서버와 통신해서 데이터를 요청하고 받아오는 작업은 그나마 할만했지만, 뷰를 그리는 작업, 특히 css는 작업은 정말 재미가 없었고 학습에 대한 의지도 안생겼다. 중간중간 지금이라도 자바를 공부할까 싶었지만 너무 늦었다는 생각에 의미없이 시간만 보냈던것 같다.&lt;/p&gt;
&lt;p&gt;수료한지 1년이 되었을 시점에는 더이상 이대로는 안되겠다는 생각이 들었고, 9월부터 1달동안 고민끝에 자바와 스프링부터 다시 공부해서 백엔드 개발자가 되기로 결심했다. 1년간 확실해진건 나는 강제성과 함께 하는 사람들이 어느정도 있어야 더 집중을 잘한다는 사실이었다. 그래서 바로 교육과정을 알아보았고, 우테코와 코드스쿼드 딱 두군데를 목표로 잡고 준비했다.&lt;/p&gt;
&lt;p&gt;코드스쿼드에 지원한 가장 큰 이유는 두가지였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;교육 일정에서 기본기를 중요시하는 느낌을 받음.&lt;/li&gt;
&lt;li&gt;시험을 통해 선발하기에 열정있는 사람들이 모일것이라고 예상됨.
우테코는 1차에서 광탈했지만, 코드스쿼드는 다행히 합격할 수 있었다.
(이때는 1차, 2차 결과를 기다리며 혹시 떨어지면 어떻게 해야하나 생각하며 잠도 제대로 못잤었던것 같다.😭)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;-코드스쿼드--함께-자라기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C--%ED%95%A8%EA%BB%98-%EC%9E%90%EB%9D%BC%EA%B8%B0&quot; aria-label=&quot; 코드스쿼드  함께 자라기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤝 코드스쿼드 == 함께 자라기&lt;/h2&gt;
&lt;p&gt;코드스쿼드 과정을 한마디로 표현하면 함께 자라기 가 될 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;-지식과-경험의-공유-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%A7%80%EC%8B%9D%EA%B3%BC-%EA%B2%BD%ED%97%98%EC%9D%98-%EA%B3%B5%EC%9C%A0-&quot; aria-label=&quot; 지식과 경험의 공유  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💭 지식과 경험의 공유 📝&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;다들 질문하는걸 부끄러워하지 않고, 도와주는것을 주저하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;멤버들은 미션을 진행하면서 새롭게 알게된 내용 혹은 삽질했던 경험을 슬랙이나 디코에 공유함으로써 서로에게 도움을 준다. 미션 진행 중 막히거나 고민되는 부분은 공개된 자리에서 서로의 생각을 나누며 해결책을 찾는다. 더 놀라운건 기수에 상관없이 이미 수료한 이전기수분들도 기꺼이 도와준다. 이런 환경은 신기하게도 점점 코드스쿼드 내부의 문화로 정착되어 갔다.&lt;/p&gt;
&lt;p&gt;물론 나는 어려워했다. 내 질문은 괜히 별거 아닌거같고, 내 답변에 대한 자신감이 없었다.
사람들에게 도움만 많이 받은것 같아서 이 부분은 아쉬움이 많이 남는 부분이다.&lt;/p&gt;
&lt;h3 id=&quot;-협업-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%98%91%EC%97%85-&quot; aria-label=&quot; 협업  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🕺🏻 협업 💃🏻&lt;/h3&gt;
&lt;p&gt;나는 의도하지 않았지만 신기하게도 4번의 프로젝트 모두 페어 프로그래밍으로 진행하게 됐다. 또한, 리뷰어 운도 나쁘지 않아서 대부분 좋은 분들을 만났다. 덕분에 여러 멤버들의 코딩 스타일을 접했고, 각자가 가진 강점들을 배웠다. 또한 실시간으로 코드에 대해 의견을 나누는 경험 또한 남들보다 많이 할 수 있었다.&lt;/p&gt;
&lt;p&gt;물론 페어 프로그래밍은 계속 말을 해야하기 때문에 에너지 소모가 크고 개발 속도가 느리다. 하지만 혼자라면 놓쳤을 부분들을 놓치지 않을 수 있었고 가독성 좋은 변수명, 객체지향적인 코드인지 등에 대해 의견을 주고받으며 더 나은 코드를 작성할 수 있었다. 또한 서로가 모르는 부분들을 페어 덕분에 알게 되는 경우도 많았다.&lt;/p&gt;
&lt;p&gt;현업에서는 일을 분담해서 개인적으로 개발을 진행하는 경우가 대부분일테니 페어 프로그래밍을 할 수 있을때 최대한 많이 경험할 수 있어서 감사하다. 4번의 프로젝트동안 함께해준 데이브, 얀, 나단, 산토리에게 무한 감사를 🙇🏻‍♂️&lt;/p&gt;
&lt;p&gt;코드스쿼드의 경험 덕분에 내가 꿈꾸는 개발자의 모습에 한가지가 더 추가됐다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;같이 일하고 싶은 사람. 긍정적인 영향을 주는 사람.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;물론 현재는 많이 부족하지만, 내년에는 원하는 모습에 더 가까워진 사람이 됐으면 한다. 💪🏻&lt;/p&gt;
&lt;h2 id=&quot;-그래서-현재의-나는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EA%B7%B8%EB%9E%98%EC%84%9C-%ED%98%84%EC%9E%AC%EC%9D%98-%EB%82%98%EB%8A%94&quot; aria-label=&quot; 그래서 현재의 나는 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤔 그래서 현재의 나는?&lt;/h2&gt;
&lt;h3 id=&quot;-내가-무엇을-해야하는지-안다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%82%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EC%A7%80-%EC%95%88%EB%8B%A4&quot; aria-label=&quot; 내가 무엇을 해야하는지 안다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛣 내가 무엇을 해야하는지 안다.&lt;/h3&gt;
&lt;p&gt;이전에는 시간에 쫓기며 누군가가 개척해놓은 개발자가 되는 지름길을 찾아서 쫓아 가려고 했다.
그리고 내가 현재 학습하는 길이 혹시나 돌아가는 길이면 어쩌지라는 생각에 주변에 물어보며 내가 제대로 가고 있는지에 대해 확신을 구하려고 했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;이제는 내가 가는 길에 확신이 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;취업에 대한 근자감이 있는건 아니다.
하지만 절대 지름길은 없다는걸 깨달았다. 그리고 지금 내가 어떤것이 부족한지, 어떻게 채워나가야할지를 안다. 더 나아가 꾸준히 채워나간다면 좋은 결과가 뒤따라올것이라는 사실까지!&lt;/p&gt;
&lt;h3 id=&quot;-내-생각을-말하는게-조금-더-편해졌다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%82%B4-%EC%83%9D%EA%B0%81%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%ED%8E%B8%ED%95%B4%EC%A1%8C%EB%8B%A4&quot; aria-label=&quot; 내 생각을 말하는게 조금 더 편해졌다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🗣 내 생각을 말하는게 조금 더 편해졌다.&lt;/h3&gt;
&lt;p&gt;나는 원래 내 의견을 말하는걸 잘 못한다. 주변 사람들 눈치를 많이 보는 성격이기도 하고, 틀린 의견을 내는것을 두려워하는 성격이다. 하지만 6개월동안 좋은 환경에 있다보니 조금의 뻔뻔함(?)이 생겼다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;틀리면 고치면 되지&lt;/strong&gt; 라는 마인드가 탑재됐다.
경험상 내가 틀렸던 내용들은 쉽게 기억에서 잊혀지지 않는다. 또한 개발자라는 직업을 가진 사람들은 이런걸로 문제삼지 않는다. 오히려 제대로 모르는 내용을 가지고 조용히 있는게 훗날 더 큰 문제를 만든다.
(물론 말도 안되는 헛소리라면 얘기가 달라지겠지만;;)&lt;/p&gt;
&lt;h2 id=&quot;-마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot; 마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔚 마무리&lt;/h2&gt;
&lt;p&gt;6개월이 지난 지금 “개발자로 취업할 준비가 됐냐” 라고 묻는다면 “아직?”이라고 답할것이다.
하지만 분명 발전이 있었고 얻은것들 또한 명확하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 개발자가 되고 싶은지가 명확해졌다.&lt;/li&gt;
&lt;li&gt;좋은 개발자가 되기 위해 필요한 기초체력을 키웠다.&lt;/li&gt;
&lt;li&gt;함께할 좋은 동료들이 생겼다.
남은 하반기동안은 그동안 배운것들을 잘 갈고 닦아서 스스로를 당당하게 개발자라고 소개할 수 있었으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/0d596eeb-a008-4bf9-ab17-8128a7029e3d&quot; width=&quot;6000px&quot;&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src=&quot;https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/b727c275-3ec5-48d1-a30f-9002b69c83bd&quot; width=&quot;3400px&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C-%EC%9D%B4%EC%A0%84&quot;&gt;💩 코드스쿼드 이전&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C--%ED%95%A8%EA%BB%98-%EC%9E%90%EB%9D%BC%EA%B8%B0&quot;&gt;🤝 코드스쿼드 == 함께 자라기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EC%A7%80%EC%8B%9D%EA%B3%BC-%EA%B2%BD%ED%97%98%EC%9D%98-%EA%B3%B5%EC%9C%A0-&quot;&gt;💭 지식과 경험의 공유 📝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-%ED%98%91%EC%97%85-&quot;&gt;🕺🏻 협업 💃🏻&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EA%B7%B8%EB%9E%98%EC%84%9C-%ED%98%84%EC%9E%AC%EC%9D%98-%EB%82%98%EB%8A%94&quot;&gt;🤔 그래서 현재의 나는?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#-%EB%82%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EC%A7%80-%EC%95%88%EB%8B%A4&quot;&gt;🛣 내가 무엇을 해야하는지 안다.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#-%EB%82%B4-%EC%83%9D%EA%B0%81%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%ED%8E%B8%ED%95%B4%EC%A1%8C%EB%8B%A4&quot;&gt;🗣 내 생각을 말하는게 조금 더 편해졌다.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;🔚 마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[OSIV란?]]></title><description><![CDATA[서론 이번 글은 IssueTracker 프로젝트를 진행하면서 겪었던 영속성 컨텍스트와 관련된 문제를 맞닥트리면서 알게 된 OSIV라는 개념을 정리해보기 위해 작성하게 되었다. 고민 : 미션을 진행하며 대부분의 api…]]></description><link>https://seokho-ham.github.io/backend/spring/osvi/</link><guid isPermaLink="false">https://seokho-ham.github.io/backend/spring/osvi/</guid><pubDate>Thu, 23 Jun 2022 01:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;서론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot; aria-label=&quot;서론 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서론&lt;/h2&gt;
&lt;p&gt;이번 글은 IssueTracker 프로젝트를 진행하면서 겪었던 영속성 컨텍스트와 관련된 문제를 맞닥트리면서 알게 된 OSIV라는 개념을 정리해보기 위해 작성하게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;고민&lt;/strong&gt; : 미션을 진행하며 대부분의 api에서 유저의 정보가 필요할것이라고 판단했고, 매번 유저를 조회하는 코드의 중복을 제거하고 싶었다.&lt;br&gt;
&lt;strong&gt;해결책&lt;/strong&gt; : jwt 토큰을 통해 받은 유저의 id를 사용해 인터셉터에서 미리 유저 객체를 조회한 뒤, ArgumentResolver 를 사용해서 해당 유저 객체를 컨트롤러에서 파라미터로 받아서 사용하기로 했다.&lt;/p&gt;
&lt;p&gt;하지만 예상하지 못한 문제가 발생했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;인터셉터에서 조회해서 컨트롤러에서 넘겨받은 유저 객체는 영속성 컨텍스트에서 관리해주지 않았다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;원인은 &lt;strong&gt;영속성 컨텍스트가 생성되는 시점이 우리가 등록한 인터셉터가 실행된 이후였기 때문이다&lt;/strong&gt;. 함께 원인을 찾던 중 영속성 컨텍스트의 생명주기에 대해 서로 다르게 알고 있었는데 토리는 “트랜잭션 단위”, 나는 “요청 단위”로 알고 있었다. (학습해본 결과 둘다 맞는 이야기다.)
해당 개념을 확실하게 알아두기 위해 조금 더 파보았다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-스프링에서의-영속성-컨텍스트-생명-주기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot; 스프링에서의 영속성 컨텍스트 생명 주기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🚴🏻 스프링에서의 영속성 컨텍스트 생명 주기&lt;/h2&gt;
&lt;p&gt;컨테이너에서 관리하는 EntityManager를 사용하는 경우 영속성 컨텍스트의 생명주기는 컨테이너에 의해 관리되는데, 스프링 컨테이너는 기본적으로 트랜잭션 단위로 영속성 컨텍스트를 관리한다.
즉, 하나의 트랜잭션이 시작할때 영속성 컨텍스트가 생성되고 트랜잭션이 종료될 때 영속성 컨텍스트도 함께 종료되며 보통은 서비스 레이어에서 트랜잭션의 시작과 종료가 이루어지게 된다.
이 말은 곧 서비스 레이어에서만 영속성 컨텍스트에 접근할 수 있다는 의미이다. 여기서 한가지 질문이 생긴다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;영속성 컨텍스트가 종료된 이후에 뷰 레이어에서 사용하던 지연로딩은 어떻게 가능한걸까?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;말로만 설명하면 이해가 안될것 같아서 간단한 예시 코드를 작성해봤다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Issue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@OneToMany&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mappedBy&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;issue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; comments &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CommentDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; comments &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Issue&lt;/span&gt; issue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;comments &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;convertCommentsToCommentsDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;issue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getComments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CommentDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;convertCommentsToCommentsDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; comments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; comments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CommentDto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;//Service&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Issue&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findIssue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Issue&lt;/span&gt; issue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; issueRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; issue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Controller&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/issue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueDto&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getIssue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IssueDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;issueService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIssue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;동작과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;동작과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&amp;#x3C;동작과정&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 이슈를 조회한다.&lt;/li&gt;
&lt;li&gt;서비스에서 Issue 엔티티 객체를 찾아온다.&lt;/li&gt;
&lt;li&gt;조회한 Issue 엔티티 객체를 Controller에서 IssueDto 형태로 변환해서 리턴한다.&lt;/li&gt;
&lt;li&gt;IssueDto 내부에서 변환하는 과정에서 comments 리스트에 접근하는데 이때 지연로딩이 발생한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;분명 영속성 컨텍스트가 트랜잭션 단위로 관리된다면, 영속성 컨텍스트는 종료된 상태일텐데 어떻게 지연로딩이 발생할까?
그건 바로 OSIV 때문이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;-osiv란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-osiv%EB%9E%80&quot; aria-label=&quot; osiv란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 OSIV란?&lt;/h2&gt;
&lt;p&gt;Open-Session-In-View의 약자인데, 한마디로 뷰 레이어에서도 세션을 열어두겠다는 의미다.
(JPA에서는 EntityManager, JPA의 구현체인 Hibernate에서는 Session이라고 부른다.)&lt;/p&gt;
&lt;p&gt;OSIV를 사용할 경우 사용자의 요청이 발생하면 영속성 컨텍스트가 생성되고 요청이 종료될때 컨텍스트도 종료된다.
즉, 생명주기가 트랜잭션 단위 -&gt; 요청 단위 로 변경되는 것이다.&lt;/p&gt;
&lt;p&gt;스프링 부트에서는 기본적으로 OSIV 설정을 true로 설정해준다. 이 개념을 모른다면 나처럼 영속성 컨텍스트는 원래 요청단위로 생성되는것이라고 알고 있을 수 밖에 없다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;설정을 바꾸려면 application-properties에서 false로 변경해주면 된다.&lt;br&gt;
false로 설정하면 트랜잭션 단위로 관리된다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//application-properties&lt;/span&gt;

spring&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jpa&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;in&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;view&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;-osiv의-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-osiv%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot; osiv의 장단점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💫 OSIV의 장/단점&lt;/h2&gt;
&lt;p&gt;장점으로는 앞서 보았던 뷰 레이어에서도 지연로딩을 사용할 수 있게 된다는 장점이 생긴다.&lt;/p&gt;
&lt;p&gt;하지만 동시에 단점도 존재하는데 영속성 컨텍스트가 존재한다는 것은 하나의 DB 커넥션을 사용한다는 것이다. 사용자의 요청을 처리하는 스레드의 개수에 비해 DB 커넥션의 개수는 적다. 즉, 트래픽이 많은 서비스 같은 경우 하나의 요청에서 커넥션을 너무 오래 잡고 있어서 서비스 장애로 이어질 수 있다. (특히 해당 요청 내에서 I/O작업과 같이 시간이 소요되는 작업이 발생할 경우, 그만큼 커넥션을 오래 잡고 있게 된다.)
또한 하나의 요청에서 2개 이상의 트랜잭션이 발생했을 경우, 동일한 영속성 컨텍스트를 공유하기 때문에 기존에 영속상태에 있던 엔티티를 의도치 않게 변경할 수 있다는 위험성도 존재한다.&lt;/p&gt;
&lt;h2 id=&quot;-마무리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot; aria-label=&quot; 마무리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤔 마무리&lt;/h2&gt;
&lt;p&gt;이번 기회를 통해 OSIV에 대해 알게 되었다.
OSIV를 사용하는것에 대해 좋고 나쁘고는 없는것 같다. OSIV를 켜두면 편하게 어디서든 지연로딩을 통해 접근할 수 있지만, 성능이슈가 발생할 수 있으며 안정성에도 문제가 생길 수 있다. 반대로 꺼두면 성능적인 안전성은 가져갈 수 있지만, 뷰 레이어에서 지연로딩이 지원되지 않기 때문에 fetch join을 통해 엔티티를 조회할 때 미리 데이터를 가져와야한다.
결국 각 서비스의 특성에 맞춰서 사용하면 될 것 같다.&lt;/p&gt;
&lt;div class=&quot;table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%84%9C%EB%A1%A0&quot;&gt;서론&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0&quot;&gt;🚴🏻 스프링에서의 영속성 컨텍스트 생명 주기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95&quot;&gt;&amp;#x3C;동작과정&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-osiv%EB%9E%80&quot;&gt;💫 OSIV란?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-osiv%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot;&gt;💫 OSIV의 장/단점&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#-%EB%A7%88%EB%AC%B4%EB%A6%AC&quot;&gt;🤔 마무리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>
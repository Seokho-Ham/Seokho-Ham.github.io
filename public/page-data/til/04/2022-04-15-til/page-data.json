{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/til/04/2022-04-15-til/",
    "result": {"data":{"cur":{"id":"192ef1f9-4923-5547-9d6d-d7201efd8c1d","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>11:00 ~ 14:00 마지막 pr 제출<br>\n15:00 ~ 16:00 발표 준비 겸 리드미 작성<br>\n16:00 ~ 17:00 그룹 데모 발표<br>\n17:00 ~ 18:10 마스터 클래스<br>\n18:10 ~ 18:30 그룹 주간 회고<br>\n23:30 ~ 00:30 알고리즘 문제 풀이 - BOJ2805 나무자르기<br>\n00:30 ~ 01:00 일일 회고 작성</p>\n</blockquote>\n<h2 id=\"-학습-회고\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%ED%9A%8C%EA%B3%A0\" aria-label=\" 학습 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 <strong>학습 회고</strong></h2>\n<h3 id=\"-todolist-프로젝트\" style=\"position:relative;\"><a href=\"#-todolist-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" todolist 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 todolist 프로젝트</strong></h3>\n<p>오늘은 데이브와 오전에 만나서 어제 리뷰를 반영한 코드를 깃헙에 올리고 pr을 보내는 작업을 했고, 오후에는 그룹별 데모 발표가 진행됐다.\n백엔드 그룹 리뷰때와 같이 설명할 생각을 가지고 참여했는데 내 앞의 2조는 준비가 아주 잘되어 있었서 살짝 당황했지만, 우리 조가 고민했던 내용들을 이야기하려던 처음의 목표 그대로 잘(?) 마무리했다.. (준의 ppt까지 준비하는 준비성..👍)</p>\n<br>\n<p>2주간의 프로젝트가 정신없이 지나갔다.<br>\n협업하는 ios 팀원들과의 합이 잘 맞았고, 직접 설계부터 구현까지 해보는 경험을 해볼 수 있었다. 시그리드의 정성이 담긴 리뷰 덕분에 코드를 개선하고 개념을 알아가는 과정이 즐거웠고 무엇보다 데이브와 코드 작성과 pr 메세지 작성, 시그리드에게 남길 질문까지 함께 진행해서 좋았다. 데이브 만세 🙌 (다음 프로젝트도 화이팅)</p>\n<br>\n<p>시그리드의 오늘 리뷰 중 인상 깊은 말이 있었다.</p>\n<blockquote>\n<p><strong>우리의 목표는 코드를 어디다가 납품해야 하는 공장 직원들이 아니라, 학습의 과정 속에서 진지하게 토론해보고 고민하는 치열한 순간 속에 있다는 것을 잊지 마시기 바랍니다</strong></p>\n</blockquote>\n<p>이 말을 코드스쿼드가 끝날때까지 잊지 말아야겠다. 단순히 완성하는데만 집중하는게 아닌, 더 좋은 코드에 대해 고민하고 나만의 코드를 작성하는 기준을 만들어가는 기간이 될 수 있도록 노력하자.</p>\n<h2 id=\"️-개선점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\"️ 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>💁🏻‍♂️ 개선점</strong></h2>\n<ul>\n<li>늦잠을 자버렸다. 알람을 잘 듣자..ㅎ</li>\n</ul>","excerpt":"🛎 하루 일과 11:00 ~ 14:00 마지막 pr 제출 15:00 ~ 16:00 발표 준비 겸 리드미 작성 16:00 ~ 17:00 그룹 데모 발표 17:00 ~ 18:10 마스터 클래스 18:10 ~ 18:30 그룹 주간 회고 23:30 ~ 00:30 알고리즘 문제 풀이 - BOJ2805 나무자르기 00:30 ~ 01:00 일일 회고 작성 👨‍💻 학습 회고 🤝 todolist 프로젝트 오늘은 데이브와 오전에 만나서 어제 리뷰를 반영한 코드를 깃헙에 올리고 pr을 보내는 작업을 했고, 오후에는 그룹별 데모 발표가 진행됐다.\n백엔드 그룹 리뷰때와 같이 설명할 생각을 가지고 참여했는데 내 앞의 2조는 준비가 아주 잘되어 있었서 살짝 당황했지만, 우리 조가 고민했던 내용들을 이야기하려던 처음의 목표 그대로 잘(?) 마무리했다.. (준의 ppt까지 준비하는 준비성..👍) 2주간의 프로젝트가 정신없이 지나갔다. 협업하는 ios 팀원들과의 합이 잘 맞았고, 직접 설계부터 구현까지 해보는 경험을…","frontmatter":{"date":"April 15, 2022","title":"TIL-220415","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/04/2022-04-15-til/"}},"next":{"id":"864c6d8a-2907-53f8-8ecd-153607b2006c","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:30 데일리 스크럼<br>\n12:00 ~ 17:00 todolist 프로젝트<br>\n21:00 ~ 22:30 코드 리뷰 정리<br>\n22:45 ~ 01:30 todolist 프로젝트</p>\n</blockquote>\n<h2 id=\"-학습-회고\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%ED%9A%8C%EA%B3%A0\" aria-label=\" 학습 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 <strong>학습 회고</strong></h2>\n<h3 id=\"-todolist-프로젝트\" style=\"position:relative;\"><a href=\"#-todolist-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" todolist 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 todolist 프로젝트</strong></h3>\n<ul>\n<li><a href=\"https://github.com/codesquad-members-2022/todo-list/pull/152\">3차 코드 리뷰</a></li>\n</ul>\n<h3 id=\"️-리뷰-반영\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%A6%AC%EB%B7%B0-%EB%B0%98%EC%98%81\" aria-label=\"️ 리뷰 반영 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>⭕️ 리뷰 반영</strong></h3>\n<hr>\n<p><strong>1. cardController의 add 메서드 return 값이 애매하다는 리뷰.</strong></p>\n<ul>\n<li>질문의 요지를 제대로 파악한건지는 모르겠지만, controller의 add 메서드에서 event처리 로직까지 들어있어서 그런것 같음.</li>\n<li>EventService를 CardService 내부로 이동.</li>\n</ul>\n<p><strong>2. responsCardDto에게 section 값을 비교하는 책임을 위임하기 &#x26; if-else 제거하기</strong></p>\n<ul>\n<li>후의 도움으로 if문 내부에서 값을 리턴하는 방식을 사용해 else 제거. -> return 문이 중복된다는 단점이 있지만 특별한 해결책을 찾지 못했음</li>\n<li>Card 도메인 객체에게 section의 변경 여부를 확인하는 책임 위임.</li>\n</ul>\n<p><strong>3. put, delete 메서드에 최소한 요청 성공 여부를 알려주는 반환값 정도는 주도록 개선하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span>\n  code <span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n  message <span class=\"token operator\">:</span> <span class=\"token string\">\"성공\"</span>\n  content <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Response<T> 형태의 Dto를 만들고 내부에 content 필드의 타입을 제네릭으로 설정하는 방식으로 변경하면 좋겠다고 생각.</li>\n<li>모든 응답을 위의 형식으로 보내주는게 맞을것같다고 전부터 생각했지만 미루다보니 프로젝트가 끝나는 날이 와서 적용은 안했음.</li>\n</ul>\n<p><strong>4. Action enum 내부에서 Event가 스스로 dto의값들을 사용하도록 개선하기</strong></p>\n<ul>\n<li>Event에게 dto에서 값을 꺼내서 넘겨줬는데 객체 스스로 결정해서 사용하도록 자율성을 보장해야한다. 그래서 dto를 넘겨주는 형식으로 변경</li>\n</ul>\n<p><strong>5. ResponseCardsDto에서 Map의 키값을 enum 타입을 넣어서 표현하도록 개선하기</strong></p>\n<ul>\n<li>Section Enum 클래스를 작성하고 카드를 분류하는 로직을 Enum 클래스 내부로 옮김</li>\n</ul>\n<h3 id=\"-앞으로-변경할-내용과-학습할-키워드\" style=\"position:relative;\"><a href=\"#-%EC%95%9E%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%A0-%EB%82%B4%EC%9A%A9%EA%B3%BC-%ED%95%99%EC%8A%B5%ED%95%A0-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 앞으로 변경할 내용과 학습할 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚫 앞으로 변경할 내용과 학습할 키워드</strong></h3>\n<hr>\n<ul>\n<li>eventJdbcRepository의 rowMapper에서 컬럼명을 동적으로 관리할 방법 찾아보기</li>\n<li><code class=\"language-text\">findAny()</code>는 id가 unique하지 않을 경우 동일성이 보장이 안되는데 이 부분을 개선 해보기</li>\n<li>Custom한 Exception 만들어보기</li>\n<li>action이 이루어진 목록을 인터셉터로 구현해보기</li>\n<li><code class=\"language-text\">genarateKey</code>란?</li>\n<li>mysql에서 enum 타입을 사용하는것에 대한 의견 남기기 - <a href=\"http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/\">mysql에서 enum 타입을 사용하면 안되는 8가지 이유</a></li>\n<li><code class=\"language-text\">executeAndReturnKey()</code>가 멀티스레드에서 사용해도 안전한 이유 알아보기</li>\n</ul>\n<p>코드리뷰를 받게 되면 많은 키워드가 쏟아진다. 동시에 내가 습관적으로 작성하던 코드, 좋다니까 사용해보는 코드들에 대해 다시한번 생각해볼 수 있는 기회가 된다.</p>\n<br>\n<p>이동욱님의 책에서 Entity객체는 DB와 직접적으로 연결되어 있는 객체이기 때문에 있는 반환용 Dto 객체를 만들어 반환해야한다는 내용을 보았고 바로 프로젝트에 적용했다. 하지만 적용하면서 들게 된 생각은 <strong>“현재는 데이터의 개수가 적지만, 만약 데이터가 엄청 많다면 변환하는데 드는 오버헤드가 너무 크지 않을까”</strong> 였다.</p>\n<br>\n<p>해당 내용을 pr의 질문으로 남겼고 받은 리뷰에서 **<em>당연히 오버헤드가 발생하기 때문에 현재 애플리케이션에서 반드시 Dto 객체로 변환해야하는 이유가 있는지 고민해보고, 변환해야하는 이유가 있다면 근거를 가지고 설득할 수 있어야 한다</em>**는 피드백을 받았다.<br>\n이런 피드백 덕분에 “대다수가 좋다고 하니까, 실력이 뛰어난 개발자분이 맞는 방식이라고 하니까” 무작정 적용했던 내 자신을 반성하게 된다.</p>\n<h3 id=\"entity-객체를-그대로-반환하면-안되는-이유\" style=\"position:relative;\"><a href=\"#entity-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EB%B0%98%ED%99%98%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"entity 객체를 그대로 반환하면 안되는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Entity 객체를 그대로 반환하면 안되는 이유</strong></h3>\n<ul>\n<li>사용자에게 Entity 객체를 반환하게 되면 Entity 객체의 모든 필드, 즉 DB의 컬럼들이 그대로 사용자에게 공개된다.</li>\n<li>사용자에게 반환하는 데이터는 중간에 변환하는 과정이 필요할 수 있는데 이것이 가능하려면 setter가 필요하다. Entity에 setter를 구현해두면 비즈니스 로직과 전혀 상관 없는 controller와 같은 곳에서 실수로 값의 변경이 발생할 수 있다.</li>\n<li>사용자에게 필요도 없는 데이터까지 전부 보내는것은 자원의 낭비다.</li>\n</ul>\n<h2 id=\"️-개선점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\"️ 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>💁🏻‍♂️ 개선점</strong></h2>\n<ul>\n<li>오늘은 만족! 💯</li>\n</ul>","frontmatter":{"date":"April 14, 2022","title":"TIL-220414","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/04/2022-04-14-til/"}},"prev":{"id":"8598ebf8-40d9-51b8-930d-59242f548eef","html":"<blockquote>\n<p><strong>주제 : Todolist</strong><br>\n<strong>기간 : 04.04 ~ 04.15 (2주)</strong><br>\n<strong>멤버 : IOS - 데일, 샐리 / BE - 데이브, 포키</strong><br>\n<strong>저장소 : <a href=\"https://github.com/sally4405/todo-list/tree/team-08/be\">Github 레포</a></strong></p>\n</blockquote>\n<br>\n<p>코드스쿼드에서 진행한 첫번째 그룹 프로젝트는 todolist였다.</p>\n<h2 id=\"작업-내용\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%97%85-%EB%82%B4%EC%9A%A9\" aria-label=\"작업 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작업 내용</h2>\n<hr>\n<ul>\n<li>Swagger를 사용한 api 문서화</li>\n<li>DB 설계</li>\n<li>카드에 조회, 등록, 수정, 삭제 기능 구현</li>\n<li>카드에 대한 작업이 발생할때, 작업에 대한 이벤트를 DB에 등록하는 기능 구현</li>\n<li>aws ec2 서버에 배포</li>\n</ul>\n<h2 id=\"문제-및-고민\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EB%B0%8F-%EA%B3%A0%EB%AF%BC\" aria-label=\"문제 및 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 및 고민</h2>\n<hr>\n<h3 id=\"1-controller에서-요청에-body로-넘어온-값을-code-classlanguage-textrequestbodycode를-사용해-dto객체로-매핑하는-과정에서-기본-생성자가-없으면-매핑이-되지-않았다\" style=\"position:relative;\"><a href=\"#1-controller%EC%97%90%EC%84%9C-%EC%9A%94%EC%B2%AD%EC%97%90-body%EB%A1%9C-%EB%84%98%EC%96%B4%EC%98%A8-%EA%B0%92%EC%9D%84-code-classlanguage-textrequestbodycode%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-dto%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95%EC%97%90%EC%84%9C-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%EC%97%86%EC%9C%BC%EB%A9%B4-%EB%A7%A4%ED%95%91%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EC%95%98%EB%8B%A4\" aria-label=\"1 controller에서 요청에 body로 넘어온 값을 code classlanguage textrequestbodycode를 사용해 dto객체로 매핑하는 과정에서 기본 생성자가 없으면 매핑이 되지 않았다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Controller에서 요청에 body로 넘어온 값을 <code class=\"language-text\">@RequestBody</code>를 사용해 Dto객체로 매핑하는 과정에서 기본 생성자가 없으면 매핑이 되지 않았다.</h3>\n<p>문제를 해결하기 위해 검색을 하던 중 ObjectMapper가 <strong>기본 생성자를 통해 객체를 생성</strong>하고 <strong>getter 혹은 setter를 사용해 프로퍼티명들을 읽어와서 객체에 값을 설정</strong>해준다는 사실을 알게 되었다.<br>\n하지만 이전에 했던 프로젝트에서는 Dto에 기본 생성자 대신 파라미터를 갖는 생성자가 있으면 문제 없이 생성이 됐었기에 다른 원인이 있다고 생각되었고 리뷰어와 이 문제에 대해 이야기를 나누었다.</p>\n<p>이 과정을 통해 <code class=\"language-text\">@RequestBody</code>가 어떤식으로 동작하는지에 대해 조금이나마 파볼 수 있었다.</p>\n<blockquote>\n<ol>\n<li><code class=\"language-text\">@RequestBody</code>를 처리하는 <code class=\"language-text\">RequestResponseBodyMethodProcessor</code>에서 <code class=\"language-text\">readWithMessageConverters()</code> 메서드를 호출한다.</li>\n<li>등록되어 있는 컨버터들을 순회하면서 body의 content-type을 처리할 수 있는 컨버터를 찾아낸다.</li>\n<li>json타입의 경우 <code class=\"language-text\">MappingJackson2HttpMessageConverter</code>가 처리해준다.</li>\n<li>내부에서는 Jackson 라이브러리에서 제공하는 <code class=\"language-text\">ObjectMapper</code>를 사용해서 객체에 매핑해준다.\n<ul>\n<li>이때 내부에 기본 생성자가 있으면 기본 생성자를 사용해 매핑할 객체를 생성한다.</li>\n<li><code class=\"language-text\">@JsonProperty</code>, <code class=\"language-text\">@JsonAutoDetect</code> 등 Property 관련 어노테이션들이 적용된 Property 기반 클래스면 Property를 기반으로 객체를 생성한다.</li>\n<li>다른 생성자가 존재하면 해당 생성자를 사용해서 객체를 생성한다.</li>\n<li>getter, setter를 통해 프로퍼티 명을 읽어온 뒤, 겂을 할당한다.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>동작 원리에 대해서는 알게 되었지만, 문제 자체는 해결되지 않았고 리뷰어와 데이브의 로컬에서는 정상적으로 기본생성자 없이도 동작한다는것을 알게되어서 로컬의 프로젝트를 날리고 다시 클론 받아왔다.</p>\n<h3 id=\"2-사용자에게-응답값으로-dto대신-도메인-객체를-넘겨도-되는가\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%9A%A9%EC%9E%90%EC%97%90%EA%B2%8C-%EC%9D%91%EB%8B%B5%EA%B0%92%EC%9C%BC%EB%A1%9C-dto%EB%8C%80%EC%8B%A0-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%84%98%EA%B2%A8%EB%8F%84-%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"2 사용자에게 응답값으로 dto대신 도메인 객체를 넘겨도 되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사용자에게 응답값으로 Dto대신 도메인 객체를 넘겨도 되는가?</h3>\n<p>처음에는 카드를 조회하는 api에서 카드 도메인 객체를 List에 담아서 그대로 클라이언트에게 응답값으로 전달하도록 했다.\n하지만 학습을 하던 중 도메인 객체 대신 Dto 객체를 반환하는것이 좋다는 글을 보게 되었고 이유는 아래와 같았다.</p>\n<blockquote>\n<ul>\n<li>Dto 객체는 기본적으로 변경이 자주 발생하는대 Dto 대신 도메인 객체를 사용하면 <strong>Api가 변경될때마다 도메인 객체가 직접적으로 영향을 받게된다</strong>.</li>\n<li>클라이언트에게 필요없는 정보까지 전달하게 된다. 즉, <strong>자원의 낭비가 발생한다</strong>.</li>\n<li>추가적으로 필요한 값을 세팅해서 전달하려면 <code class=\"language-text\">setter</code> 메서드를 작성해야하고, 계층간 전달되는 과정에서 개발자의 실수로 의도하지 않은 변경이 발생할 수 있다.</li>\n<li>사용자에게 DB의 테이블 구조가 그대로 드러난다.</li>\n</ul>\n</blockquote>\n<p>그래서 모든 도메인 객체들을 Dto 객체로 변환해서 반환하도록 코드를 수정했는데 이 과정에서 추가적인 고민이 생겼다.<br>\n<strong>“카드 데이터의 수가 무수히 많다면, 모두 Dto로 변환하는 과정에서 생기는 오버헤드를 감수해야할까?”</strong></p>\n<p>리뷰어에게 해당 내용을 질문했고, 아래와 같은 답변을 받았다.</p>\n<blockquote>\n<p><strong>도메인 객체를 새로운 DTO 데이터 클래스로 매핑하는 과정은 당연히 오버헤드가 있을 것입니다. 우리 프로젝트에서야 규모가 작으니까 체감이 안 되겠지만요. 그렇다면 고민해야 할 지점은 성능을 어느 정도 포기하고서라도 DTO 객체를 만들어야 하는 이유를 충분히 공감하고 설득할 수 있어야 한다는 것입니다.</strong></p>\n</blockquote>\n<p>이 과정을 통해 <strong>다른 사람들이 좋다고 말하는 것들을 그냥 적용하는게 아닌, 현재의 프로젝트와 상황을 고려하여 타당한 근거를 생각해봐야한다는 것</strong>을 다시한번 느꼈다.</p>\n<br>\n<blockquote>\n<p><strong><a href=\"https://kale02.notion.site/1fbca5416db045718808aa645f0e164e\">리뷰 정리 목록</a></strong></p>\n</blockquote>\n<h2 id=\"느낀점\" style=\"position:relative;\"><a href=\"#%EB%8A%90%EB%82%80%EC%A0%90\" aria-label=\"느낀점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>느낀점</h2>\n<hr>\n<p>처음에는 걱정이 많았지만 좋은 ios 멤버들과, 페어를 만났고 좋은 리뷰어까지 배정되어서 즐겁게 진행했다. 코드 리뷰를 통해 앞으로 학습할 키워드들을 알게 되었고, 얕게 알고 있던 지식들에 깊이를 더할 수 있었던 시간이었다.\n특히 좋았던 점은 <strong>단순히 구현을 완료하는것에 목적을 두는게 아닌, 부족한 부분들을 발견하고 채워나가는 시간으로 보낼 수 있었던 점인것 같다.</strong> 앞으로 남은 프로젝트들도 많은 학습을 할 수 있는 시간들로 보낼 수 있으면 좋겠다.</p>","frontmatter":{"date":"May 08, 2022","title":"[1차 프로젝트] todolist 회고","categories":"프로젝트","author":"포키","emoji":"🤝"},"fields":{"slug":"/project/todolist-project/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/seokho-ham.github.io"}}}}},"pageContext":{"slug":"/til/04/2022-04-15-til/","nextSlug":"/til/04/2022-04-14-til/","prevSlug":"/project/todolist-project/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
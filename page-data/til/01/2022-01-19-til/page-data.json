{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/til/01/2022-01-19-til/",
    "result": {"data":{"cur":{"id":"f27cd979-f918-5753-af29-9548b49f1d4b","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h4 id=\"이진-탐색-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"이진 탐색 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 탐색 알고리즘</h4>\n<p><a href=\"http://www.yes24.com/Product/Goods/91433923\"><strong>이것이 코딩테스트다</strong></a> 라는 책으로(일명 동빈북) 현재 알고리즘 스터디를 진행중이다. 혼자서 하면 매일 미루는걸 알아서 스터디를 참여하면 강제로라도 하겠지라는 마음으로 참여했는데 덕분에 매주 하나의 주제를 학습해 나가고 있다.</p>\n<p>이진탐색 알고리즘은 <strong>많은 양의 데이터를 탐색해서 특정 값을 찾아낼때 사용되는 탐색방법</strong>이다. 탐색할 범위의 중간지점을 두고 목표값보다 크면 오른쪽, 작으면 왼쪽을 탐색하는 일을 반복하는 방식으로 동작한다. 그렇기 때문에 <strong>데이터가 정렬</strong>되어 있어야 사용할 수 있다는 특징을 가지고 있다.\n시간복잡도는 O(logN)을 가지며 한번의 탐색마다 탐색할 범위가 반토막 나기 때문이다. 보통은 재귀 함수를 통해 구현한다.</p>\n<p>문제를 풀다가 알게된 것은 <strong>파라메트릭 서치</strong>라는 것이 있다는 것.<br>\n파라메트릭 서치는 이진탐색과 구조가 매우 흡사한데 “특정 조건에 내에서 최대값, 최소값을 구해야 하는” 최적화 문제를 “네, 아니요” 형태의 결정 문제로 바꿔서 푸는것을 의미한다. 대충 설명은 이런데 이건 코드를 직접 짜서 돌려봐야 이해가 되는것 같다.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> 범위의 가장 큰 값<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">for</span>문으로 목표하는 값을 도출\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span>문의 결과 <span class=\"token operator\">==</span> 매개변수로 주어진 값<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span>문의 결과 <span class=\"token operator\">&lt;</span> 매개변수로 주어진 값<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        end <span class=\"token operator\">=</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        start <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><em>(이진 탐색은 말로 설명하기가 정말 까다로운 알고리즘 같다.)</em></p>\n<br>\n<h3 id=\"-좋았던-점\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\" 좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟢 좋았던 점</h3>\n<hr>\n<ul>\n<li>오랜만에 평소보다 편한 마음으로 학습할 수 있었다.</li>\n<li>목표량을 정해두고 시작해서 달성할때마다 성취감 UP!</li>\n</ul>\n<br>\n<h3 id=\"-아쉬웠던-점\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\" 아쉬웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔴 아쉬웠던 점</h3>\n<hr>\n<ul>\n<li>오늘도 8시 기상.. 알람 좀 듣자.</li>\n</ul>\n<br>\n<h3 id=\"-개선점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟡 개선점</h3>\n<hr>\n<ul>\n<li>알람알람알람 들어들어들어.. 6시반에는 일어나자!</li>\n</ul>","excerpt":"👨‍💻 학습 과정 이진 탐색 알고리즘 이것이 코딩테스트다 라는 책으로(일명 동빈북) 현재 알고리즘 스터디를 진행중이다. 혼자서 하면 매일 미루는걸 알아서 스터디를 참여하면 강제로라도 하겠지라는 마음으로 참여했는데 덕분에 매주 하나의 주제를 학습해 나가고 있다. 이진탐색 알고리즘은 많은 양의 데이터를 탐색해서 특정 값을 찾아낼때 사용되는 탐색방법이다. 탐색할 범위의 중간지점을 두고 목표값보다 크면 오른쪽, 작으면 왼쪽을 탐색하는 일을 반복하는 방식으로 동작한다. 그렇기 때문에 데이터가 정렬되어 있어야 사용할 수 있다는 특징을 가지고 있다.\n시간복잡도는 O(logN)을 가지며 한번의 탐색마다 탐색할 범위가 반토막 나기 때문이다. 보통은 재귀 함수를 통해 구현한다. 문제를 풀다가 알게된 것은 파라메트릭 서치라는 것이 있다는 것. 파라메트릭 서치는 이진탐색과 구조가 매우 흡사한데 “특정 조건에 내에서 최대값, 최소값을 구해야 하는” 최적화 문제를 “네, 아니요” 형태의 결정 문제로 바꿔서 푸…","frontmatter":{"date":"January 19, 2022","title":"TIL-220119","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/01/2022-01-19-til/"}},"next":{"id":"196ea40f-382d-5346-8b28-ec5e91866d43","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h4 id=\"프로세스-메모리-구조-미션\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0-%EB%AF%B8%EC%85%98\" aria-label=\"프로세스 메모리 구조 미션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 메모리 구조 미션</h4>\n<p>어제 하루종일 이번 미션을 어떻게 구현할지 감을 못잡고 있었다. 오전의 강의를 듣고 난 뒤에도 동일한 상태였는데 그룹 리뷰 시간을 통해서 그 이유를 알게 되었다.<br>\n나는 학습범위를 너무 넓게 잡고 있었다. 프로세스 안에서도 스택과 힙의 동작 과정에 더 집중했어야 했는데, 프로세스 자체의 동작 과정이나 컨텍스트 스위칭, 스케줄링 등을 공부하는데 에너지를 쏟느라 정작 핵심을 공부하지 못했다.\n결국 겉핥기 식으로 학습한 꼴이 되어버렸다.</p>\n<p>결과적으로는 미션을 구현하지 못했지만 저녁에는 미션을 이해하고 어떤식으로 구현해나갈지 고민해보는 단계까지 갈 수 있었다. 프로세스와 CPU가 어떤 방식으로 일하는지 미리 학습하거라고 생각하고 주말에 미션을 제출할 계획이다.\n이번 미션을 통해 다시한번 다짐한건 <strong>0부터 100까지 모두를 이해해야된다는 생각을 버려야한다는 것.</strong></p>\n<blockquote>\n<p><strong>미션에서 요구하는 핵심이 무엇인지 제대로 파악하고 나중에 학습할것들은 적어두고 넘어가자!</strong></p>\n</blockquote>\n<br>\n<h4 id=\"jvm의-가비지-컬렉터\" style=\"position:relative;\"><a href=\"#jvm%EC%9D%98-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%ED%84%B0\" aria-label=\"jvm의 가비지 컬렉터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JVM의 가비지 컬렉터</h4>\n<p>C같은 경우 직접 메모리 관리를 해야하며 <code class=\"language-text\">free()</code>를 사용해서 더이상 사용하지 않는 객체들을 힙 메모리에서 해제시켜줘야한다. 하지만 Java의 경우 JVM이라는 가상머신 위에서 동작하는데 JVM이 메모리 관리를 해주는 덕분에 OS의 메모리 영역까지 관리할 일이 없다.\n특히 메모리 누수와 같은 걱정을 안해도 되는 이유가 바로 가비지 컬렉터 때문이다.</p>\n<p>간단한 동작 과정을 설명하자면 가비지 컬렉터가 스택의 참조 변수들이 참조하는 객체들을 확인한 뒤, 참조하지 않는 객체들 메모리에서 해제 시킨다.\n<em>(더 자세한 이야기는 주말에 하나의 포스트로 작성해볼 예정이기 때문에 넘어가는걸로.)</em></p>\n<p>이번 미션과 가비지 컬렉터를 학습하면서 C가 아닌 Java를 배우기를 잘했다는 생각이..</p>\n<br>\n<h3 id=\"-좋았던-점\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\" 좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟢 좋았던 점</h3>\n<hr>\n<ul>\n<li>한시간 단위로 현재 학습 과정을 점검했던 점.</li>\n</ul>\n<h3 id=\"-아쉬웠던-점\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\" 아쉬웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔴 아쉬웠던 점</h3>\n<hr>\n<ul>\n<li>아침에 하루 스케줄을 작성하지 않은 점. 하루의 명확한 목표량을 설정해야 시간을 더 효율적으로 쓸 수 있다고 생각한다.</li>\n<li>산책을 못한점</li>\n<li>계획했던 시간보다 늦게 일어난 점.</li>\n</ul>\n<h3 id=\"-개선점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟡 개선점</h3>\n<hr>\n<ul>\n<li>명확하게 하루 목표량을 정해둘 것.</li>\n<li>내일은 20분이라도 산책하자.</li>\n<li>오전 6시30분 기상!</li>\n</ul>","frontmatter":{"date":"January 18, 2022","title":"TIL-220118","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/01/2022-01-18-til/"}},"prev":{"id":"6b36728d-a402-5653-bd09-d6d047f66f0e","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h4 id=\"compile-vs-implementation\" style=\"position:relative;\"><a href=\"#compile-vs-implementation\" aria-label=\"compile vs implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compile vs implementation</h4>\n<p>테스트코드를 작성할 때 assertJ를 사용하기 위해서 항상 build.gradle 파일에 의존성을 추가해주는 작업을 해왔다.\n근데 어디서는 test compile을 사용하고 어디서는 test implementation을 사용하는것을 보고 무슨 차이가 있는지 궁금해서 찾아보게 되었다.</p>\n<p>일단 gradle 3.0버전 이후 compile은 사라졌다. 대신 implmentation과 api로 나뉘어지게 되었다.\n먼저 api는 클래스 중 하나가 변경되면, 해당 클래스에 대한 의존성을 가진 모든 클래스를 다시 빌드 해야한다. 직접적으로 의존하고 있지 않아도 의존하고 있는 클래스가 변경된 클래스를 의존할경우 함께 재빌드 된다.\n반면 implementation은 직접적으로 의존하고 있는 클래스 하나만 재빌드 되기 때문에 빌드 속도면에서 빠르다는 이점이 생긴다.</p>\n<p>또한 api는 직접적이든 간접적이든 연결된 모든 모듈의 api가 노출이 되지만 implementation은 필요한 모듈만 가지고 온다는 차이를 갖는다. (<em>실제 프로젝트를 진행해봐야 이 차이를 더 잘 이해할거 같다.</em>)</p>\n<br>\n<h4 id=\"함수형-프로그래밍\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍</h4>\n<p>오늘은 함수형 프로그래밍에 대한 미션이 주어졌다. 자바스크립트를 공부하면서 접했던 개념이라 금방 이해하고 구현할 수 있을거라고 생각했는데 오산이었다.😂<br>\n하루종일 함수형 프로그래밍의 개념과 자바에서는 어떻게 사용하는지, 람다와 스트림에 대해 학습하느라 미션 구현은 밤이 되어서야 진행할 수 있었고 결국 4시에 잤다.\n그래도 이번 미션을 통해서 알게된 점은 그동안 내가 람다와 스트림에 대해 제대로 모르고 사용해왔다는 점이다. 간단하게 filter, map 정도는 사용했지만 단순히 화살표 함수 같이 보이는 람다가 실제로는 익명객체이라는점, 스트림에서 제공하는 많은 함수들에 대해 알 수 있었다.</p>\n<br>\n<h3 id=\"-좋았던-점\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\" 좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟢 좋았던 점</h3>\n<hr>\n<ul>\n<li>드디어 목표한 시간에 일어났다.</li>\n<li>학습시간을 어제보다 늘렸다.</li>\n</ul>\n<br>\n<h3 id=\"-아쉬웠던-점\" style=\"position:relative;\"><a href=\"#-%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90\" aria-label=\" 아쉬웠던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔴 아쉬웠던 점</h3>\n<hr>\n<ul>\n<li>이정도면 되겠지, 적당히 알면 되겠지라는 마인드가 아직도 남아있다.</li>\n</ul>\n<br>\n<h3 id=\"-개선점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟡 개선점</h3>\n<hr>\n<ul>\n<li>깊~게 학습하려고 노력하자.</li>\n</ul>","frontmatter":{"date":"January 20, 2022","title":"TIL-220120","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/01/2022-01-20-til/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/til/01/2022-01-19-til/","nextSlug":"/til/01/2022-01-18-til/","prevSlug":"/til/01/2022-01-20-til/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
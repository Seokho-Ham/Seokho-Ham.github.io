{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/til/04/2022-04-13-til/",
    "result": {"data":{"cur":{"id":"7c1169c7-8965-532f-b4c4-84a5e6002a76","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:30 데일리 스크럼<br>\n10:30 ~ 12:50 마스터 클래스<br>\n14:00 ~ 17:00 todolist 프로젝트<br>\n21:30 ~ 22:10 알고리즘 스터디<br>\n23:00 ~ 01:00 todolist 프로젝트</p>\n</blockquote>\n<h2 id=\"-학습-회고\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%ED%9A%8C%EA%B3%A0\" aria-label=\" 학습 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 <strong>학습 회고</strong></h2>\n<h3 id=\"-todolist-프로젝트\" style=\"position:relative;\"><a href=\"#-todolist-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" todolist 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 todolist 프로젝트</strong></h3>\n<ul>\n<li>도메인 객체를 직접 반환하는 대신 Dto 객체를 반환하도록 변경</li>\n<li>pr 날리기</li>\n</ul>\n<p>어제 이동욱님 책과 시그리드의 리뷰를 통해 기존 도메인 객체를 바로 반환하는 것에 대해 고민해볼 수 있었고, 데이브와 상의 후 Dto 객체를 반환하는것으로 수정하는 작업을 진행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//변경 전 코드</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//변경 후 코드</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todos\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseCardsDto</span> <span class=\"token function\">getTodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드와 같이 변경했더니 문제는 클라이언트에서 받게 되는 데이터가 한겹 더 싸였다. 이런건 어떻게 처리하는게 좋을지 모르겠다. 차라리 그냥 List로 반환해주고, 프론트에서 정렬하도록 하는게 맞는것 같기도 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"cards\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"해야할 일\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"하고 있는 일\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"완료된 일\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>밤에는 @Transactional을 코드에 추가해보는 작업을 진행했다.\n현재의 코드에서는 클라이언트가 카드를 추가하는 요청을 했을 경우, DB에 카드를 저장하는데 성공하고 이벤트를 저장하는데 실패할 경우 카드 데이터는 그대로 저장되고 끝난다.<br>\n이러면 실제 데이터는 들어갔지만 이벤트 하나를 날려먹게 된다. 그래서 데이터를 넣고 이벤트를 등록하는 로직을 하나의 단위로 묶어서 처리하는게 맞는것 같다는 생각이 들어서 로컬에서만 시도해봤다.</p>\n<p>추가적으로 ResponseEntity에 대해 학습해봐야겠다.</p>\n<h2 id=\"️-개선점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\"️ 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💁🏻‍♂️ 개선점</h2>\n<ol>\n<li>오늘은 컨디션이 최악이었다. 아직 몸이 늦게까지 학습하는거에 적응이 되지 않아서인지, 눈이 터질거같다.</li>\n</ol>\n<ul>\n<li>쉴때는 확실하게!! 1시간정도는 산책을 나가서 눈을 쉬게 해주자.</li>\n</ul>","excerpt":"🛎 하루 일과 10:00 ~ 10:30 데일리 스크럼 10:30 ~ 12:50 마스터 클래스 14:00 ~ 17:00 todolist 프로젝트 21:30 ~ 22:10 알고리즘 스터디 23:00 ~ 01:00 todolist 프로젝트 👨‍💻 학습 회고 🤝 todolist 프로젝트 도메인 객체를 직접 반환하는 대신 Dto 객체를 반환하도록 변경 pr 날리기 어제 이동욱님 책과 시그리드의 리뷰를 통해 기존 도메인 객체를 바로 반환하는 것에 대해 고민해볼 수 있었고, 데이브와 상의 후 Dto 객체를 반환하는것으로 수정하는 작업을 진행했다. 위의 코드와 같이 변경했더니 문제는 클라이언트에서 받게 되는 데이터가 한겹 더 싸였다. 이런건 어떻게 처리하는게 좋을지 모르겠다. 차라리 그냥 List로 반환해주고, 프론트에서 정렬하도록 하는게 맞는것 같기도 하다. 밤에는 @Transactional을 코드에 추가해보는 작업을 진행했다.\n현재의 코드에서는 클라이언트가 카드를 추가하는 요청을 했을 경우, D…","frontmatter":{"date":"April 13, 2022","title":"TIL-220413","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/04/2022-04-13-til/"}},"next":{"id":"0f3fac43-a9a5-57da-93ba-89b5f29069e7","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:20 데일리 스크럼<br>\n10:20 ~ 12:30 todolist 프로젝트 - db에 event 등록하는 코드 작성<br>\n14:30 ~ 19:00 todolist 프로젝트 - EC2 배포<br>\n20:10 ~ 22:10 토비의 스프링 스터디<br>\n22:30 ~ 01:30 코드리뷰에 대한 코멘트 작성 및 학습<br>\n01:30 ~ 03:00 스프링 부트와 AWS로 혼자 구현하는 웹서비스</p>\n</blockquote>\n<h2 id=\"-학습-회고\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%ED%9A%8C%EA%B3%A0\" aria-label=\" 학습 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 <strong>학습 회고</strong></h2>\n<h3 id=\"-todolist-프로젝트\" style=\"position:relative;\"><a href=\"#-todolist-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" todolist 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 todolist 프로젝트</strong></h3>\n<ul>\n<li>mysql 연결 - event를 db에 등록하는 쿼리 작성</li>\n<li>ec2 배포</li>\n</ul>\n<p>오늘 오후는 배포하다가 시간이 다 간것 같다. 산토리가 블로그에 배포 관련 글을 작성해놨는데 ios에게 오늘 바로 api를 제공해야할것 같아서 일단 블로그를 따라해본 뒤, 개인적으로 배포에 대해 다시 학습해보기로 했다.<br>\n대부분의 과정이 순조로웠지만… 보안그룹에 8080포트를 추가하지 않아서인지 요청을 못받았고, 원인을 찾느라 시간을 엄청 썼다.<br>\n겨우겨우 배포에는 성공했지만 이건 그냥 따라친 수준이라 이동욱님 책보면서 직접 학습해봐야겠다.</p>\n<br>\n<p>어제하던 고민에 대한 답을 준 덕분에 찾은것 같다.</p>\n<ul>\n<li>서비스끼리는 같은 계층에 있기 때문에 한쪽에서 의존하는것이 문제가 되지 않을것 같다.</li>\n<li>카드를 등록, 수정, 삭제하는 로직에서 이벤트 서비스의 addEvent 로직을 함께 넣고 트랜잭션처리(?)를 하면 될것 같다.</li>\n</ul>\n<p>트랜잭션 처리는 자세히 모르는데 학습해서 꼭 코드를 개선해보고 싶다.</p>\n<h3 id=\"코드리뷰\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0\" aria-label=\"코드리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>코드리뷰</strong></h3>\n<ul>\n<li><a href=\"https://github.com/codesquad-members-2022/todo-list/pull/15\">1차 리뷰</a></li>\n<li><a href=\"https://github.com/codesquad-members-2022/todo-list/pull/85\">2차 리뷰</a></li>\n</ul>\n<p>이번 주말에는 코드리뷰 받은 내용들을 정리해서 블로그에 남기자.</p>\n<h3 id=\"-스프링-부트와-aws로-혼자-구현하는-웹서비스\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-aws%EB%A1%9C-%ED%98%BC%EC%9E%90-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\" 스프링 부트와 aws로 혼자 구현하는 웹서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🟣 스프링 부트와 AWS로 혼자 구현하는 웹서비스</strong></h3>\n<ul>\n<li>스프링 웹 계층</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/57708971/163024362-1574473f-b320-4054-9174-d45aae596294.png\" alt=\"spring-web-layer\"></p>\n<ul>\n<li>Service 객체는 트랜잭션, 도메인 간 순서 보장의 역할만 한다.</li>\n<li>비즈니스 로직은 Service에 담기는것이 아닌, 도메인에 담겨야한다. 도메인 스스로가 로직을 수행하도록 해야한다.</li>\n<li>Entity 클래스는 DB와 맞닿은 핵심 클래스이기 때문에 절대 Request/Response 클래스로 사용하면 안된다.</li>\n</ul>\n<p>3장을 읽으면서 가장 인상깊었던 내용이다.<br>\n여태까지 구현하면서 항상 서비스에서 비즈니스 로직을 가져야한다고 생각했는데, 서비스는 단순히 순서를 보장하는 역할만 한다고 한다.<br>\ntodolist 미션도 개선할 점이 많아보인다.</p>\n<h2 id=\"️-유지할-점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%9C%A0%EC%A7%80%ED%95%A0-%EC%A0%90\" aria-label=\"️ 유지할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚴🏻‍♂️ 유지할 점</h2>\n<ul>\n<li>til을 계속 작성하자. 고민한 내용들이 별거 아닌것 같아도 누군가에게는 혹은 나중의 나에게 도움이 될수도 있다.</li>\n</ul>\n<h2 id=\"️-개선점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\"️ 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💁🏻‍♂️ 개선점</h2>\n<ol>\n<li>집중력이 떨어질수록 하던걸 대충 마무리 하고 넘어가려는 모습이 조금씩 보이는것 같다.</li>\n</ol>\n<ul>\n<li>차라리 쉬는 시간을 가진 뒤, 다시 진행하자. 대충 넘어가면 나중에 후회한다.</li>\n</ul>","frontmatter":{"date":"April 12, 2022","title":"TIL-220412","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/04/2022-04-12-til/"}},"prev":{"id":"864c6d8a-2907-53f8-8ecd-153607b2006c","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:30 데일리 스크럼<br>\n12:00 ~ 17:00 todolist 프로젝트<br>\n21:00 ~ 22:30 코드 리뷰 정리<br>\n22:45 ~ 01:30 todolist 프로젝트</p>\n</blockquote>\n<h2 id=\"-학습-회고\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%ED%9A%8C%EA%B3%A0\" aria-label=\" 학습 회고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 <strong>학습 회고</strong></h2>\n<h3 id=\"-todolist-프로젝트\" style=\"position:relative;\"><a href=\"#-todolist-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\" todolist 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 todolist 프로젝트</strong></h3>\n<ul>\n<li><a href=\"https://github.com/codesquad-members-2022/todo-list/pull/152\">3차 코드 리뷰</a></li>\n</ul>\n<h3 id=\"️-리뷰-반영\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%A6%AC%EB%B7%B0-%EB%B0%98%EC%98%81\" aria-label=\"️ 리뷰 반영 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>⭕️ 리뷰 반영</strong></h3>\n<hr>\n<p><strong>1. cardController의 add 메서드 return 값이 애매하다는 리뷰.</strong></p>\n<ul>\n<li>질문의 요지를 제대로 파악한건지는 모르겠지만, controller의 add 메서드에서 event처리 로직까지 들어있어서 그런것 같음.</li>\n<li>EventService를 CardService 내부로 이동.</li>\n</ul>\n<p><strong>2. responsCardDto에게 section 값을 비교하는 책임을 위임하기 &#x26; if-else 제거하기</strong></p>\n<ul>\n<li>후의 도움으로 if문 내부에서 값을 리턴하는 방식을 사용해 else 제거. -> return 문이 중복된다는 단점이 있지만 특별한 해결책을 찾지 못했음</li>\n<li>Card 도메인 객체에게 section의 변경 여부를 확인하는 책임 위임.</li>\n</ul>\n<p><strong>3. put, delete 메서드에 최소한 요청 성공 여부를 알려주는 반환값 정도는 주도록 개선하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">{</span>\n  code <span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n  message <span class=\"token operator\">:</span> <span class=\"token string\">\"성공\"</span>\n  content <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Response<T> 형태의 Dto를 만들고 내부에 content 필드의 타입을 제네릭으로 설정하는 방식으로 변경하면 좋겠다고 생각.</li>\n<li>모든 응답을 위의 형식으로 보내주는게 맞을것같다고 전부터 생각했지만 미루다보니 프로젝트가 끝나는 날이 와서 적용은 안했음.</li>\n</ul>\n<p><strong>4. Action enum 내부에서 Event가 스스로 dto의값들을 사용하도록 개선하기</strong></p>\n<ul>\n<li>Event에게 dto에서 값을 꺼내서 넘겨줬는데 객체 스스로 결정해서 사용하도록 자율성을 보장해야한다. 그래서 dto를 넘겨주는 형식으로 변경</li>\n</ul>\n<p><strong>5. ResponseCardsDto에서 Map의 키값을 enum 타입을 넣어서 표현하도록 개선하기</strong></p>\n<ul>\n<li>Section Enum 클래스를 작성하고 카드를 분류하는 로직을 Enum 클래스 내부로 옮김</li>\n</ul>\n<h3 id=\"-앞으로-변경할-내용과-학습할-키워드\" style=\"position:relative;\"><a href=\"#-%EC%95%9E%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%A0-%EB%82%B4%EC%9A%A9%EA%B3%BC-%ED%95%99%EC%8A%B5%ED%95%A0-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" 앞으로 변경할 내용과 학습할 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🚫 앞으로 변경할 내용과 학습할 키워드</strong></h3>\n<hr>\n<ul>\n<li>eventJdbcRepository의 rowMapper에서 컬럼명을 동적으로 관리할 방법 찾아보기</li>\n<li><code class=\"language-text\">findAny()</code>는 id가 unique하지 않을 경우 동일성이 보장이 안되는데 이 부분을 개선 해보기</li>\n<li>Custom한 Exception 만들어보기</li>\n<li>action이 이루어진 목록을 인터셉터로 구현해보기</li>\n<li><code class=\"language-text\">genarateKey</code>란?</li>\n<li>mysql에서 enum 타입을 사용하는것에 대한 의견 남기기 - <a href=\"http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/\">mysql에서 enum 타입을 사용하면 안되는 8가지 이유</a></li>\n<li><code class=\"language-text\">executeAndReturnKey()</code>가 멀티스레드에서 사용해도 안전한 이유 알아보기</li>\n</ul>\n<p>코드리뷰를 받게 되면 많은 키워드가 쏟아진다. 동시에 내가 습관적으로 작성하던 코드, 좋다니까 사용해보는 코드들에 대해 다시한번 생각해볼 수 있는 기회가 된다.</p>\n<br>\n<p>이동욱님의 책에서 Entity객체는 DB와 직접적으로 연결되어 있는 객체이기 때문에 있는 반환용 Dto 객체를 만들어 반환해야한다는 내용을 보았고 바로 프로젝트에 적용했다. 하지만 적용하면서 들게 된 생각은 <strong>“현재는 데이터의 개수가 적지만, 만약 데이터가 엄청 많다면 변환하는데 드는 오버헤드가 너무 크지 않을까”</strong> 였다.</p>\n<br>\n<p>해당 내용을 pr의 질문으로 남겼고 받은 리뷰에서 **<em>당연히 오버헤드가 발생하기 때문에 현재 애플리케이션에서 반드시 Dto 객체로 변환해야하는 이유가 있는지 고민해보고, 변환해야하는 이유가 있다면 근거를 가지고 설득할 수 있어야 한다</em>**는 피드백을 받았다.<br>\n이런 피드백 덕분에 “대다수가 좋다고 하니까, 실력이 뛰어난 개발자분이 맞는 방식이라고 하니까” 무작정 적용했던 내 자신을 반성하게 된다.</p>\n<h3 id=\"entity-객체를-그대로-반환하면-안되는-이유\" style=\"position:relative;\"><a href=\"#entity-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B7%B8%EB%8C%80%EB%A1%9C-%EB%B0%98%ED%99%98%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"entity 객체를 그대로 반환하면 안되는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Entity 객체를 그대로 반환하면 안되는 이유</strong></h3>\n<ul>\n<li>사용자에게 Entity 객체를 반환하게 되면 Entity 객체의 모든 필드, 즉 DB의 컬럼들이 그대로 사용자에게 공개된다.</li>\n<li>사용자에게 반환하는 데이터는 중간에 변환하는 과정이 필요할 수 있는데 이것이 가능하려면 setter가 필요하다. Entity에 setter를 구현해두면 비즈니스 로직과 전혀 상관 없는 controller와 같은 곳에서 실수로 값의 변경이 발생할 수 있다.</li>\n<li>사용자에게 필요도 없는 데이터까지 전부 보내는것은 자원의 낭비다.</li>\n</ul>\n<h2 id=\"️-개선점\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\"️ 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>💁🏻‍♂️ 개선점</strong></h2>\n<ul>\n<li>오늘은 만족! 💯</li>\n</ul>","frontmatter":{"date":"April 14, 2022","title":"TIL-220414","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/04/2022-04-14-til/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/til/04/2022-04-13-til/","nextSlug":"/til/04/2022-04-12-til/","prevSlug":"/til/04/2022-04-14-til/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
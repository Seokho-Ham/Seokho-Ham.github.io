{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/til/06/2022-06-22-til/",
    "result": {"data":{"cur":{"id":"9754020a-4ae7-586e-97ec-5d83a834bd2f","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:30 데일리 스크럼<br>\n10:30 ~ 12:30 Issue Tracker 프로젝트<br>\n14:30 ~ 15:40 Dion 특강<br>\n16:00 ~ 18:10 Issue Tracker 프로젝트</p>\n</blockquote>\n<br>\n<h2 id=\"-issue-tracker-8일차\" style=\"position:relative;\"><a href=\"#-issue-tracker-8%EC%9D%BC%EC%B0%A8\" aria-label=\" issue tracker 8일차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 Issue Tracker 8일차</strong></h2>\n<hr>\n<p>오늘도 산토리와 작업을 이어나갔다.<br>\n오늘은 오전에는 네비게이터, 오후에는 드라이버로 작업을 진행했다.\n중간에는 디온의 특강이 있었고, 생각을 정리할 수 있는 유익한 시간이었다.</p>\n<h3 id=\"-작업\" style=\"position:relative;\"><a href=\"#-%EC%9E%91%EC%97%85\" aria-label=\" 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 작업</h3>\n<ul>\n<li>유저 회원가입 시 비밀번호 암호화\n<ul>\n<li>jbcrypt 라이브러리 사용</li>\n</ul>\n</li>\n<li>access 토큰 갱신하는 로직 작성</li>\n</ul>\n<h3 id=\"-고민사항\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%AF%BC%EC%82%AC%ED%95%AD\" aria-label=\" 고민사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💭 고민사항</h3>\n<h4 id=\"영속성-컨텍스트의-단위는\" style=\"position:relative;\"><a href=\"#%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%8B%A8%EC%9C%84%EB%8A%94\" aria-label=\"영속성 컨텍스트의 단위는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>영속성 컨텍스트의 단위는?</h4>\n<p>현재 서비스에서는 jwt 토큰을 사용해서 사용자 인증을 구현했다.<br>\njwt토큰에 유저 식별 id를 claim 값으로 넣고 있으며 토큰 검증 후 userId를 사용해서 user 객체를 조회해서 인터셉터에서 컨트롤러에게 넘겨준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">//AuthInterceptor의 preHandle 메서드의 일부</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\njwtProvider<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>이와 같은 방식으로 구현한 이유는 대부분의 요청에서 사용자의 정보를 사용하기 때문에 <strong>유저를 조회하는 로직의 중복을 줄이기 위함</strong>이다.</p>\n<p>하지만 이렇게 했을 경우 문제가 발생했다.</p>\n<blockquote>\n<p>컨트롤러에 넘겨준 User 객체는 영속성 컨텍스트에서 관리를 해주지 않는다.<br>\n즉, 엔티티 객체의 값이 변경되도 더티체킹이 발생하지 않고 DB에도 변경사항을 적용하는 쿼리가 날아가지 않는다.</p>\n</blockquote>\n<p>단순히 인터셉터에서 하나의 트랜잭션이 끝났으니 당연히 안된다고 생각했지만,\n호기심에 인터셉터에서는 userId만 세팅해주고 어노테이션을 처리해주는 ArgumentResolver에서 유저를 조회 후 반환하도록 코드를 변경해보니 컨트롤러로 넘어온 해당 객체를 영속성 컨텍스트에서 관리해주는것을 발견했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">//AuthArgumentResolver의 resolveArgument메서드</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebDataBinderFactory</span> binderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> webRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNativeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">String</span> authorization <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>authorization<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>어떤 차이가 있는지 모르겠어서 모각코방에 계시던 로치에게 질문해본 결과</p>\n<ul>\n<li>인터셉터에서 조회해오는 경우는 저기서 트랜잭션이 닫히고 이후에 다시 열리는 구조라서 그런것 같고, ArgumentResolver에서 조회하는 경우에는 resolver -> controller -> service 까지 트랜잭션이 연결되는 구조 같다.</li>\n<li>일단 트랜잭션은 서비스 내에서만 열고 닫는게 좋다!</li>\n<li>중복을 제거하기 위해서 현재 구조로 만든건 괜찮다! 나중에 스프링 시큐리티 사용하면 굳이 인터셉터에서 조회 안해도 해결이 된다</li>\n<li>pk로 객체를 조회해와야 더티체킹이 된다!</li>\n</ul>\n<p>라는 답변을 받았다.</p>\n<p>추가적으로 학습해볼 링크까지!<br>\n<a href=\"https://catsbi.oopy.io/eedf92ff-8834-458d-86e4-0ed2e01b5971\">OSIV와 성능 최적화</a></p>\n<p>일단 추측을 해보자면, 인터셉터에서 조회한 user 객체가 <code class=\"language-text\">request.setAttribute()</code>를 통해 세팅되는 시점에 트랜잭션이 닫히는 것 같다. 반면 ArgumentResovler에서 조회하는 경우는 조회한 객체를 바로 반환해주기 때문에 해당 트랜잭션이 유지가 되고 있는건가.. 라고 생각을 했는데 아직 트랜잭션과 영속성 컨텍스트에 대한 이해가 부족해서 추가 학습이 필요할 것 같다.</p>\n<br>","excerpt":"🛎 하루 일과 10:00 ~ 10:30 데일리 스크럼 10:30 ~ 12:30 Issue Tracker 프로젝트 14:30 ~ 15:40 Dion 특강 16:00 ~ 18:10 Issue Tracker 프로젝트 🤝 Issue Tracker 8일차 오늘도 산토리와 작업을 이어나갔다. 오늘은 오전에는 네비게이터, 오후에는 드라이버로 작업을 진행했다.\n중간에는 디온의 특강이 있었고, 생각을 정리할 수 있는 유익한 시간이었다. 📝 작업 유저 회원가입 시 비밀번호 암호화 jbcrypt 라이브러리 사용 access 토큰 갱신하는 로직 작성 💭 고민사항 영속성 컨텍스트의 단위는? 현재 서비스에서는 jwt 토큰을 사용해서 사용자 인증을 구현했다. jwt토큰에 유저 식별 id를 claim 값으로 넣고 있으며 토큰 검증 후 userId를 사용해서 user 객체를 조회해서 인터셉터에서 컨트롤러에게 넘겨준다. 이와 같은 방식으로 구현한 이유는 대부분의 요청에서 사용자의 정보를 사용하기 때문에 유저를 조…","frontmatter":{"date":"June 22, 2022","title":"[코드스쿼드] - 220622 TIL","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/06/2022-06-22-til/"}},"next":{"id":"d6960d41-cfa7-58fa-956c-fb4feb38e3ce","html":"<h2 id=\"-하루-일과\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%A3%A8-%EC%9D%BC%EA%B3%BC\" aria-label=\" 하루 일과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛎 <strong>하루 일과</strong></h2>\n<blockquote>\n<p>10:00 ~ 10:30 데일리 스크럼<br>\n10:00 ~ 12:30 Issue Tracker 프로젝트<br>\n14:00 ~ 19:00 Issue Tracker 프로젝트<br>\n21:00 ~ 00:00 알고리즘 문제 풀이</p>\n</blockquote>\n<br>\n<h2 id=\"-issue-tracker-7일차\" style=\"position:relative;\"><a href=\"#-issue-tracker-7%EC%9D%BC%EC%B0%A8\" aria-label=\" issue tracker 7일차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>🤝 Issue Tracker 7일차</strong></h2>\n<hr>\n<p>산토리와 오전에 만나 저녁까지 박공을 했고 중간중간 터지려는 멘탈을 함께 잡아갔다.\n현재는 페어프로그래밍을 하고 있는데 큰 모니터 하나가 있으면 좋겠다..ㅋㅋ</p>\n<h3 id=\"-작업\" style=\"position:relative;\"><a href=\"#-%EC%9E%91%EC%97%85\" aria-label=\" 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 작업</h3>\n<hr>\n<ul>\n<li>로그인 관련 클래스 다형성 구현</li>\n<li>Google 로그인 적용</li>\n</ul>\n<h3 id=\"-고민사항\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%AF%BC%EC%82%AC%ED%95%AD\" aria-label=\" 고민사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💭 고민사항</h3>\n<h4 id=\"소셜로그인-유저와-일반-로그인-유저의-닉네임-중복을-어떻게-분리해서-검증할까\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9C%A0%EC%A0%80%EC%99%80-%EC%9D%BC%EB%B0%98-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9C%A0%EC%A0%80%EC%9D%98-%EB%8B%89%EB%84%A4%EC%9E%84-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B6%84%EB%A6%AC%ED%95%B4%EC%84%9C-%EA%B2%80%EC%A6%9D%ED%95%A0%EA%B9%8C\" aria-label=\"소셜로그인 유저와 일반 로그인 유저의 닉네임 중복을 어떻게 분리해서 검증할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소셜로그인 유저와 일반 로그인 유저의 닉네임 중복을 어떻게 분리해서 검증할까?</h4>\n<blockquote>\n<p>상황 : 유저1이 자체 회원가입 시 Id를 suntory로 가입했다. 유저2가 Github 로그인으로 가입을 하려는데 Id가 suntory다.</p>\n</blockquote>\n<p>현재 서비스의 로직은 가입 시 User 테이블에서 모든 유저들을 대상으로 중복검사를 한다. 위와 같은 상황이 생긴다면 유저2는 Github의 Id를 바꾸지 않는 이상 소셜 로그인이 불가능하다.\n이 문제를 해결하기 위해 고민 중 나온 해결책이 2가지였다.</p>\n<ul>\n<li>가입 시 가입 타입을 필드에 저장 후 중복 검사 시, 같은 타입의 유저들을 대상으로만 검색한다.</li>\n<li>각 유저의 Id를 유니크한 값으로 변경해서 저장한다.</li>\n</ul>\n<p>첫번째 방식을 택할 경우 가입은 수월하게 되더라도, 자체 로그인을 하는 경우 타입까지 확인해야하는 번거로움이 생긴다.</p>\n<p>결국 두번째 방식을 택하기로 하고 Github 유저는 <code class=\"language-text\">Github_xxx</code> 의 형식으로 저장하도록 변경했다.</p>\n<br>","frontmatter":{"date":"June 21, 2022","title":"[코드스쿼드] - 220621 TIL","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/06/2022-06-21-til/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/til/06/2022-06-22-til/","nextSlug":"/til/06/2022-06-21-til/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
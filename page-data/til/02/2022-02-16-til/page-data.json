{"componentChunkName":"component---src-templates-blog-template-js","path":"/til/02/2022-02-16-til/","result":{"data":{"cur":{"id":"210aea36-0042-59e4-8a2f-5af9e9b9b0cb","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h3 id=\"미션-3단계\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EC%85%98-3%EB%8B%A8%EA%B3%84\" aria-label=\"미션 3단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미션 3단계</h3>\n<p>기존의 미션에 기능을 추가하고 기존의 로직을 변경해야하는 미션이 주어졌다.\n사용자의 이름들이 쉼표와 함께 입력되어야하는데 오전에는 이 형식을 검증하는 방식으로 정규표현식을 사용해서 구현해보려고 했지만 실패했다. 아무래도 정규표현식을 잘 모르다보니 원하는대로 검증이 안됐고 빠르게 포기하고 다른부분을 구현하는데 집중했다.</p>\n<p>오후에는 그룹 리뷰 시간이 있었는데 오늘도 다른분들의 코드를 보며 많이 배울 수 있었다. 특히 테리가 사다리의 row를 하나의 클래스로 만들어서 사용한 아이디어, 디테일까지 신경쓴 제리의 패딩 메서드 등을 보면서 내 코드에 적용하면 좋겠다 싶은 부분들을 찾을 수 있었다.</p>\n<p>구현 중 아쉬웠던 점은 <strong>커밋 단위를 더 쪼개지 못했던 점</strong>이다. 하나의 부분을 바꾸면서 관련된 부분을 전부 수정하다보니 커밋을 작성할때 바뀐 부분이 너무 많아서 간결하게 작성하는게 어려웠다.</p>\n<blockquote>\n<p>커밋 단위를 쪼개자!</p>\n</blockquote>\n<h3 id=\"스터디-탈주-\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%84%B0%EB%94%94-%ED%83%88%EC%A3%BC-\" aria-label=\"스터디 탈주  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스터디 탈주 😱</h3>\n<p>참여하던 스터디 중 하나를 그만두기로 결정했다.<br>\n스터디는 다른 멤버들과 함께 하는 모임인만큼 피해주기 싫었고, 무책임하게 그만두는게 싫어서 중간 탈주만큼은 하지 말아야겠다고 생각해왔다. 하지만 몇주간 마스터즈 코스의 내용은 커녕 스터디 내용도 간신히 준비해가는걸 보며 많은 일정이 감당이 안된다는 느낌을 많이 받았고 결국 오늘 그만두게 되었다.😭😭</p>\n<p>감사하게도 멤버들이 너무 잘 이해해줬다. (감사합니다🙏🏻)\n나 자신에게도 실망스럽긴 하지만 이번 기회를 통해 내가 소화할 수 있는 양을 찾아갈 수 있었고 페이스 조절의 중요성도 깨달았다.</p>\n<h2 id=\"-좋았던-점\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\" 좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟢 좋았던 점</h2>\n<ul>\n<li>내 한계를 알고 욕심을 버렸다!</li>\n</ul>\n<h2 id=\"-개선점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟡 개선점</h2>\n<ul>\n<li>요즘 오전시간을 제대로 사용하지 못하고 있다는 느낌이 든다. 스크럼 끝나고 이것저것 조금 보면 바로 점심시간…\n<blockquote>\n<p>오전 시간은 스크럼 이후부터 1시간 30분 최대한 집중해서 보내자.</p>\n</blockquote>\n</li>\n</ul>","excerpt":"👨‍💻 학습 과정 미션 3단계 기존의 미션에 기능을 추가하고 기존의 로직을 변경해야하는 미션이 주어졌다.\n사용자의 이름들이 쉼표와 함께 입력되어야하는데 오전에는 이 형식을 검증하는 방식으로 정규표현식을 사용해서 구현해보려고 했지만 실패했다. 아무래도 정규표현식을 잘 모르다보니 원하는대로 검증이 안됐고 빠르게 포기하고 다른부분을 구현하는데 집중했다. 오후에는 그룹 리뷰 시간이 있었는데 오늘도 다른분들의 코드를 보며 많이 배울 수 있었다. 특히 테리가 사다리의 row를 하나의 클래스로 만들어서 사용한 아이디어, 디테일까지 신경쓴 제리의 패딩 메서드 등을 보면서 내 코드에 적용하면 좋겠다 싶은 부분들을 찾을 수 있었다. 구현 중 아쉬웠던 점은 커밋 단위를 더 쪼개지 못했던 점이다. 하나의 부분을 바꾸면서 관련된 부분을 전부 수정하다보니 커밋을 작성할때 바뀐 부분이 너무 많아서 간결하게 작성하는게 어려웠다. 커밋 단위를 쪼개자! 스터디 탈주 😱 참여하던 스터디 중 하나를 그만두기로 결정했다.…","frontmatter":{"date":"February 16, 2022","title":"TIL-220216","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/02/2022-02-16-til/"}},"next":{"id":"bdd9d2e6-a05e-5ee0-9610-9495021583bf","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h3 id=\"java에는-call-by-reference가-없다\" style=\"position:relative;\"><a href=\"#java%EC%97%90%EB%8A%94-call-by-reference%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-label=\"java에는 call by reference가 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java에는 Call By Reference가 없다.</h3>\n<p>자바에는 사실 Call By Reference가 없다고 한다.</p>\n<p>난 여태까지 기본형 타입은 call by value, 참조형 타입은 call by reference 로 동작하는줄 알고 있었다. 하지만 스크럼때 제리가 알려줘서 해당 자료에 대해 찾아보게 됐다. 다행히 여러 블로그들에 잘 설명되어 있어서 쉽게 이해할 수 있었다.\n블로그를 보고 코드를 따라 쳐보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Member</span> member2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1의 age: \"</span> <span class=\"token operator\">+</span> member1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member2의 age: \"</span> <span class=\"token operator\">+</span> member2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>member1<span class=\"token punctuation\">,</span> member2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member1의 age: \"</span> <span class=\"token operator\">+</span> member1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member2의 age: \"</span> <span class=\"token operator\">+</span> member2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span> member1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span> member2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> temp <span class=\"token operator\">=</span> member1<span class=\"token punctuation\">;</span>\n        member1 <span class=\"token operator\">=</span> member2<span class=\"token punctuation\">;</span>\n        member2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 <code class=\"language-text\">swap</code>메서드를 보면 인자로 들어온 멤버변수가 바라보는 객체를 서로 바꿔주는 작업처럼 보인다. 하지만 아래의 출력 결과를 보면 알겠지만 값이 그대로다.</p>\n<img width=\"388\" src=\"https://user-images.githubusercontent.com/57708971/154017530-b30e7d99-55c7-4b05-97fd-120f8482943b.png\">\n<img width=\"230\" src=\"https://user-images.githubusercontent.com/57708971/154017307-549e29d5-4cd8-44a1-ae9f-9a14ea705c52.png\">\n<blockquote>\n<p>메서드의 인자로 참조형 타입을 넘겨주게 되면 해당 객체의 주소값을 그대로 넘겨주는것이 아닌, <strong>해당 객체를 바라보는 새로운 주소값</strong>을 만들어서 넘겨준다. 그렇기 때문에 정확하게 표현하면 Java에서 Call By Reference는 존재하지 않는다고 한다.</p>\n</blockquote>\n<h3 id=\"미션-2단계\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EC%85%98-2%EB%8B%A8%EA%B3%84\" aria-label=\"미션 2단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미션 2단계</h3>\n<p>오늘은 어제 구현한 미션을 리팩토링하는 미션이 주어졌다. 구현한 미션 자체의 사이즈가 작아서 사실 건드릴게 많이 없었다.<br>\n리팩토링을 하면서 고민했던 부분은 **사용자의 입력에 대한 검증의 책임은 어디서 가져야 하는가?**였다.\n처음에는 InputUtil 클래스에서 타입에 대한 검증을 한 뒤, 실제 그 값이 유효한 값인지에 대한 검사는 도메인 내의 로직에서 하려고 했다. 하지만 검증을 이렇게 곳곳에 나눠두는게 과연 좋을까 라는 생각이 들었고 딱히 뭐가 좋다는 결론이 안나서 그룹리뷰 시간에 팀원들과 이야기를 나눠봤다. 일단 내려진 결론은 <strong>각자 스타일이 다르다</strong> 였다. 애초에 올바른 값만 도메인으로 넘겨주는게 좋을것같다고 하는 멤버도 있는 반면, 나와 비슷한 방식으로 생각한 멤버도 있었다. 이런 검증과 예외처리에 대한 부분이 항상 고민인데 자바 클래스동안 미션 구현, 그룹리뷰 등을 통해 더 고민해봐야겠다. 일단 당장은 나눠놔야지..ㅎ</p>\n<ul>\n<li><em>새미의 코드 덕분에 stringbuilder의 append에 char타입의 1차원 배열을 넣으면 배열의 요소들이 그대로 문자열로 저장된다는 사실을 알게 되었다.</em></li>\n</ul>\n<h2 id=\"-좋았던-점\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90\" aria-label=\" 좋았던 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟢 좋았던 점</h2>\n<ul>\n<li>그룹리뷰를 통해 다른 멤버들의 생각을 들을 수 있었고, 코드를 보며 배웠다.</li>\n<li>타이머를 1시간 단위로 맞춰놓고 사용해서 중간 중간 가질 수 있었다.</li>\n</ul>\n<h2 id=\"-개선점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%EC%A0%90\" aria-label=\" 개선점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🟡 개선점</h2>\n<ul>\n<li>\n<p>운동을 못했다.</p>\n<blockquote>\n<p>내일부터는 저녁 6시에 일정이 끝나면 운동하는 시간을 1시간 가져야겠다.</p>\n</blockquote>\n</li>\n<li>\n<p>알고리즘 문제를 풀다보니 계획했던 개인공부를 못끝냈다.</p>\n<blockquote>\n<p>일정 시간을 정해두고 넘어가면 다른 공부로 넘어가자!</p>\n</blockquote>\n</li>\n</ul>","frontmatter":{"date":"February 15, 2022","title":"TIL-220215","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/02/2022-02-15-til/"}},"prev":{"id":"44f92753-ddc5-5425-8c48-e7b09117fec8","html":"<h2 id=\"-학습-과정\" style=\"position:relative;\"><a href=\"#-%ED%95%99%EC%8A%B5-%EA%B3%BC%EC%A0%95\" aria-label=\" 학습 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👨‍💻 학습 과정</h2>\n<h3 id=\"mvc-패턴\" style=\"position:relative;\"><a href=\"#mvc-%ED%8C%A8%ED%84%B4\" aria-label=\"mvc 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 패턴</h3>\n<p>MVC패턴이 웹에서 기본적으로 쓰이는 디자인 패턴이라고 들은 이후부터 모든 프로젝트는 MVC 패턴을 적용해서 만들어왔다.\n패키지는 분명 Model, View, Controller로 나눠서 만들었지만 제대로 사용하고 있는지에 대한 확신이 없어서 <strong>헤드퍼스트 디자인 패턴책</strong>과 <strong>우테코 테코톡</strong>을 보면서 다시한번 학습하는 시간을 가졌다.</p>\n<p>이전까지 뷰는 컨트롤러, 모델에 대한 의존성이 없어야한다고 알고 있었다. 그래서 항상 모델로부터 받아온 값을 컨트롤러에서 String 타입으로 변환해서 뷰에게 전달했다. 코드를 작성하면서도 이렇게 되면 뷰에서는 받은 String을 println으로 출력하는 일밖에 안하는데 굳이 클래스까지 따로 만들어야하나라는 의문이 있었는데 다시 학습하면서 내가 잘못 알고 있었다는것을 발견했다.</p>\n<blockquote>\n<p><strong>뷰는 모델에 대한 의존성을 가지며</strong>, 모델의 데이터를 받을때는 <strong>사용자별로 다르게 보여줘야하는 데이터</strong>만 받아야한다.</p>\n</blockquote>\n<p>이 내용을 듣고보니 너무 당연한 이야기였다. 뷰에서 모델에 대한 의존성조차 가지지 않으면, 동일하게 보여줘야 하는 내용도 컨트롤러 혹은 모델에서 들고 있어야한다. (실제로 그동안 미션에서도 모델에서 들고 있도록 짰다 😱)</p>\n<p>mvc패턴을 안다고 생각했는데 전혀 모르고 있었다..ㅎㅎ 한번 학습할때 꼼꼼하게 학습하자!</p>\n<h3 id=\"nextint와-nextline\" style=\"position:relative;\"><a href=\"#nextint%EC%99%80-nextline\" aria-label=\"nextint와 nextline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nextInt와 nextLine</h3>\n<p>Scanner의 nextInt 메서드를 사용하게 되면 사용자로부터 정수값을 입력받게 되는데, 이때 사용자가 입력 후 엔터를 누르게 된다. 그럼 해당 정수만 받고, 엔터는 다음 입력에게 넘어간다.\nnextInt를 사용한 뒤 다른 입력을 받지 않으면 큰 문제가 되지 않겠지만, 이후에 <strong>nextLine()으로 입력값을 받게 되는 경우 이전에 있던 엔터(개행문자)가 입력값으로 넘어가게 되서 의도한 대로 앱이 동작하지 않는다</strong>.</p>\n<ul>\n<li>분명 공부했던 부분인데 실제 내 코드에서는 해당 이유 때문인걸 못찾아서 오랜시간 헤맸다. 제리 덕분에 해결!</li>\n</ul>\n<h2 id=\"️-beclass-1주차-마무리\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-beclass-1%EC%A3%BC%EC%B0%A8-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"️ beclass 1주차 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙇🏻‍♂️ BEClass 1주차 마무리</h2>\n<p>이번주는 제리, 산토리, 새미, 테리, 휘, 샤인과 같은 팀이였다. 이번주에는 서로 막히는 부분들이 생기면 그때그때 질문할 수 있는 분위기가 형성되어서 너무 좋았다. 그룹리뷰 시간을 통해서는 서로의 코드만 공유하는게 아닌, <strong>각자가 접근한 방식, 고민한 부분들 혹은 함께 이야기 나눠보고 싶은 부분들</strong>을 공유해서 많이 배울 수 있었던것 같다. 말을 너무 잘하시는분들 사이에 있어서 덕을 많이 봤다. (다들 감사합니다 😃)</p>\n<p>이번주부터 본격적으로 자바를 사용하는 미션들이 주어졌다. Next-Step을 통해 들었던 JavaPlayground with TDD 강의의 미션 방식들과 매우 흡사했고, 첫주라서 그런지 난이도 또한 그렇게 어렵지 않았다.<br>\n자연스럽게 2달전의 나와 현재 나의 모습을 비교해보게 되었다.</p>\n<ol>\n<li>\n<p>이전에는 각각의 객체가 어떤 책임을 가져야 하는가에 대해서는 깊이 고민하지 않았었다.</p>\n<blockquote>\n<p>이번에는 나름(?) 각 객체가 가져야 하는 책임들에 대해서 고민하면서 코드를 작성했다.<br>\n<strong>2달전보다 객체지향에 대해 더 생각하며 코드를 작성하게 되었다.</strong></p>\n</blockquote>\n</li>\n<li>\n<p>패키지 구조와 설계에 정해진 답이 있다고 생각했다. 그래서 지인으로부터 코드리뷰를 받을 때, 계속 정답을 찾으려고 했다.</p>\n<blockquote>\n<p>설계에 정해진 답은 없다. 물론 더 좋은건 있겠지만 각 애플리케이션마다 다르고, 개발자마다 다르다. <strong>반복 수련(연습)을 통해서 좋은 설계에 대한 기준을 찾아가자.</strong></p>\n</blockquote>\n</li>\n<li>\n<p>자바에 대해 모르는게 너무 많았다.</p>\n<blockquote>\n<p>이것이 자바다와 자바의 정석을 읽었고, <strong>자바에 대해 더 자세히 알게 되었다</strong>. (그래도 실수가 계속 나온다..)</p>\n</blockquote>\n</li>\n</ol>\n<p>작은 변화일지 몰라도 이전보다 나아졌으니 만족한다. 그리고 5개월 뒤면 더 많은 변화가 생길거라고 생각한다.</p>","frontmatter":{"date":"February 18, 2022","title":"TIL-220218","categories":"TIL","author":"포키","emoji":"📝"},"fields":{"slug":"/til/02/2022-02-18-til/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/til/02/2022-02-16-til/","nextSlug":"/til/02/2022-02-15-til/","prevSlug":"/til/02/2022-02-18-til/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}
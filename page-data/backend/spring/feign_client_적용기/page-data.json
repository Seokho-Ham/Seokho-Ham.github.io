{"componentChunkName":"component---src-templates-blog-template-js","path":"/backend/spring/feign_client_적용기/","result":{"data":{"cur":{"id":"c41f344c-c62e-5e44-b41d-f1e3dc43e641","html":"<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>현재 진행하고 있는 <a href=\"https://github.com/jjik-muk/sikdorak\">식당 리뷰 sns 프로젝트</a>에서 유저 로그인 기능의 구현을 담당하고 있다.</p>\n<p>카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http 요청을 보내기 위해서는 클라이언트 객체를 사용해야했고 흔히 알고 있는 <strong>RestTemplate</strong>과 <strong>WebClient</strong>를 후보에 두고 고민하고 있었다.\n그러던 중 쿠킴의 소개로 <strong>Feign Client</strong>의 존재를 알게 되었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8099416e-a8ab-4a7a-9dfa-fae7a93db4ac\" width=\"400\">\n<hr>\n<h2 id=\"-feign-client란\" style=\"position:relative;\"><a href=\"#-feign-client%EB%9E%80\" aria-label=\" feign client란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 Feign Client란?</h2>\n<p>Feign Client란 Netflix에서 개발한 Http Client다.<br>\n(HttpClient는 Http 요청을 간편하게 만들어서 보낼 수 있도록 돕는 객체라고 생각하면 될것 같다.)<br>\n처음에는 Netflix에서 자체적으로 개발을 진행했지만 현재는 오픈소스로 전환했으며 SpringCloud 프레임워크의 프로젝트 중 하나로 들어가있다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>SpringMvc에서 제공되는 어노테이션을 그대로 사용할 수 있다. (Spring Cloud의 starter-openfeign을 사용할 경우)</li>\n<li>RestTemplate 보다 간편하게 사용할 수 있으며 가독성이 좋다.</li>\n<li>Feign Client를 사용한 통합 테스트가 비교적 간편하다.</li>\n<li>요청에 대한 커스텀이 간편하다.<br>\nex) 요청이 실패했을때 몇초 간격으로 몇번 재요청을 보낼것인지를 구체적으로 정할 수 있다.</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>동기적으로 동작한다. 즉, 하나의 요청이 끝나야 다음 동작이 가능하다.<br>\n(이건 비동기적으로 동작해야하는 경우 단점이 될 수 있을것 같다.)</li>\n</ul>\n<blockquote>\n<p><strong>우리 서비스에서는 사용자 로그인 API에서만 사용하기 때문에 비동기가 지원될 필요가 없다고 판단했고<br>\nFeign Client를 도입해보기로 결정했다.</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 프로젝트에 적용</h2>\n<p>FeignClient를 사용하기 위해 먼저 build.gradle에 관련 의존성을 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//프로젝트에서 사용한 버전 정보</span>\nspring<span class=\"token operator\">-</span>boot <span class=\"token operator\">:</span> <span class=\"token number\">2.7</span><span class=\"token number\">.1</span>\nspring<span class=\"token operator\">-</span>cloud <span class=\"token operator\">:</span> <span class=\"token number\">2021.0</span><span class=\"token number\">.3</span>\nspring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>openfeign <span class=\"token operator\">:</span> <span class=\"token number\">3.1</span><span class=\"token number\">.3</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ext <span class=\"token punctuation\">{</span>\n\tspringCloudVersion <span class=\"token operator\">=</span> '<span class=\"token number\">2021.0</span><span class=\"token number\">.3</span>'\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\n\ndependencyManagement <span class=\"token punctuation\">{</span>\n\timports <span class=\"token punctuation\">{</span>\n\t\tmavenBom <span class=\"token string\">\"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\ndependencies <span class=\"token punctuation\">{</span>\n\timplementation 'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign'\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><strong>ext</strong> : gradle 내에서 사용할 변수를 설정할 수 있다. 여기서는 springCloudVersion을 변수로 관리하도록 했다.</li>\n<li><strong>dependencyManagement</strong> : 사용할 의존성의 버전을 명시해두면 dependencies에서 실제 의존성을 작성할때 버전을 따로 작성하지 않아도 위에 명시된 버전으로 가져온다.</li>\n</ul>\n<p>의존성을 가져온 뒤 Feign Client를 사용하여 API 호출을 담당할 클라이언트 인터페이스를 만들었다.<br>\n만드는 방법은 간단한데 클라이언트를 인터페이스로 만들고 내부에 호출할 메서드만 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//FeignClient를 사용한 코드</span>\n\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://oauth-server.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"grant_type\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"redirect_uri\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>@FeignClient</strong> : 앱이 런타임 시 해당 어노테이션이 붙은 인터페이스를 토대로 실제 구현체를 만든다.\n<ul>\n<li>name : 실제 구현체가 Application Context에 빈으로 등록될때 이름으로 사용된다.</li>\n<li>url : 요청을 보낼 엔드포인트를 의미한다.</li>\n</ul>\n</li>\n<li><strong>@PostMapping</strong> : 해당 HttpMethod로 요청을 전송한다.</li>\n<li><strong>@RequestParam</strong> : 요청 시 함께 보낼 파라미터들 설정한다.\n<ul>\n<li>메서드의 파라미터에 @RequestParam, @RequestHeader 등의 어노테이션을 사용하지 않으면 기본적으로 요청의 Body에 파리미터의 값들이 들어간다.</li>\n</ul>\n</li>\n</ul>\n<p>코드를 작성하고나니 의문이 생겼다.</p>\n<blockquote>\n<p><strong>어떻게 SpringMvc의 어노테이션을 사용할 수 있는걸까?</strong></p>\n</blockquote>\n<p>찾아보니 FeignClient는 빈으로 생성될 때 설정된 configuration 을 읽어서 생성되는데 configuration 내부에는<br>\nClient 생성 시 사용할 Decoder, Encoder, Logger, Contract 등을 빈으로 등록하는 코드가 담겨있었다.</p>\n<p>이때 Client에 따로 Configuration 설정을 해주지 않으면 디폴트인 <strong>FeignClientsConfiguration</strong> 를 사용해서 생성하는데 default로 적용된 Contract는 SpringMvcContract였고 덕분에 SpringMvc의 어노테이션을 사용할 수 있었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/70687782-c66c-4412-80a9-e8b3126a1e45\" width=\"1000\">\n<ul>\n<li>decoder, encoder, logger도 모두 Spring이 사용하는 객체들을 사용하도록 되어있다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/317c2534-6f7c-46b2-9d71-53731eaed5bb\" width=\"600\">\n<p>이후 서비스의 로직에서는 만든 클라이언트 객체를 빈으로 주입받아 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OAuthTokenClient</span> oAuthTokenClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtToken</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthTokenResponse</span> oAuthTokenResponse <span class=\"token operator\">=</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> oAuthTokenClient<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getGrantType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getClientId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getRedirectUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>FeignClient는 SpringBootApplication이 실행될때 @FeignClient 어노테이션이 붙은 파일들을 읽어서 구현체를 만들기 때문에 앱 구동시 어노테이션을 읽을 수 있게 @EnableFeignClients 어노테이션을 붙여주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 위의 설정을 마치고 실제 OAuth 서버로 요청을 보냈을때의 요청/응답 로그다.<br>\n해당 로그가 출력되려면 프로젝트의 로깅 레벨은 DEBUG 로, FeignClient의 로깅 레벨은 FULL로 설정되어 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//application.yml</span>\nlogging<span class=\"token operator\">:</span>\n  level<span class=\"token operator\">:</span>\n    com<span class=\"token punctuation\">.</span>project<span class=\"token operator\">:</span> debug\n\nfeign<span class=\"token operator\">:</span>\n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        loggerLevel<span class=\"token operator\">:</span> FULL</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//요청</span>\n---> POST http<span class=\"token operator\">:</span><span class=\"token comment\">//oauth-server/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code HTTP/1.1</span>\nContent-Type<span class=\"token operator\">:</span> application/x-www-form-urlencoded;charset=utf<span class=\"token number\">-8</span>\n---> END HTTP (<span class=\"token number\">0</span>-byte body)\n\n<span class=\"token comment\">// 응답</span>\n&lt;--- HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK (131ms)\naccess-control-allow-headers<span class=\"token operator\">:</span> Authorization<span class=\"token punctuation\">,</span> KA<span class=\"token punctuation\">,</span> Origin<span class=\"token punctuation\">,</span> X-Requested-With<span class=\"token punctuation\">,</span> Content-Type<span class=\"token punctuation\">,</span> Accept\naccess-control-allow-methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span> POST<span class=\"token punctuation\">,</span> OPTIONS\naccess-control-allow-origin<span class=\"token operator\">:</span> *\ncache-control<span class=\"token operator\">:</span> no-cache<span class=\"token punctuation\">,</span> no-store<span class=\"token punctuation\">,</span> max-age=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> must-revalidate\nconnection<span class=\"token operator\">:</span> keep-alive\ncontent-type<span class=\"token operator\">:</span> application/json;charset=utf<span class=\"token number\">-8</span>\ndate<span class=\"token operator\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> Aug <span class=\"token number\">2022</span> <span class=\"token number\">02</span><span class=\"token operator\">:</span><span class=\"token number\">48</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> GMT\nexpires<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\ntransfer-encoding<span class=\"token operator\">:</span> chunked\nx-content-type-options<span class=\"token operator\">:</span> nosniff\nx-frame-options<span class=\"token operator\">:</span> DENY\nx-xss-protection<span class=\"token operator\">:</span> <span class=\"token number\">1</span>; mode=block\nresponse-body<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n&lt;--- END HTTP (<span class=\"token number\">190</span>-byte body)</code></pre></div>\n<p>아래는 추가적으로 해준 설정들이다.</p>\n<h2 id=\"-커스텀한-configuration-설정\" style=\"position:relative;\"><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\" aria-label=\" 커스텀한 configuration 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 커스텀한 Configuration 설정</h2>\n<h3 id=\"1-공통-헤더적용을-위한-configuration\" style=\"position:relative;\"><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"1 공통 헤더적용을 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 공통 헤더적용을 위한 Configuration</h3>\n<ul>\n<li>요청에 content-type 헤더가 기본적으로 필요해서 configuration 파일을 만들었고 Client 객체에 적용했다.</li>\n<li>요청을 가로채서 헤더를 세팅하는 requestInterceptor를 빈으로 등록하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientHeaderConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_FORM_URLENCODED_VALUE <span class=\"token operator\">+</span> <span class=\"token string\">\";charset=utf-8\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestInterceptor</span> <span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> requestTemplate <span class=\"token operator\">-></span> requestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-feignclient-exception을-서비스-예외로-처리하기-위한-configuration\" style=\"position:relative;\"><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"2 feignclient exception을 서비스 예외로 처리하기 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</h3>\n<ul>\n<li>Feign Client를 통한 요청이 실패했을 경우 OAuthServer에서의 예외가 발생했다는 메세지를 사용자에게 전달하고 싶었고, 커스텀한 ErrorDecoder를 빈으로 등록하는 configuration을 Client 객체에 적용했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ErrorDecoder</span> <span class=\"token function\">decoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 요청이 성공하지 못했습니다. requestUrl: {}, requestBody: {}, responseBody: {}\"</span><span class=\"token punctuation\">,</span>\n                    methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuthServerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>위의 Configuration들을 적용한 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//적용</span>\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-server\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">FeignClientHeaderConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 주의할 점으로는 configuration 파일에 <strong>@Configuration 어노테이션을 붙이는것을 지양</strong>해야한다.\n해당 어노테이션을 붙이게 되면 컴포넌트 스캔이 발생하는 시점에 빈으로 등록되어 모든 FeignClient에 적용된다.</p>\n<ul>\n<li>현재 서비스에서는 모든 요청에 대해 적용할 decoder라서 어노테이션을 붙일까 고민했지만 변경사항이 발생할 수 있기에 직접 configuration을 설정해줬다.</li>\n</ul>\n<h3 id=\"3-url을-applicationproperties에서-관리-후-적용\" style=\"position:relative;\"><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\" aria-label=\"3 url을 applicationproperties에서 관리 후 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. url을 application.properties에서 관리 후 적용</h3>\n<p>url을 하드코딩 하기보다는 프로퍼티에서 관리하는것이 변경이 발생했을때 변경사항을 적용하기 편리하다.</p>\n<p>아래와 같은 방식으로 작성하면 application.properties에서 해당 프로퍼티를 읽어온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${oauth.kakao.service.token_url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 마무리</h2>\n<p>이번에 FeignClient를 어노테이션만으로 요청에 필요한 모든 설정을 마칠 수 있다는 점에서 이전에 RestTemplate, WebClient를 사용했을때와 비교해 너무 간편하다는 느낌을 받았다.\n물론 추가적인 설정 없이는 비동기적으로 동작하지 않기에 WebClient를 대체할 수는 없지만 특별히 비동기적인 동작이 필요없다면 FeignClient를 사용하지 않을까 싶다.</p>\n<p>또한 WireMock을 함께 사용하면 테스트도 쉽게 할 수 있는데 이 내용은 다음 글에서 이어서 작성하려고 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-feign-client%EB%9E%80\">💫 Feign Client란?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\">💫 프로젝트에 적용</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\">🛠 커스텀한 Configuration 설정</a></p>\n<ul>\n<li><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\">1. 공통 헤더적용을 위한 Configuration</a></li>\n<li><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\">2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</a></li>\n<li><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\">3. url을 application.properties에서 관리 후 적용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">💫 마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"서론 현재 진행하고 있는 식당 리뷰 sns 프로젝트에서 유저 로그인 기능의 구현을 담당하고 있다. 카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http 요청을 보내기 위해서는 클라이언트 객체를 사용해야했고 흔히 알고 있는 RestTemplate과 WebClient를 후보에 두고 고민하고 있었다.\n그러던 중 쿠킴의 소개로 Feign Client의 존재를 알게 되었다. 💫 Feign Client란? Feign Client란 Netflix에서 개발한 Http Client다. (HttpClient는 Http 요청을 간편하게 만들어서 보낼 수 있도록 돕는 객체라고 생각하면 될것 같다.) 처음에는 Netflix에서 자체적으로 개발을 진행했지만 현재는 오픈소스로 전환했으며 SpringCloud 프레임워크의 프로젝트 중 하나로 들어가있다. 장점 SpringMvc에서 제공되는 어노테이션을 그대로 사용할 수 있다. (Spring Cloud의 starter-openfeign을 사용할 경…","frontmatter":{"date":"August 13, 2022","title":"프로젝트에 Feign Client를 적용해보자","categories":"Spring","author":"@seokhoho","emoji":"🌱"},"fields":{"slug":"/backend/spring/feign_client_적용기/"}},"next":{"id":"69be179f-1938-5700-ae77-22978822920c","html":"<p>백엔드 개발을 공부하기 위해 올해 1월 3일부터 코드스쿼드 백엔드 코스에 참여했고 7월 1일부로 끝이났다.\n🤒코로나 이슈😷로 조금 늦은 회고를 작성해본다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/4ce1b991-1087-4e94-9049-944c30bf06fa\" width=\"600px\" height=\"800px\">\n<hr>\n<h2 id=\"-코드스쿼드-이전\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C-%EC%9D%B4%EC%A0%84\" aria-label=\" 코드스쿼드 이전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💩 코드스쿼드 이전</h2>\n<p>20년도 3월부터 8월까지 다른 부트캠프에서 6개월짜리 웹 풀스택 과정을 수강했고, 이때 개발을 제대로 접해보게 되었다. 시작할때까지만 하더라도 해당 과정이 끝나면 개발자로 취업할 준비가 되겠지라는 생각을 가지고 있었다.</p>\n<p>자바스크립트를 시작으로 리액트, 노드를 배웠고 프로젝트까지 했지만 수료 후 스스로를 돌아보니 뭐 하나 제대로 알고 있는게 없었다. 또한 서버개발자를 생각하고 준비했지만, 내가 경험한 내용들은 프론트에서 사용되는 스택에 더 집중되어 있다고 생각되어서 프론트 개발자를 목표로 바꾸기로 결심하고 1년간 개인 공부를 진행했다.</p>\n<p>개인 공부를 했다고 하지만 지금 돌아보면 공부를 정말 안했다. 서버와 통신해서 데이터를 요청하고 받아오는 작업은 그나마 할만했지만, 뷰를 그리는 작업, 특히 css는 작업은 정말 재미가 없었고 학습에 대한 의지도 안생겼다. 중간중간 지금이라도 자바를 공부할까 싶었지만 너무 늦었다는 생각에 의미없이 시간만 보냈던것 같다.</p>\n<p>수료한지 1년이 되었을 시점에는 더이상 이대로는 안되겠다는 생각이 들었고, 9월부터 1달동안 고민끝에 자바와 스프링부터 다시 공부해서 백엔드 개발자가 되기로 결심했다. 1년간 확실해진건 나는 강제성과 함께 하는 사람들이 어느정도 있어야 더 집중을 잘한다는 사실이었다. 그래서 바로 교육과정을 알아보았고, 우테코와 코드스쿼드 딱 두군데를 목표로 잡고 준비했다.</p>\n<p>코드스쿼드에 지원한 가장 큰 이유는 두가지였다.</p>\n<ul>\n<li>교육 일정에서 기본기를 중요시하는 느낌을 받음.</li>\n<li>시험을 통해 선발하기에 열정있는 사람들이 모일것이라고 예상됨.\n우테코는 1차에서 광탈했지만, 코드스쿼드는 다행히 합격할 수 있었다.\n(이때는 1차, 2차 결과를 기다리며 혹시 떨어지면 어떻게 해야하나 생각하며 잠도 제대로 못잤었던것 같다.😭)</li>\n</ul>\n<h2 id=\"-코드스쿼드--함께-자라기\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C--%ED%95%A8%EA%BB%98-%EC%9E%90%EB%9D%BC%EA%B8%B0\" aria-label=\" 코드스쿼드  함께 자라기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤝 코드스쿼드 == 함께 자라기</h2>\n<p>코드스쿼드 과정을 한마디로 표현하면 함께 자라기 가 될 것 같다.</p>\n<h3 id=\"-지식과-경험의-공유-\" style=\"position:relative;\"><a href=\"#-%EC%A7%80%EC%8B%9D%EA%B3%BC-%EA%B2%BD%ED%97%98%EC%9D%98-%EA%B3%B5%EC%9C%A0-\" aria-label=\" 지식과 경험의 공유  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💭 지식과 경험의 공유 📝</h3>\n<blockquote>\n<p>다들 질문하는걸 부끄러워하지 않고, 도와주는것을 주저하지 않는다.</p>\n</blockquote>\n<p>멤버들은 미션을 진행하면서 새롭게 알게된 내용 혹은 삽질했던 경험을 슬랙이나 디코에 공유함으로써 서로에게 도움을 준다. 미션 진행 중 막히거나 고민되는 부분은 공개된 자리에서 서로의 생각을 나누며 해결책을 찾는다. 더 놀라운건 기수에 상관없이 이미 수료한 이전기수분들도 기꺼이 도와준다. 이런 환경은 신기하게도 점점 코드스쿼드 내부의 문화로 정착되어 갔다.</p>\n<p>물론 나는 어려워했다. 내 질문은 괜히 별거 아닌거같고, 내 답변에 대한 자신감이 없었다.\n사람들에게 도움만 많이 받은것 같아서 이 부분은 아쉬움이 많이 남는 부분이다.</p>\n<h3 id=\"-협업-\" style=\"position:relative;\"><a href=\"#-%ED%98%91%EC%97%85-\" aria-label=\" 협업  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🕺🏻 협업 💃🏻</h3>\n<p>나는 의도하지 않았지만 신기하게도 4번의 프로젝트 모두 페어 프로그래밍으로 진행하게 됐다. 또한, 리뷰어 운도 나쁘지 않아서 대부분 좋은 분들을 만났다. 덕분에 여러 멤버들의 코딩 스타일을 접했고, 각자가 가진 강점들을 배웠다. 또한 실시간으로 코드에 대해 의견을 나누는 경험 또한 남들보다 많이 할 수 있었다.</p>\n<p>물론 페어 프로그래밍은 계속 말을 해야하기 때문에 에너지 소모가 크고 개발 속도가 느리다. 하지만 혼자라면 놓쳤을 부분들을 놓치지 않을 수 있었고 가독성 좋은 변수명, 객체지향적인 코드인지 등에 대해 의견을 주고받으며 더 나은 코드를 작성할 수 있었다. 또한 서로가 모르는 부분들을 페어 덕분에 알게 되는 경우도 많았다.</p>\n<p>현업에서는 일을 분담해서 개인적으로 개발을 진행하는 경우가 대부분일테니 페어 프로그래밍을 할 수 있을때 최대한 많이 경험할 수 있어서 감사하다. 4번의 프로젝트동안 함께해준 데이브, 얀, 나단, 산토리에게 무한 감사를 🙇🏻‍♂️</p>\n<p>코드스쿼드의 경험 덕분에 내가 꿈꾸는 개발자의 모습에 한가지가 더 추가됐다.</p>\n<blockquote>\n<p><strong>같이 일하고 싶은 사람. 긍정적인 영향을 주는 사람.</strong></p>\n</blockquote>\n<p>물론 현재는 많이 부족하지만, 내년에는 원하는 모습에 더 가까워진 사람이 됐으면 한다. 💪🏻</p>\n<h2 id=\"-그래서-현재의-나는\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%9E%98%EC%84%9C-%ED%98%84%EC%9E%AC%EC%9D%98-%EB%82%98%EB%8A%94\" aria-label=\" 그래서 현재의 나는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 그래서 현재의 나는?</h2>\n<h3 id=\"-내가-무엇을-해야하는지-안다\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EC%A7%80-%EC%95%88%EB%8B%A4\" aria-label=\" 내가 무엇을 해야하는지 안다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛣 내가 무엇을 해야하는지 안다.</h3>\n<p>이전에는 시간에 쫓기며 누군가가 개척해놓은 개발자가 되는 지름길을 찾아서 쫓아 가려고 했다.\n그리고 내가 현재 학습하는 길이 혹시나 돌아가는 길이면 어쩌지라는 생각에 주변에 물어보며 내가 제대로 가고 있는지에 대해 확신을 구하려고 했다.</p>\n<blockquote>\n<p><strong>이제는 내가 가는 길에 확신이 있다.</strong></p>\n</blockquote>\n<p>취업에 대한 근자감이 있는건 아니다.\n하지만 절대 지름길은 없다는걸 깨달았다. 그리고 지금 내가 어떤것이 부족한지, 어떻게 채워나가야할지를 안다. 더 나아가 꾸준히 채워나간다면 좋은 결과가 뒤따라올것이라는 사실까지!</p>\n<h3 id=\"-내-생각을-말하는게-조금-더-편해졌다\" style=\"position:relative;\"><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%ED%8E%B8%ED%95%B4%EC%A1%8C%EB%8B%A4\" aria-label=\" 내 생각을 말하는게 조금 더 편해졌다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🗣 내 생각을 말하는게 조금 더 편해졌다.</h3>\n<p>나는 원래 내 의견을 말하는걸 잘 못한다. 주변 사람들 눈치를 많이 보는 성격이기도 하고, 틀린 의견을 내는것을 두려워하는 성격이다. 하지만 6개월동안 좋은 환경에 있다보니 조금의 뻔뻔함(?)이 생겼다.</p>\n<p><strong>틀리면 고치면 되지</strong> 라는 마인드가 탑재됐다.\n경험상 내가 틀렸던 내용들은 쉽게 기억에서 잊혀지지 않는다. 또한 개발자라는 직업을 가진 사람들은 이런걸로 문제삼지 않는다. 오히려 제대로 모르는 내용을 가지고 조용히 있는게 훗날 더 큰 문제를 만든다.\n(물론 말도 안되는 헛소리라면 얘기가 달라지겠지만;;)</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔚 마무리</h2>\n<p>6개월이 지난 지금 “개발자로 취업할 준비가 됐냐” 라고 묻는다면 “아직?”이라고 답할것이다.\n하지만 분명 발전이 있었고 얻은것들 또한 명확하다.</p>\n<ul>\n<li>어떤 개발자가 되고 싶은지가 명확해졌다.</li>\n<li>좋은 개발자가 되기 위해 필요한 기초체력을 키웠다.</li>\n<li>함께할 좋은 동료들이 생겼다.\n남은 하반기동안은 그동안 배운것들을 잘 갈고 닦아서 스스로를 당당하게 개발자라고 소개할 수 있었으면 좋겠다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/0d596eeb-a008-4bf9-ab17-8128a7029e3d\" width=\"6000px\"></th>\n<th><img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/b727c275-3ec5-48d1-a30f-9002b69c83bd\" width=\"3400px\"></th>\n</tr>\n</thead>\n</table>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C-%EC%9D%B4%EC%A0%84\">💩 코드스쿼드 이전</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BD%94%EB%93%9C%EC%8A%A4%EC%BF%BC%EB%93%9C--%ED%95%A8%EA%BB%98-%EC%9E%90%EB%9D%BC%EA%B8%B0\">🤝 코드스쿼드 == 함께 자라기</a></p>\n<ul>\n<li><a href=\"#-%EC%A7%80%EC%8B%9D%EA%B3%BC-%EA%B2%BD%ED%97%98%EC%9D%98-%EA%B3%B5%EC%9C%A0-\">💭 지식과 경험의 공유 📝</a></li>\n<li><a href=\"#-%ED%98%91%EC%97%85-\">🕺🏻 협업 💃🏻</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B7%B8%EB%9E%98%EC%84%9C-%ED%98%84%EC%9E%AC%EC%9D%98-%EB%82%98%EB%8A%94\">🤔 그래서 현재의 나는?</a></p>\n<ul>\n<li><a href=\"#-%EB%82%B4%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94%EC%A7%80-%EC%95%88%EB%8B%A4\">🛣 내가 무엇을 해야하는지 안다.</a></li>\n<li><a href=\"#-%EB%82%B4-%EC%83%9D%EA%B0%81%EC%9D%84-%EB%A7%90%ED%95%98%EB%8A%94%EA%B2%8C-%EC%A1%B0%EA%B8%88-%EB%8D%94-%ED%8E%B8%ED%95%B4%EC%A1%8C%EB%8B%A4\">🗣 내 생각을 말하는게 조금 더 편해졌다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🔚 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 10, 2022","title":"2022년 코드스쿼드 회고","categories":"Review","author":"@seokhoho","emoji":"🌱"},"fields":{"slug":"/review/코드스쿼드 회고/"}},"prev":{"id":"3b807c7e-94d4-56bf-a827-5a839084efa3","html":"<blockquote>\n<p><strong>지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다.</strong><br>\n<strong>해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다.</strong></p>\n</blockquote>\n<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.\n저는 OAuth 로그인 기능을 맡았고 해당 기능에 대한 인수테스트를 작성하는 과정에서 “어떻게하면 외부 api에 대해 실제 상황에 가까운 테스트를 할 수 있을지”에 대해 고민하게 되었습니다.</p>\n<p>일반적으로 사용되는 Mockito를 사용하여 테스트를 진행할 수 있었지만 이 방식은 한계가 있다고 느꼈습니다.\n외부 api를 사용할때는 http 요청과 응답, 응답값에 대한 역직렬화 과정 등이 발생하는데 Mockito는 단순히 목객체를 주입받아서 메서드를 호출하는 방식으로 동작하기 때문입니다.<br>\n그렇다고 실제 카카오 Api를 호출해서 테스트할수도 없는 노릇이었습니다. 그렇게 되면 카카오 서버의 상태에 따라 테스트의 성공 여부가 달려있게 되기 때문입니다.</p>\n<p>그래서 다른 방법을 찾던 중 WireMock이라는 라이브러리를 발견하게 되었습니다.</p>\n<hr>\n<h2 id=\"-wiremock이란\" style=\"position:relative;\"><a href=\"#-wiremock%EC%9D%B4%EB%9E%80\" aria-label=\" wiremock이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 Wiremock이란?</h2>\n<p><strong>Wiremock이란 Http 기반의 api 서비스를 모킹하는 용도로 제공되는 목 서버 라이브러리입니다.</strong><br>\n여기서 중요한것은 목서버를 제공한다는 점인데, 지정해둔 uri로 요청이 발생할 경우 목서버로 http 요청이 발생하고 미리 지정해둔 형태의 http 응답이 반환됩니다.</p>\n<p>Wiremock을 사용하게 되면 실제 외부 api에 의존하지 않으면서 http 요청/응답을 통한 테스트가 가능해집니다.\n또한 외부 서버가 아닌 로컬에 서버를 띄워 사용하기 때문에 속도도 빠릅니다.\n이런 이유들로 현재 작성하는 테스트에 적용하기 적합하다고 판단되어 적용하게 되었습니다.</p>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 프로젝트에 적용</h2>\n<p>Wiremock은 2가지 방식으로 사용이 가능합니다.</p>\n<ul>\n<li>jar 파일을 받아서 독립적인 서버로 운영하는 방식</li>\n<li>build.gradle 의존성을 사용하여 JUnit 테스트에서만 운영하는 방식\n<ul>\n<li>이 방식을 사용하게 되면 JUnit이 Wiremock 서버의 생명주기를 관리합니다.\n현재 프로젝트에서는 OAuth 인수테스트에서만 사용하기 때문에 2번째 방법을 사용했으며 기본 wiremock 의존성이 아닌, spring-cloud에서 제공되는 의존성을 사용했습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-가장-먼저-buildgradle에-wiremock-관련-의존성을-추가했습니다\" style=\"position:relative;\"><a href=\"#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"1 가장 먼저 buildgradle에 wiremock 관련 의존성을 추가했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// WireMock</span>\n    testImplementation <span class=\"token string\">\"org.springframework.cloud:spring-cloud-starter-contract-stub-runner\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-목-서버가-필요한-테스트-위에-autoconfigurewiremock-어노테이션을-붙여주었습니다\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"2 목 서버가 필요한 테스트 위에 autoconfigurewiremock 어노테이션을 붙여주었습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.</h3>\n<p>(해당 어노테이션을 목서버가 필요한 테스트 클래스 위해 붙여야 Application Context가 뜰때 목서버가 빈으로 등록됩니다.)</p>\n<ul>\n<li>랜덤한 포트를 사용하도록 하기 위해서 0으로 설정했습니다.\n<ul>\n<li>목서버의 포트는 default로 8080이 세팅되어 있으며 0으로 설정하면 랜덤한 포트를 사용합니다.</li>\n</ul>\n</li>\n<li>실제 feign client가 요청을 보내게 되는 uri를 목서버의 uri로 동적으로 변경하기 위해서 properties 설정을 바꾸어주었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigureWireMock</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@TestPropertySource</span><span class=\"token punctuation\">(</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"oauth.kakao.service.token_url=http://localhost:${wiremock.server.port}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"oauth.kakao.service.api_url=http://localhost:${wiremock.server.port}\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-다음으로는-요청이-들어올-path와-요청에-대한-http-응답을-지정해주었습니다\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"3 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.</h3>\n<p>기본적으로 wiremock은 src/test/resources/mappings 경로에 있는 json 파일을 읽어서 stub를 설정합니다.</p>\n<ul>\n<li>여기서 stub이란 http 요청 path와 그에 대한 http 응답을 설정해서 제공하는것을 의미합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"bodyPatterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"matchesJsonPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$.id\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"X-Application-Context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application:-1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 저는 목서버를 사용하는 곳에서 명시적으로 stub를 세팅해주기 위해 응답값만 json 파일로 만들어두고 OAuthMock이라는 객체를 만들어서 메서드 내에서 stub를 설정했습니다.</p>\n<ul>\n<li>응답값은 file:src/test/resources/payload 경로에 json 파일 형태로 만들었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//token-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//user-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"kakao_account\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"profile_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"profile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"thumbnail_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/.../img_110x110.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profile_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/dn/.../img_640x640.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"is_default_image\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_valid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_verified\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample@sample.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20~29\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1130\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 실제 stub를 세팅하는 코드입니다.<br>\n메서드 내에서 사용한 stubfor, post 등등의 메서드는 모두 WireMock 클래스에서 제공되는 메서드들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">aResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">equalTo</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">get</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">post</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">stubFor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">urlEqualTo</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthMocks</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-token-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2/user/me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-user-info-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-이후-실제-사용하는-테스트에서-oauthmock객체의-메서드를-사용해서-stub를-설정했습니다\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"4 이후 실제 사용하는 테스트에서 oauthmock객체의 메서드를 사용해서 stub를 설정했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@BeforeAll</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWireMockResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthMocks</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 순서대로 세팅을 마치고 테스트를 실행했을때 아래와 같은 로그가 찍힙니다.</p>\n<ul>\n<li>목서버로 온 http 요청</li>\n<li>요청에 일치하는 stub</li>\n<li>http 응답</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7effd444-26a5-4173-a21c-6d63ff862ae8\">\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>인수테스트는 사용자의 요청 흐름에 맞춰 테스트를 작성합니다.\n그렇기 때문에 실제 api 호출 시의 환경에 보다 가까운 테스트를 작성할 수 있어야 한다고 생각합니다.\n하지만 이때 로직에 외부 api가 껴있다면 테스트하기가 까다로워지는데 이런 어려움을 해결하기에 Wiremock은 좋은 선택이 될 수 있는것 같습니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-wiremock%EC%9D%B4%EB%9E%80\">💫 Wiremock이란?</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\">💫 프로젝트에 적용</a></p>\n<ul>\n<li><a href=\"#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.</a></li>\n<li><a href=\"#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.</a></li>\n<li><a href=\"#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.</a></li>\n<li><a href=\"#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 21, 2022","title":"테스트에서 Wiremock을 이용해서 외부 의존성 줄이기","categories":"Spring","author":"@seokhoho","emoji":"🌱"},"fields":{"slug":"/backend/spring/wiremock/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/backend/spring/feign_client_적용기/","nextSlug":"/review/코드스쿼드 회고/","prevSlug":"/backend/spring/wiremock/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}
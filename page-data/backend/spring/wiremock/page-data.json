{"componentChunkName":"component---src-templates-blog-template-js","path":"/backend/spring/wiremock/","result":{"data":{"cur":{"id":"3b807c7e-94d4-56bf-a827-5a839084efa3","html":"<blockquote>\n<p><strong>지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다.</strong><br>\n<strong>해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다.</strong></p>\n</blockquote>\n<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.\n저는 OAuth 로그인 기능을 맡았고 해당 기능에 대한 인수테스트를 작성하는 과정에서 “어떻게하면 외부 api에 대해 실제 상황에 가까운 테스트를 할 수 있을지”에 대해 고민하게 되었습니다.</p>\n<p>일반적으로 사용되는 Mockito를 사용하여 테스트를 진행할 수 있었지만 이 방식은 한계가 있다고 느꼈습니다.\n외부 api를 사용할때는 http 요청과 응답, 응답값에 대한 역직렬화 과정 등이 발생하는데 Mockito는 단순히 목객체를 주입받아서 메서드를 호출하는 방식으로 동작하기 때문입니다.<br>\n그렇다고 실제 카카오 Api를 호출해서 테스트할수도 없는 노릇이었습니다. 그렇게 되면 카카오 서버의 상태에 따라 테스트의 성공 여부가 달려있게 되기 때문입니다.</p>\n<p>그래서 다른 방법을 찾던 중 WireMock이라는 라이브러리를 발견하게 되었습니다.</p>\n<hr>\n<h2 id=\"-wiremock이란\" style=\"position:relative;\"><a href=\"#-wiremock%EC%9D%B4%EB%9E%80\" aria-label=\" wiremock이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 Wiremock이란?</h2>\n<p><strong>Wiremock이란 Http 기반의 api 서비스를 모킹하는 용도로 제공되는 목 서버 라이브러리입니다.</strong><br>\n여기서 중요한것은 목서버를 제공한다는 점인데, 지정해둔 uri로 요청이 발생할 경우 목서버로 http 요청이 발생하고 미리 지정해둔 형태의 http 응답이 반환됩니다.</p>\n<p>Wiremock을 사용하게 되면 실제 외부 api에 의존하지 않으면서 http 요청/응답을 통한 테스트가 가능해집니다.\n또한 외부 서버가 아닌 로컬에 서버를 띄워 사용하기 때문에 속도도 빠릅니다.\n이런 이유들로 현재 작성하는 테스트에 적용하기 적합하다고 판단되어 적용하게 되었습니다.</p>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 프로젝트에 적용</h2>\n<p>Wiremock은 2가지 방식으로 사용이 가능합니다.</p>\n<ul>\n<li>jar 파일을 받아서 독립적인 서버로 운영하는 방식</li>\n<li>build.gradle 의존성을 사용하여 JUnit 테스트에서만 운영하는 방식\n<ul>\n<li>이 방식을 사용하게 되면 JUnit이 Wiremock 서버의 생명주기를 관리합니다.\n현재 프로젝트에서는 OAuth 인수테스트에서만 사용하기 때문에 2번째 방법을 사용했으며 기본 wiremock 의존성이 아닌, spring-cloud에서 제공되는 의존성을 사용했습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-가장-먼저-buildgradle에-wiremock-관련-의존성을-추가했습니다\" style=\"position:relative;\"><a href=\"#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"1 가장 먼저 buildgradle에 wiremock 관련 의존성을 추가했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// WireMock</span>\n    testImplementation <span class=\"token string\">\"org.springframework.cloud:spring-cloud-starter-contract-stub-runner\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-목-서버가-필요한-테스트-위에-autoconfigurewiremock-어노테이션을-붙여주었습니다\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"2 목 서버가 필요한 테스트 위에 autoconfigurewiremock 어노테이션을 붙여주었습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.</h3>\n<p>(해당 어노테이션을 목서버가 필요한 테스트 클래스 위해 붙여야 Application Context가 뜰때 목서버가 빈으로 등록됩니다.)</p>\n<ul>\n<li>랜덤한 포트를 사용하도록 하기 위해서 0으로 설정했습니다.\n<ul>\n<li>목서버의 포트는 default로 8080이 세팅되어 있으며 0으로 설정하면 랜덤한 포트를 사용합니다.</li>\n</ul>\n</li>\n<li>실제 feign client가 요청을 보내게 되는 uri를 목서버의 uri로 동적으로 변경하기 위해서 properties 설정을 바꾸어주었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigureWireMock</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@TestPropertySource</span><span class=\"token punctuation\">(</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"oauth.kakao.service.token_url=http://localhost:${wiremock.server.port}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"oauth.kakao.service.api_url=http://localhost:${wiremock.server.port}\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-다음으로는-요청이-들어올-path와-요청에-대한-http-응답을-지정해주었습니다\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"3 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.</h3>\n<p>기본적으로 wiremock은 src/test/resources/mappings 경로에 있는 json 파일을 읽어서 stub를 설정합니다.</p>\n<ul>\n<li>여기서 stub이란 http 요청 path와 그에 대한 http 응답을 설정해서 제공하는것을 의미합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"bodyPatterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"matchesJsonPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$.id\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"X-Application-Context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application:-1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 저는 목서버를 사용하는 곳에서 명시적으로 stub를 세팅해주기 위해 응답값만 json 파일로 만들어두고 OAuthMock이라는 객체를 만들어서 메서드 내에서 stub를 설정했습니다.</p>\n<ul>\n<li>응답값은 file:src/test/resources/payload 경로에 json 파일 형태로 만들었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//token-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//user-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"kakao_account\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"profile_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"profile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"thumbnail_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/.../img_110x110.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profile_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/dn/.../img_640x640.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"is_default_image\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_valid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_verified\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample@sample.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20~29\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1130\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 실제 stub를 세팅하는 코드입니다.<br>\n메서드 내에서 사용한 stubfor, post 등등의 메서드는 모두 WireMock 클래스에서 제공되는 메서드들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">aResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">equalTo</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">get</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">post</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">stubFor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">urlEqualTo</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthMocks</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-token-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2/user/me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_JSON_VALUE<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-user-info-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-이후-실제-사용하는-테스트에서-oauthmock객체의-메서드를-사용해서-stub를-설정했습니다\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"4 이후 실제 사용하는 테스트에서 oauthmock객체의 메서드를 사용해서 stub를 설정했습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@BeforeAll</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWireMockResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthMocks</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 순서대로 세팅을 마치고 테스트를 실행했을때 아래와 같은 로그가 찍힙니다.</p>\n<ul>\n<li>목서버로 온 http 요청</li>\n<li>요청에 일치하는 stub</li>\n<li>http 응답</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7effd444-26a5-4173-a21c-6d63ff862ae8\">\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>인수테스트는 사용자의 요청 흐름에 맞춰 테스트를 작성합니다.\n그렇기 때문에 실제 api 호출 시의 환경에 보다 가까운 테스트를 작성할 수 있어야 한다고 생각합니다.\n하지만 이때 로직에 외부 api가 껴있다면 테스트하기가 까다로워지는데 이런 어려움을 해결하기에 Wiremock은 좋은 선택이 될 수 있는것 같습니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-wiremock%EC%9D%B4%EB%9E%80\">💫 Wiremock이란?</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\">💫 프로젝트에 적용</a></p>\n<ul>\n<li><a href=\"#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.</a></li>\n<li><a href=\"#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-autoconfigurewiremock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.</a></li>\n<li><a href=\"#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.</a></li>\n<li><a href=\"#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-oauthmock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다. 해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다. 서론 이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.\n저는 OAuth 로그인 기능을 맡았고 해당 기능에 대한 인수테스트를 작성하는 과정에서 “어떻게하면 외부 api에 대해 실제 상황에 가까운 테스트를 할 수 있을지”에 대해 고민하게 되었습니다. 일반적으로 사용되는 Mockito를 사용하여 테스트를 진행할 수 있었지만 이 방식은 한계가 있다고 느꼈습니다.\n외부 api를 사용할때는 http 요청과 응답, 응답값에 대한 역직렬화 과정 등이 발생하는데 Mockito는 단순히 목객체를 주입받아서 메서드를 호출하는 방식으로 동작하기 때문입니다. 그렇다고 실제 카카오 Api를 호출해서 테스트할수도 없는 노릇이었습니다. …","frontmatter":{"date":"August 21, 2022","title":"테스트에서 Wiremock을 이용해서 외부 의존성 줄이기","categories":"Spring","author":"서코코","emoji":"🌱"},"fields":{"slug":"/backend/spring/wiremock/"}},"next":{"id":"a7653648-1f72-5136-bc7e-b05fbfc24a0e","html":"<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>현재 진행하고 있는 <a href=\"https://github.com/jjik-muk/sikdorak\">식당 리뷰 sns 프로젝트</a>에서 유저 로그인 기능의 구현을 담당하고 있다.</p>\n<p>카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http 요청을 보내기 위해서는 클라이언트 객체를 사용해야했고 흔히 알고 있는 <strong>RestTemplate</strong>과 <strong>WebClient</strong>를 후보에 두고 고민하고 있었다.\n그러던 중 쿠킴의 소개로 <strong>Feign Client</strong>의 존재를 알게 되었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8099416e-a8ab-4a7a-9dfa-fae7a93db4ac\" width=\"400\">\n<hr>\n<h2 id=\"-feign-client란\" style=\"position:relative;\"><a href=\"#-feign-client%EB%9E%80\" aria-label=\" feign client란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 Feign Client란?</h2>\n<p>Feign Client란 Netflix에서 개발한 Http Client다.<br>\n(HttpClient는 Http 요청을 간편하게 만들어서 보낼 수 있도록 돕는 객체라고 생각하면 될것 같다.)<br>\n처음에는 Netflix에서 자체적으로 개발을 진행했지만 현재는 오픈소스로 전환했으며 SpringCloud 프레임워크의 프로젝트 중 하나로 들어가있다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>SpringMvc에서 제공되는 어노테이션을 그대로 사용할 수 있다. (Spring Cloud의 starter-openfeign을 사용할 경우)</li>\n<li>RestTemplate 보다 간편하게 사용할 수 있으며 가독성이 좋다.</li>\n<li>Feign Client를 사용한 통합 테스트가 비교적 간편하다.</li>\n<li>요청에 대한 커스텀이 간편하다.<br>\nex) 요청이 실패했을때 몇초 간격으로 몇번 재요청을 보낼것인지를 구체적으로 정할 수 있다.</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>동기적으로 동작한다. 즉, 하나의 요청이 끝나야 다음 동작이 가능하다.<br>\n(이건 비동기적으로 동작해야하는 경우 단점이 될 수 있을것 같다.)</li>\n</ul>\n<blockquote>\n<p><strong>우리 서비스에서는 사용자 로그인 API에서만 사용하기 때문에 비동기가 지원될 필요가 없다고 판단했고<br>\nFeign Client를 도입해보기로 결정했다.</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 프로젝트에 적용</h2>\n<p>FeignClient를 사용하기 위해 먼저 build.gradle에 관련 의존성을 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//프로젝트에서 사용한 버전 정보</span>\nspring<span class=\"token operator\">-</span>boot <span class=\"token operator\">:</span> <span class=\"token number\">2.7</span><span class=\"token number\">.1</span>\nspring<span class=\"token operator\">-</span>cloud <span class=\"token operator\">:</span> <span class=\"token number\">2021.0</span><span class=\"token number\">.3</span>\nspring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>openfeign <span class=\"token operator\">:</span> <span class=\"token number\">3.1</span><span class=\"token number\">.3</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ext <span class=\"token punctuation\">{</span>\n\tspringCloudVersion <span class=\"token operator\">=</span> '<span class=\"token number\">2021.0</span><span class=\"token number\">.3</span>'\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\n\ndependencyManagement <span class=\"token punctuation\">{</span>\n\timports <span class=\"token punctuation\">{</span>\n\t\tmavenBom <span class=\"token string\">\"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\ndependencies <span class=\"token punctuation\">{</span>\n\timplementation 'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign'\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><strong>ext</strong> : gradle 내에서 사용할 변수를 설정할 수 있다. 여기서는 springCloudVersion을 변수로 관리하도록 했다.</li>\n<li><strong>dependencyManagement</strong> : 사용할 의존성의 버전을 명시해두면 dependencies에서 실제 의존성을 작성할때 버전을 따로 작성하지 않아도 위에 명시된 버전으로 가져온다.</li>\n</ul>\n<p>의존성을 가져온 뒤 Feign Client를 사용하여 API 호출을 담당할 클라이언트 인터페이스를 만들었다.<br>\n만드는 방법은 간단한데 클라이언트를 인터페이스로 만들고 내부에 호출할 메서드만 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//FeignClient를 사용한 코드</span>\n\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://oauth-server.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"grant_type\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"redirect_uri\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>@FeignClient</strong> : 앱이 런타임 시 해당 어노테이션이 붙은 인터페이스를 토대로 실제 구현체를 만든다.\n<ul>\n<li>name : 실제 구현체가 Application Context에 빈으로 등록될때 이름으로 사용된다.</li>\n<li>url : 요청을 보낼 엔드포인트를 의미한다.</li>\n</ul>\n</li>\n<li><strong>@PostMapping</strong> : 해당 HttpMethod로 요청을 전송한다.</li>\n<li><strong>@RequestParam</strong> : 요청 시 함께 보낼 파라미터들 설정한다.\n<ul>\n<li>메서드의 파라미터에 @RequestParam, @RequestHeader 등의 어노테이션을 사용하지 않으면 기본적으로 요청의 Body에 파리미터의 값들이 들어간다.</li>\n</ul>\n</li>\n</ul>\n<p>코드를 작성하고나니 의문이 생겼다.</p>\n<blockquote>\n<p><strong>어떻게 SpringMvc의 어노테이션을 사용할 수 있는걸까?</strong></p>\n</blockquote>\n<p>찾아보니 FeignClient는 빈으로 생성될 때 설정된 configuration 을 읽어서 생성되는데 configuration 내부에는<br>\nClient 생성 시 사용할 Decoder, Encoder, Logger, Contract 등을 빈으로 등록하는 코드가 담겨있었다.</p>\n<p>이때 Client에 따로 Configuration 설정을 해주지 않으면 디폴트인 <strong>FeignClientsConfiguration</strong> 를 사용해서 생성하는데 default로 적용된 Contract는 SpringMvcContract였고 덕분에 SpringMvc의 어노테이션을 사용할 수 있었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/70687782-c66c-4412-80a9-e8b3126a1e45\" width=\"1000\">\n<ul>\n<li>decoder, encoder, logger도 모두 Spring이 사용하는 객체들을 사용하도록 되어있다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/317c2534-6f7c-46b2-9d71-53731eaed5bb\" width=\"600\">\n<p>이후 서비스의 로직에서는 만든 클라이언트 객체를 빈으로 주입받아 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OAuthTokenClient</span> oAuthTokenClient<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtToken</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthTokenResponse</span> oAuthTokenResponse <span class=\"token operator\">=</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> oAuthTokenClient<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getGrantType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getClientId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getRedirectUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>FeignClient는 SpringBootApplication이 실행될때 @FeignClient 어노테이션이 붙은 파일들을 읽어서 구현체를 만들기 때문에 앱 구동시 어노테이션을 읽을 수 있게 @EnableFeignClients 어노테이션을 붙여주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 위의 설정을 마치고 실제 OAuth 서버로 요청을 보냈을때의 요청/응답 로그다.<br>\n해당 로그가 출력되려면 프로젝트의 로깅 레벨은 DEBUG 로, FeignClient의 로깅 레벨은 FULL로 설정되어 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//application.yml</span>\nlogging<span class=\"token operator\">:</span>\n  level<span class=\"token operator\">:</span>\n    com<span class=\"token punctuation\">.</span>project<span class=\"token operator\">:</span> debug\n\nfeign<span class=\"token operator\">:</span>\n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        loggerLevel<span class=\"token operator\">:</span> FULL</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//요청</span>\n---> POST http<span class=\"token operator\">:</span><span class=\"token comment\">//oauth-server/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code HTTP/1.1</span>\nContent-Type<span class=\"token operator\">:</span> application/x-www-form-urlencoded;charset=utf<span class=\"token number\">-8</span>\n---> END HTTP (<span class=\"token number\">0</span>-byte body)\n\n<span class=\"token comment\">// 응답</span>\n&lt;--- HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK (131ms)\naccess-control-allow-headers<span class=\"token operator\">:</span> Authorization<span class=\"token punctuation\">,</span> KA<span class=\"token punctuation\">,</span> Origin<span class=\"token punctuation\">,</span> X-Requested-With<span class=\"token punctuation\">,</span> Content-Type<span class=\"token punctuation\">,</span> Accept\naccess-control-allow-methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span> POST<span class=\"token punctuation\">,</span> OPTIONS\naccess-control-allow-origin<span class=\"token operator\">:</span> *\ncache-control<span class=\"token operator\">:</span> no-cache<span class=\"token punctuation\">,</span> no-store<span class=\"token punctuation\">,</span> max-age=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> must-revalidate\nconnection<span class=\"token operator\">:</span> keep-alive\ncontent-type<span class=\"token operator\">:</span> application/json;charset=utf<span class=\"token number\">-8</span>\ndate<span class=\"token operator\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> Aug <span class=\"token number\">2022</span> <span class=\"token number\">02</span><span class=\"token operator\">:</span><span class=\"token number\">48</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> GMT\nexpires<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\ntransfer-encoding<span class=\"token operator\">:</span> chunked\nx-content-type-options<span class=\"token operator\">:</span> nosniff\nx-frame-options<span class=\"token operator\">:</span> DENY\nx-xss-protection<span class=\"token operator\">:</span> <span class=\"token number\">1</span>; mode=block\nresponse-body<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n&lt;--- END HTTP (<span class=\"token number\">190</span>-byte body)</code></pre></div>\n<p>아래는 추가적으로 해준 설정들이다.</p>\n<h2 id=\"-커스텀한-configuration-설정\" style=\"position:relative;\"><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\" aria-label=\" 커스텀한 configuration 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 커스텀한 Configuration 설정</h2>\n<h3 id=\"1-공통-헤더적용을-위한-configuration\" style=\"position:relative;\"><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"1 공통 헤더적용을 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 공통 헤더적용을 위한 Configuration</h3>\n<ul>\n<li>요청에 content-type 헤더가 기본적으로 필요해서 configuration 파일을 만들었고 Client 객체에 적용했다.</li>\n<li>요청을 가로채서 헤더를 세팅하는 requestInterceptor를 빈으로 등록하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientHeaderConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_FORM_URLENCODED_VALUE <span class=\"token operator\">+</span> <span class=\"token string\">\";charset=utf-8\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestInterceptor</span> <span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> requestTemplate <span class=\"token operator\">-></span> requestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-feignclient-exception을-서비스-예외로-처리하기-위한-configuration\" style=\"position:relative;\"><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"2 feignclient exception을 서비스 예외로 처리하기 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</h3>\n<ul>\n<li>Feign Client를 통한 요청이 실패했을 경우 OAuthServer에서의 예외가 발생했다는 메세지를 사용자에게 전달하고 싶었고, 커스텀한 ErrorDecoder를 빈으로 등록하는 configuration을 Client 객체에 적용했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ErrorDecoder</span> <span class=\"token function\">decoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 요청이 성공하지 못했습니다. requestUrl: {}, requestBody: {}, responseBody: {}\"</span><span class=\"token punctuation\">,</span>\n                    methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuthServerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>위의 Configuration들을 적용한 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//적용</span>\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-server\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">FeignClientHeaderConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 주의할 점으로는 configuration 파일에 <strong>@Configuration 어노테이션을 붙이는것을 지양</strong>해야한다.\n해당 어노테이션을 붙이게 되면 컴포넌트 스캔이 발생하는 시점에 빈으로 등록되어 모든 FeignClient에 적용된다.</p>\n<ul>\n<li>현재 서비스에서는 모든 요청에 대해 적용할 decoder라서 어노테이션을 붙일까 고민했지만 변경사항이 발생할 수 있기에 직접 configuration을 설정해줬다.</li>\n</ul>\n<h3 id=\"3-url을-applicationproperties에서-관리-후-적용\" style=\"position:relative;\"><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\" aria-label=\"3 url을 applicationproperties에서 관리 후 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. url을 application.properties에서 관리 후 적용</h3>\n<p>url을 하드코딩 하기보다는 프로퍼티에서 관리하는것이 변경이 발생했을때 변경사항을 적용하기 편리하다.</p>\n<p>아래와 같은 방식으로 작성하면 application.properties에서 해당 프로퍼티를 읽어온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${oauth.kakao.service.token_url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 마무리</h2>\n<p>이번에 FeignClient를 어노테이션만으로 요청에 필요한 모든 설정을 마칠 수 있다는 점에서 이전에 RestTemplate, WebClient를 사용했을때와 비교해 너무 간편하다는 느낌을 받았다.\n물론 추가적인 설정 없이는 비동기적으로 동작하지 않기에 WebClient를 대체할 수는 없지만 특별히 비동기적인 동작이 필요없다면 FeignClient를 사용하지 않을까 싶다.</p>\n<p>또한 WireMock을 함께 사용하면 테스트도 쉽게 할 수 있는데 이 내용은 다음 글에서 이어서 작성하려고 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-feign-client%EB%9E%80\">💫 Feign Client란?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\">💫 프로젝트에 적용</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\">🛠 커스텀한 Configuration 설정</a></p>\n<ul>\n<li><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\">1. 공통 헤더적용을 위한 Configuration</a></li>\n<li><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\">2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</a></li>\n<li><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\">3. url을 application.properties에서 관리 후 적용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">💫 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 13, 2022","title":"프로젝트에 Feign Client를 적용해보자","categories":"Spring","author":"서코코","emoji":"🌱"},"fields":{"slug":"/backend/spring/feign_client_적용기/"}},"prev":{"id":"4983ab42-b43f-57c0-ad6c-6f8618a5a315","html":"<p>이번에 식도락 프로젝트를 진행하는 과정에서 빌드 시 submodule의 파일들을 복사하는 task를 추가하는 작업을 맡았습니다.</p>\n<p>쿠킴의 레퍼런스 덕분에 작업 자체는 수월했지만, gradle에 대해 거의 모르다보니 build와의 의존관계설정을 설정해주지 않아서 동작하지 않았던 경험이 있었습니다. 또한 Jay가 작성한 restdocs 관련 task도 설명없이는 이해하지 못했고 답답함을 느껴 이번 기회에 정리해보았습니다.</p>\n<h2 id=\"빌드란-무엇인가요\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"빌드란 무엇인가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드란 무엇인가요?</h2>\n<p>개발자가 만든 애플리케이션을 컴퓨터에서 구동하기 위해서는 변환작업이 필요합니다. Java 애플리케이션의 경우 2가지 단계를 거치게 됩니다.</p>\n<ul>\n<li><strong>컴파일</strong> : 소스코드를 바이트코드로 변환</li>\n<li><strong>링킹</strong> : 바이트코드를 의존하고 있는 라이브러리들과 함께 하나의 파일로 압축하는 과정</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/a004e04c-a30a-4704-ab17-855329bd9546\">\n<hr>\n<h2 id=\"빌드-도구는-왜-필요한가요\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94\" aria-label=\"빌드 도구는 왜 필요한가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 도구는 왜 필요한가요?</h2>\n<p>앞의 설명과 같이 애플리케이션을 실행하려면 먼저 <strong>컴파일과 링킹 과정</strong>이 필요합니다. 하나의 파일만 컴파일한다면 javac 명령어를 터미널에 쳐서 하면 되겠지만 보통 애플리케이션은 수많은 패키지와 파일들로 구성되어 있습니다.</p>\n<p>이때 우리가 작성한 모든 클래스들에 대해 위의 방식으로 일일이 컴파일 작업을 진행하기는 어렵습니다. 더 나아가 외부의 라이브러리를 사용하고 있는 경우 해당 의존성까지 묶어서 빌드를 진행해야하기 때문에 이 작업을 매번 개발자가 하기는 어렵습니다.</p>\n<p>이런 작업을 수월하게 하기 위해서 빌드 도구를 사용합니다.</p>\n<h2 id=\"빌드-도구의-종류\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"빌드 도구의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 도구의 종류</h2>\n<blockquote>\n<p><strong>Ant도 있지만 현재는 사용하지 않기 때문에 설명에서 제외했습니다.</strong>\n현재 Java에서 대표적으로 사용하는 빌드도구로는 Maven과 Gradle이 있습니다.</p>\n</blockquote>\n<p>이중에서도 오늘은 Gradle에 대해 정리해보려고 합니다.</p>\n<h3 id=\"maven\" style=\"position:relative;\"><a href=\"#maven\" aria-label=\"maven permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maven</h3>\n<p>Maven은 가장 많이 사용하고 있는 빌드도구입니다. 아래는 현시점 사용률인데 Maven이 압도적으로 높습니다.\n아무래도 오랜기간 사용되어오다보니 점유율이 높을 수 밖에 없는것 같습니다. (첫 릴리스 : 2004년)</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/293e617f-58c4-436f-b884-7a4bba2f4b53\">\n<p>Maven의 특징은 다음과 같습니다.</p>\n<ul>\n<li>xml 파일로 관리한다.</li>\n<li>JVM에서만 동작하며 기본적으로는 Java 애플리케이션만 빌드해준다. (서드파티 플러그인을 이용하면 코틀린, 스칼라 등 다른 언어로 되어 있는 애플리케이션도 빌드가능)</li>\n<li>의존성을 자동으로 관리해준다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/fe084ae6-60ed-4901-a41f-4666f15cf034\">\n<h3 id=\"gradle\" style=\"position:relative;\"><a href=\"#gradle\" aria-label=\"gradle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle</h3>\n<p>Maven과 마찬가지로 대표적인 빌드 자동화 도구입니다. (첫 릴리스 : 2012년)</p>\n<p>특징은 다음과 같습니다.</p>\n<ul>\n<li>다양한 언어를 지원합니다.</li>\n<li>Maven보다 빌드 속도가 2배 가까이 빠릅니다.</li>\n<li>Groovy라는 동적타입 프로그래밍 언어를 사용합니다. 현재는 Kotlin으로도 가능하다고 합니다.</li>\n</ul>\n<br/>\n<h2 id=\"왜-gradle을-사용할까요\" style=\"position:relative;\"><a href=\"#%EC%99%9C-gradle%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94\" aria-label=\"왜 gradle을 사용할까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 Gradle을 사용할까요?</h2>\n<p>아직 점유율 자체는 Maven이 높지만 새롭게 만드는 프로젝트들은 대부분 Gradle로 작성된다고 합니다. 여러가지 이유들이 있겠지만 가장 큰 2가지 이유는 빌드속도와 작성/가독성의 차이 때문이라고 생각합니다.</p>\n<h3 id=\"1-빌드-속도\" style=\"position:relative;\"><a href=\"#1-%EB%B9%8C%EB%93%9C-%EC%86%8D%EB%8F%84\" aria-label=\"1 빌드 속도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 빌드 속도</h3>\n<p>Gradle 공식문서에는 Maven과 세가지 경우에 대해서 테스트한 결과를 비교한 내용을 제공하고 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Maven</th>\n<th>Gradle</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>클린 빌드</td>\n<td>26.19초</td>\n<td>14.79초</td>\n</tr>\n<tr>\n<td>재빌드</td>\n<td>25.85초</td>\n<td>0.68초</td>\n</tr>\n<tr>\n<td>코드 일부분만 수정해서 재빌드</td>\n<td>4.08초</td>\n<td>0.55초</td>\n</tr>\n</tbody>\n</table>\n<p>결과는 위의 표와 같이 <strong>2배 가까이</strong> 차이가 나고 있습니다.\n2배 가까이 차이가 나는 이유는 아래와 같습니다.</p>\n<ul>\n<li>task의 input, output을 트래킹하기 때문에 이전 빌드와 달라진점이 없다면 빌드를 진행하지 않습니다.</li>\n<li>이전 빌드의 캐시를 가지고 있기 때문에 이전 빌드 결과를 가지고 변경이 발생한 클래스들만 컴파일을 진행합니다.</li>\n<li>gradle daemon이라는 프로세스가 백그라운드에서 동작해서 빌드의 정보들을 메모리에 가지고 있습니다.</li>\n</ul>\n<h3 id=\"2-작성--가독성\" style=\"position:relative;\"><a href=\"#2-%EC%9E%91%EC%84%B1--%EA%B0%80%EB%8F%85%EC%84%B1\" aria-label=\"2 작성  가독성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 작성 / 가독성</h3>\n<p>Maven은 xml을 사용하기 때문에 태그로 일일이 정보를 감싸서 작성해야하며 중복되는 코드가 많습니다.</p>\n<p>반면 Gradle은 스크립트 언어로 작성되어 작성하기도 수월하고 가독성 또한 좋습니다. 실제로 Maven에서는 이렇게 길었던 코드가 Gradle에서는 4줄로 끝났습니다.</p>\n<img width=\"609\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/0bad9110-31fa-4a54-ae9f-795edcca387c\">\n<br/>\n<img width=\"609\" alt=\"gradle-5\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/6b1ac68b-db12-49a9-80a6-9ff4aa9794a9\">\n<br/>\n<h2 id=\"gradle이-빌드를-하는-과정\" style=\"position:relative;\"><a href=\"#gradle%EC%9D%B4-%EB%B9%8C%EB%93%9C%EB%A5%BC-%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"gradle이 빌드를 하는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle이 빌드를 하는 과정</h2>\n<p>Gradle 세단계를 거쳐 빌드작업을 진행합니다.</p>\n<ul>\n<li>\n<p>Initialization(초기화)</p>\n<ul>\n<li>환경변수, 빌드 시 필요한 프로젝트 등 빌드에 필요한 정보를 읽어서 Project 객체를 생성합니다.</li>\n<li>멀티 프로젝트를 지원하는데 이때 사용할 프로젝트의 목록은 settings.gradle 에 존재합니다.\nsettings.gradle 이 없다면 단일 프로젝트로, 있으면 내부의 목록을 읽고 단일 / 멀티 여부를 결정합니다.</li>\n</ul>\n</li>\n<li>\n<p>Configuration(환경구성)</p>\n<ul>\n<li>초기화 과정에서 생성된 Project 객체에 맞는 빌드 스크립트가 실행되고, 실행한 task와 동일한 이름의 task를 프로젝트에서 찾습니다.</li>\n<li>이때 task 그래프를 만들고 메인 task를 위해 실행해야하는 task들의 순서를 결정합니다.</li>\n</ul>\n</li>\n<li>\n<p>Execution(실행) : task들을 실행합니다.</p>\n</li>\n</ul>\n<br/>\n<h2 id=\"task는-뭔가요\" style=\"position:relative;\"><a href=\"#task%EB%8A%94-%EB%AD%94%EA%B0%80%EC%9A%94\" aria-label=\"task는 뭔가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Task는 뭔가요?</h2>\n<p>기본적으로 Gradle은 task 단위로 동작하는데 이름 그대로 빌드 시 실행할 하나의 작업을 의미합니다. 빌드 시 Configure 단계에서 의존성에 기반해서 여러개의 task를 정의하고 실행해야하는 순서를 정한 뒤, 그래프 형태로 연결시킵니다.</p>\n<img width=\"422\" title=\"하하하\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/73486df1-44e1-4006-8005-ee69b2e4d21c\">\n<p>Task는 다음과 같이 구성됩니다.</p>\n<ul>\n<li>Action : 어떤 작업을 할지를 나타냅니다.</li>\n<li>Input : 작업을 수행하기 위해서 필요한 입력값 (ex - 변수, 파일, 경로…)을 나타냅니다.</li>\n<li>Output : 작업의 결과로 영향을 받을 파일 혹은 경로를 나타냅니다.\n<blockquote>\n<p><strong>Gradle의 빌드속도가 빠른 이유는 변한값이 존재하지 않으면 이전 빌드의 결과물을 사용한다고 했는데, task의 input, output을 확인해서 변경 여부를 파악합니다. (변경된 값이 없는 경우, 해당 task는 건너뜁니다)</strong></p>\n</blockquote>\n</li>\n</ul>\n<br/>\n<h2 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TIP</h2>\n<p>Task는 서로 의존관계를 설정할 수 있습니다.</p>\n<ul>\n<li>dependsOn 키워드를 사용해서 의존하는 task를 설정할 수 있습니다. 의존관계를 작성하면, 반드시 의존하고 있는 task 이후에 실행됩니다. (dependsOn 이외에도 의존관계를 설정하거나 실행순서를 지정할 수 있는 다양한 메서드가 있습니다. 링크)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">secondTask <span class=\"token punctuation\">{</span>\n      dependsOn firstTask\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//or</span>\n\nfirstTask<span class=\"token punctuation\">.</span><span class=\"token function\">dependOn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secondTask'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Task에서 property 키워드를 사용해 동적으로 환경변수를 지정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">taskName <span class=\"token punctuation\">{</span>\n      property <span class=\"token interpolation-string\"><span class=\"token string\">\"key\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"value\"</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래 토글은 input,output이 설정되고 action이 실행되는 과정이 궁금해서 copy task의 동작 과정을 얕게 파본 내용입니다.<br>\n(건너뛰어도 무방합니다.)</p>\n<details>\n<summary>더보기</summary>\n<p>아래는 현재 진행중인 프로젝트에서 사용하고 있는 submodule의 application.yml을 복사하는 task입니다.</p>\n<img width=\"315\" alt=\"gradle-1\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/c16b3606-7382-4f83-ba42-9991fd1c897a\">\n<p><strong>1. 가장 먼저 Copy Task 클래스입니다.</strong></p>\n<ul>\n<li>copy액션을 생성하는 메서드, copy작업 시 파일 경로등을 담은 스펙을 생성하는 메서드로 구성되어 있있습니다.\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/d67b1b61-08b5-473f-9610-eb132218bce8\"></li>\n</ul>\n<p><strong>2. AbstractCopyTask 추상 클래스의 from, into, include 메서드를 사용해서 경로를 지정해줍니다.</strong></p>\n<ul>\n<li>내부적으로는 Spec클래스들에 정보를 저장합니다.</li>\n<li>여기서 MainSpec과 RootSpec은 액션을 수행하기 위해 필요한 정보들을 담고 있는 클래스들입니다.</li>\n</ul>\n<p><img width=\"451\" alt=\"gradle-3\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/21385e3c-fe5a-46c3-9ac3-9ab117036367\"> <br/>\n<img width=\"393\" alt=\"gradle-4\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/1b2f8b69-1d16-48eb-8e95-29876d235e5c\"> <br/>\n<img width=\"431\" alt=\"gradle-5\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/50ba3b3f-109c-4b47-b4e3-18005a709fd1\"> <br/></p>\n<ul>\n<li>AbstractCopyTask 추상 클래스를 보면 생성될 시 현재 구현체의 스펙을 생성하는 메서드를 호출합니다. (여기서 실제 구현체는 Copy 클래스입니다.)</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/1d6b7ec2-455a-4424-b961-6748429f6a43\">\n<br>\n<ul>\n<li>아래는 Copy 구현체가 생성하는 스펙 클래스입니다.\n<ul>\n<li>위에서 설정해준 into 경로는 해당 클래스의 destinationDir로 설정됩니다.</li>\n</ul>\n</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/b51d63cb-b6a1-465b-91be-4a68661adbc9\">\n<p><strong>3. AbstractCopyTask 추상 클래스로 올라가보면 실제 copyTask가 존재합니다.</strong></p>\n<ul>\n<li>action을 실행시켜줄 executor와 action을 만들어줍니다. 매개변수로는 이전에 생성했던 Spec클래스와 action을 넣어줍니다.</li>\n<li>`@TaskAction“ 어노테이션은 실제 태스크가 실행될때 호출될 메서드를 가리킵니다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/06841086-8cc4-447c-926e-95b90026c750\">\n<ul>\n<li>여기서 생성되는 CopyAction은 실제로는 Copy 클래스에 있는 메서드가 생성하는 FileCopyAction클래스가 됩니다.\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/9b689e0d-c480-4486-b5fb-7493a5352e85\"></li>\n</ul>\n<p><strong>4. Task가 실행되면 실제로는 FileCopyAction클래스 내부에 있는 innerClass의 메서드가 호출됩니다.</strong></p>\n<ul>\n<li>아래 클래스의 processFile 메서드가 호출되고 이때 파일이 복사됩니다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/4b1beea2-0198-40f3-a597-a1937939144c\">\n</details>\n<h2 id=\"spring-boot-프로젝트의-buildgradle\" style=\"position:relative;\"><a href=\"#spring-boot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-buildgradle\" aria-label=\"spring boot 프로젝트의 buildgradle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Boot 프로젝트의 build.gradle</h2>\n<p>Gradle에 대해 알아보았으니 이제는 SpringBoot 프로젝트의 기본 build.gradle를 간단하게 알아보고자 합니다.</p>\n<img width=\"634\" alt=\"gradle-7\" src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/c6cbf50b-02ba-4cc4-ace3-c404d09ca28e\">\n<p><strong>1. plugins</strong></p>\n<ul>\n<li>plugin이란 일반적으로 사용되는 task들의 묶음이며 프로젝트에 추가함으로써 task를 직접 만들지 않고도 편하게 사용할 수 있습니다.\n<ul>\n<li>예시로 java 플러그인 내부에는 대표적으로 compileJava, test 등의 task가 존재합니다. 링크</li>\n</ul>\n</li>\n<li>Springboot 프로젝트를 만들면 기본적으로 java, dependency-management 플러그인을 포함합니다.</li>\n</ul>\n<p><strong>2. sourceCompatibility</strong></p>\n<ul>\n<li>소스코드를 컴파일할때 사용하는 자바 버전을 나타냅니다.</li>\n</ul>\n<p><strong>3. repositories</strong></p>\n<ul>\n<li>dependencies에 있는 의존성들을 어디서 다운로드할 저장소를 지정하는 블록입니다.</li>\n<li>기본적으로 maven central repository에서 다운받습니다.</li>\n</ul>\n<p><strong>4. dependencies</strong></p>\n<ul>\n<li>프로젝트에서 필요한 의존성들을 작성하는 블록입니다.</li>\n<li>아래는 자주 사용되는 속성들입니다.</li>\n<li>설명에 앞서서 모듈의 의존관계가 project → module2 → module1 형태로 되어 있다고 가정해보겠습니다.\n<ul>\n<li><strong>api</strong> : 의존성을 가져올때는 module2가 의존하는 module1까지 가져옵니다. (module1이 필요하지 않은 경우 빌드 시간만 늘어나기 때문에 필요할 경우에만 사용해야합니다.)</li>\n<li><strong>implementation</strong> : 의존성을 가져올때 module2만 가져옵니다.</li>\n<li><strong>runtimeOnly</strong> : 실행 시점에만 필요한 의존성을 나타냅니다. 최종 빌드되는 결과물에만 포함됩니다.</li>\n<li><strong>compileOnly</strong> : 컴파일 시점에만 필요한 의존성을 나타냅니다. 최종 빌드되는 결과물에는 포함되지 않습니다.</li>\n<li><strong>testImplementation</strong> : 테스트시에만 사용되는 의존성을 나타냅니다.</li>\n<li><strong>annotationProcessor</strong> : 컴파일 시점에 특정 라이브러리의 어노테이션을 읽도록 설정할때 사용됩니다. 대표적으로 Lombok을 사용할때 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>5. test</strong></p>\n<ul>\n<li>test task를 실행할 때 테스트 프레임워크로 JUnit을 사용하도록 설정합니다.</li>\n</ul>\n<p>지금까지 간단하게나마 Gradle의 동작 과정과 SpringBoot 프로젝트에 생성되는 build.gradle을 정리해보았습니다.</p>\n<blockquote>\n<p><strong>잘못된 정보에 대한 피드백은 언제든 환영합니다 😁</strong></p>\n</blockquote>\n<br/>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<ul>\n<li>gradle 공식문서</li>\n<li><a href=\"https://tomgregory.com/gradle-tutorials/\">https://tomgregory.com/gradle-tutorials/</a></li>\n<li><a href=\"https://tomgregory.com/gradle-task-inputs-and-outputs/\">https://tomgregory.com/gradle-task-inputs-and-outputs/</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/\">https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%B9%8C%EB%93%9C%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">빌드란 무엇인가요?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EB%8A%94-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80%EC%9A%94\">빌드 도구는 왜 필요한가요?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC%EC%9D%98-%EC%A2%85%EB%A5%98\">빌드 도구의 종류</a></p>\n<ul>\n<li><a href=\"#maven\">Maven</a></li>\n<li><a href=\"#gradle\">Gradle</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%99%9C-gradle%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C%EC%9A%94\">왜 Gradle을 사용할까요?</a></p>\n<ul>\n<li><a href=\"#1-%EB%B9%8C%EB%93%9C-%EC%86%8D%EB%8F%84\">1. 빌드 속도</a></li>\n<li><a href=\"#2-%EC%9E%91%EC%84%B1--%EA%B0%80%EB%8F%85%EC%84%B1\">2. 작성 / 가독성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gradle%EC%9D%B4-%EB%B9%8C%EB%93%9C%EB%A5%BC-%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\">Gradle이 빌드를 하는 과정</a></p>\n</li>\n<li>\n<p><a href=\"#task%EB%8A%94-%EB%AD%94%EA%B0%80%EC%9A%94\">Task는 뭔가요?</a></p>\n</li>\n<li>\n<p><a href=\"#tip\">TIP</a></p>\n</li>\n<li>\n<p><a href=\"#spring-boot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-buildgradle\">Spring Boot 프로젝트의 build.gradle</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">참고자료</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 20, 2022","title":"Gradle 맛보기","categories":"Gradle","author":"서코코","emoji":"🌱"},"fields":{"slug":"/backend/gradle/gradle 맛보기/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/backend/spring/wiremock/","nextSlug":"/backend/spring/feign_client_적용기/","prevSlug":"/backend/gradle/gradle 맛보기/"}},"staticQueryHashes":["1073350324","1956554647","2938748437","3350743975"]}
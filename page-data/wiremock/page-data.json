{"componentChunkName":"component---src-templates-post-jsx","path":"/wiremock/","result":{"data":{"site":{"siteMetadata":{"title":"Seokho's Dev"}},"markdownRemark":{"id":"7fc36caa-34d5-5cfc-97ee-ad38240a5639","excerpt":"지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다. 해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다. 서론 이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.\n저는 OAuth 로그인 …","html":"<blockquote>\n<p><strong>지난 Feign Client 적용기에 이어서 WireMock을 이용한 테스트 경험을 소개합니다.</strong><br>\n<strong>해당 글에서 사용하는 wiremock 의존성을 위해서는 spring cloud에 대한 의존성이 필요합니다.</strong></p>\n</blockquote>\n<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>서론</h2>\n<p>이번 프로젝트에서는 기능 개발 시 인수테스트, 통합테스트, 단위테스트를 먼저 작성하고 개발을 진행하려고 노력하고 있습니다.\n저는 OAuth 로그인 기능을 맡았고 해당 기능에 대한 인수테스트를 작성하는 과정에서 \"어떻게하면 외부 api에 대해 실제 상황에 가까운 테스트를 할 수 있을지\"에 대해 고민하게 되었습니다.</p>\n<p>일반적으로 사용되는 Mockito를 사용하여 테스트를 진행할 수 있었지만 이 방식은 한계가 있다고 느꼈습니다.\n외부 api를 사용할때는 http 요청과 응답, 응답값에 대한 역직렬화 과정 등이 발생하는데 Mockito는 단순히 목객체를 주입받아서 메서드를 호출하는 방식으로 동작하기 때문입니다.<br>\n그렇다고 실제 카카오 Api를 호출해서 테스트할수도 없는 노릇이었습니다. 그렇게 되면 카카오 서버의 상태에 따라 테스트의 성공 여부가 달려있게 되기 때문입니다.</p>\n<p>그래서 다른 방법을 찾던 중 WireMock이라는 라이브러리를 발견하게 되었습니다.</p>\n<hr>\n<h2 id=\"-Wiremock이란\" style=\"position:relative;\"><a href=\"#-Wiremock%EC%9D%B4%EB%9E%80\" aria-label=\" Wiremock이란 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>💫 Wiremock이란?</h2>\n<p><strong>Wiremock이란 Http 기반의 api 서비스를 모킹하는 용도로 제공되는 목 서버 라이브러리입니다.</strong><br>\n여기서 중요한것은 목서버를 제공한다는 점인데, 지정해둔 uri로 요청이 발생할 경우 목서버로 http 요청이 발생하고 미리 지정해둔 형태의 http 응답이 반환됩니다.</p>\n<p>Wiremock을 사용하게 되면 실제 외부 api에 의존하지 않으면서 http 요청/응답을 통한 테스트가 가능해집니다.\n또한 외부 서버가 아닌 로컬에 서버를 띄워 사용하기 때문에 속도도 빠릅니다.\n이런 이유들로 현재 작성하는 테스트에 적용하기 적합하다고 판단되어 적용하게 되었습니다.</p>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>💫 프로젝트에 적용</h2>\n<p>Wiremock은 2가지 방식으로 사용이 가능합니다.</p>\n<ul>\n<li>jar 파일을 받아서 독립적인 서버로 운영하는 방식</li>\n<li>\n<p>build.gradle 의존성을 사용하여 JUnit 테스트에서만 운영하는 방식</p>\n<ul>\n<li>이 방식을 사용하게 되면 JUnit이 Wiremock 서버의 생명주기를 관리합니다.\n현재 프로젝트에서는 OAuth 인수테스트에서만 사용하기 때문에 2번째 방법을 사용했으며 기본 wiremock 의존성이 아닌, spring-cloud에서 제공되는 의존성을 사용했습니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-가장-먼저-buildgradle에-Wiremock-관련-의존성을-추가했습니다\" style=\"position:relative;\"><a href=\"#1-%EA%B0%80%EC%9E%A5-%EB%A8%BC%EC%A0%80-buildgradle%EC%97%90-Wiremock-%EA%B4%80%EB%A0%A8-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B6%94%EA%B0%80%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"1 가장 먼저 buildgradle에 Wiremock 관련 의존성을 추가했습니다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>1. 가장 먼저 build.gradle에 Wiremock 관련 의존성을 추가했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// WireMock</span>\n    testImplementation <span class=\"token string\">\"org.springframework.cloud:spring-cloud-starter-contract-stub-runner\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-목-서버가-필요한-테스트-위에-AutoConfigureWireMock-어노테이션을-붙여주었습니다\" style=\"position:relative;\"><a href=\"#2-%EB%AA%A9-%EC%84%9C%EB%B2%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9C%84%EC%97%90-AutoConfigureWireMock-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B6%99%EC%97%AC%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"2 목 서버가 필요한 테스트 위에 AutoConfigureWireMock 어노테이션을 붙여주었습니다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>2. 목 서버가 필요한 테스트 위에 @AutoConfigureWireMock 어노테이션을 붙여주었습니다.</h3>\n<p>(해당 어노테이션을 목서버가 필요한 테스트 클래스 위해 붙여야 Application Context가 뜰때 목서버가 빈으로 등록됩니다.)</p>\n<ul>\n<li>\n<p>랜덤한 포트를 사용하도록 하기 위해서 0으로 설정했습니다.</p>\n<ul>\n<li>목서버의 포트는 default로 8080이 세팅되어 있으며 0으로 설정하면 랜덤한 포트를 사용합니다.</li>\n</ul>\n</li>\n<li>실제 feign client가 요청을 보내게 되는 uri를 목서버의 uri로 동적으로 변경하기 위해서 properties 설정을 바꾸어주었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AutoConfigureWireMock</span><span class=\"token punctuation\">(</span>port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@TestPropertySource</span><span class=\"token punctuation\">(</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"oauth.kakao.service.token_url=http://localhost:${wiremock.server.port}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"oauth.kakao.service.api_url=http://localhost:${wiremock.server.port}\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-다음으로는-요청이-들어올-path와-요청에-대한-http-응답을-지정해주었습니다\" style=\"position:relative;\"><a href=\"#3-%EB%8B%A4%EC%9D%8C%EC%9C%BC%EB%A1%9C%EB%8A%94-%EC%9A%94%EC%B2%AD%EC%9D%B4-%EB%93%A4%EC%96%B4%EC%98%AC-path%EC%99%80-%EC%9A%94%EC%B2%AD%EC%97%90-%EB%8C%80%ED%95%9C-http-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%B4%EC%A3%BC%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"3 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>3. 다음으로는 요청이 들어올 path와 요청에 대한 http 응답을 지정해주었습니다.</h3>\n<p>기본적으로 wiremock은 src/test/resources/mappings 경로에 있는 json 파일을 읽어서 stub를 설정합니다.</p>\n<ul>\n<li>여기서 stub이란 http 요청 path와 그에 대한 http 응답을 설정해서 제공하는것을 의미합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/resource\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"bodyPatterns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"matchesJsonPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$.id\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"response\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"X-Application-Context\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application:-1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 저는 목서버를 사용하는 곳에서 명시적으로 stub를 세팅해주기 위해 응답값만 json 파일로 만들어두고 OAuthMock이라는 객체를 만들어서 메서드 내에서 stub를 설정했습니다.</p>\n<ul>\n<li>응답값은 file:src/test/resources/payload 경로에 json 파일 형태로 만들었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//token-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//user-response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"kakao_account\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"profile_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"profile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"thumbnail_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/.../img_110x110.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"profile_image_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://yyy.kakao.com/dn/.../img_640x640.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"is_default_image\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_valid\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"is_email_verified\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sample@sample.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"age_range\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20~29\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"birthday\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1130\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender_needs_agreement\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 실제 stub를 세팅하는 코드입니다.<br>\n메서드 내에서 사용한 stubfor, post 등등의 메서드는 모두 WireMock 클래스에서 제공되는 메서드들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">aResponse</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">equalTo</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">get</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">post</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">stubFor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>tomakehurst<span class=\"token punctuation\">.</span>wiremock<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WireMock</span><span class=\"token punctuation\">.</span><span class=\"token static\">urlEqualTo</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthMocks</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockTokenResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-token-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setupMockUserInfoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">stubFor</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">urlEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v2/user/me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer accessToken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">willReturn</span><span class=\"token punctuation\">(</span><span class=\"token function\">aResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMockResponseBodyByPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"payload/get-user-info-response.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-이후-실제-사용하는-테스트에서-OAuthMock객체의-메서드를-사용해서-stub를-설정했습니다\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%ED%9B%84-%EC%8B%A4%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-OAuthMock%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-stub%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%96%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"4 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>4. 이후 실제 사용하는 테스트에서 OAuthMock객체의 메서드를 사용해서 stub를 설정했습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DisplayName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OAuth 로그인 인수테스트\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthLoginAcceptanceTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InitAcceptanceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@BeforeAll</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWireMockResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthMocks</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpResponses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 순서대로 세팅을 마치고 테스트를 실행했을때 아래와 같은 로그가 찍힙니다.</p>\n<ul>\n<li>목서버로 온 http 요청</li>\n<li>요청에 일치하는 stub</li>\n<li>http 응답</li>\n</ul>\n<img src='https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/7effd444-26a5-4173-a21c-6d63ff862ae8'>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>마무리</h2>\n<p>인수테스트는 사용자의 요청 흐름에 맞춰 테스트를 작성합니다.\n그렇기 때문에 실제 api 호출 시의 환경에 보다 가까운 테스트를 작성할 수 있어야 한다고 생각합니다.\n하지만 이때 로직에 외부 api가 껴있다면 테스트하기가 까다로워지는데 이런 어려움을 해결하기에 Wiremock은 좋은 선택이 될 수 있는것 같습니다.</p>","frontmatter":{"title":"테스트에서 Wiremock을 이용해서 외부 의존성 줄이기","date":"August 21, 2022","update":null,"tags":["project","wiremock","spring"],"series":"식도락 프로젝트 개발기"},"fields":{"slug":"/wiremock/","readingTime":{"minutes":8.19}}},"seriesList":{"edges":[{"node":{"id":"8f11182d-6515-5925-aa77-12b91f24423c","fields":{"slug":"/feign-client/"},"frontmatter":{"title":"프로젝트에 Feign Client를 적용해보자"}}},{"node":{"id":"7fc36caa-34d5-5cfc-97ee-ad38240a5639","fields":{"slug":"/wiremock/"},"frontmatter":{"title":"테스트에서 Wiremock을 이용해서 외부 의존성 줄이기"}}},{"node":{"id":"9d3185ca-d585-51ce-a6ce-ff5920cbcb96","fields":{"slug":"/offset-nooffest/"},"frontmatter":{"title":"offset과 no offset을 사용한 페이징 성능 차이 분석"}}},{"node":{"id":"ba095530-9598-5162-ab5c-a38f1435c4b6","fields":{"slug":"/oauth-refactoring/"},"frontmatter":{"title":"여러 플랫폼에 대응할 수 있는 OAuth 코드로 개선하기"}}}]},"previous":{"fields":{"slug":"/feign-client/"},"frontmatter":{"title":"프로젝트에 Feign Client를 적용해보자"}},"next":{"fields":{"slug":"/gradle/"},"frontmatter":{"title":"Gradle 맛보기"}}},"pageContext":{"id":"7fc36caa-34d5-5cfc-97ee-ad38240a5639","series":"식도락 프로젝트 개발기","previousPostId":"8f11182d-6515-5925-aa77-12b91f24423c","nextPostId":"1c2e2133-94a0-58ac-9335-6b12d7a8abd2"}},"staticQueryHashes":[],"slicesMap":{}}
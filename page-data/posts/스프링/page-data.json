{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/스프링",
    "result": {"pageContext":{"currentCategory":"스프링","categories":["All","회고","TIL","스프링","자바"],"edges":[{"node":{"id":"a69d1e50-e2d3-534a-a0dd-f5e9ba09c3d5","excerpt":"스프링 카페 미션 3단계를 진행하며 Repository에 대한 테스트코드를 작성하며 했던 삽질에 대해 정리한 내용이다. 테스트코드에는 @JdbcTest 어노테이션을 추가했고, 생성자가 하나밖에 없었기 때문에 의존성 주입이 자동으로 이루어질 줄 알았지만 실행해보니 아래와 같은 에러가 발생했다.  처음 보는 에러에 헤매다가 결국 쿠킴의 도움을 받아서 필드에 @Autowired를 붙여주니까 의존성 주입이 되었고 문제는 해결이 됐다.\n하지만 분명 스프링에서는 생성자가 하나면 @Autowired를 생략할 수 있다고 배웠는데 대체 왜 안되는지 이해가 안되서 자료를 찾아보게 되었다. 주입하는 주체가 다르다 SpringApplication의 경우 빈을 주입해주는 역할을 스프링이 담당한다.\n하지만 테스트의 경우 Junit(Jupiter 엔진)에 의해 객체를 주입하게 된다. 이때 JUnit은 ParameterResolver를 사용해서 주입을 한다. Parameter Resolver 테스트에 동적으로…","fields":{"slug":"/spring/why-autowired-is-necessary-in-test/"},"frontmatter":{"categories":"스프링","title":"Test에서는 왜 @Autowired 없이는 의존성 주입이 안될까?","date":"March 18, 2022"}},"next":{"fields":{"slug":"/java/mvc-pattern/"}},"previous":{"fields":{"slug":"/til/03/2022-03-18-til/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}
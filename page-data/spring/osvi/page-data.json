{"componentChunkName":"component---src-templates-blog-template-js","path":"/spring/osvi/","result":{"data":{"cur":{"id":"44f76e18-816a-5e7a-8a6b-b4ebcdcce835","html":"<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>이번 글은 IssueTracker 프로젝트를 진행하면서 겪었던 영속성 컨텍스트와 관련된 문제를 맞닥트리면서 알게 된 OSIV라는 개념을 정리해보기 위해 작성하게 되었다.</p>\n<p><strong>고민</strong> : 미션을 진행하며 대부분의 api에서 유저의 정보가 필요할것이라고 판단했고, 매번 유저를 조회하는 코드의 중복을 제거하고 싶었다.<br>\n<strong>해결책</strong> : jwt 토큰을 통해 받은 유저의 id를 사용해 인터셉터에서 미리 유저 객체를 조회한 뒤, ArgumentResolver 를 사용해서 해당 유저 객체를 컨트롤러에서 파라미터로 받아서 사용하기로 했다.</p>\n<p>하지만 예상하지 못한 문제가 발생했다.</p>\n<blockquote>\n<p><strong>인터셉터에서 조회해서 컨트롤러에서 넘겨받은 유저 객체는 영속성 컨텍스트에서 관리해주지 않았다.</strong></p>\n</blockquote>\n<p>원인은 <strong>영속성 컨텍스트가 생성되는 시점이 우리가 등록한 인터셉터가 실행된 이후였기 때문이다</strong>. 함께 원인을 찾던 중 영속성 컨텍스트의 생명주기에 대해 서로 다르게 알고 있었는데 토리는 “트랜잭션 단위”, 나는 “요청 단위”로 알고 있었다. (학습해본 결과 둘다 맞는 이야기다.)\n해당 개념을 확실하게 알아두기 위해 조금 더 파보았다.</p>\n<hr>\n<h2 id=\"-스프링에서의-영속성-컨텍스트-생명-주기\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\" aria-label=\" 스프링에서의 영속성 컨텍스트 생명 주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚴🏻 스프링에서의 영속성 컨텍스트 생명 주기</h2>\n<p>컨테이너에서 관리하는 EntityManager를 사용하는 경우 영속성 컨텍스트의 생명주기는 컨테이너에 의해 관리되는데, 스프링 컨테이너는 기본적으로 트랜잭션 단위로 영속성 컨텍스트를 관리한다.\n즉, 하나의 트랜잭션이 시작할때 영속성 컨텍스트가 생성되고 트랜잭션이 종료될 때 영속성 컨텍스트도 함께 종료되며 보통은 서비스 레이어에서 트랜잭션의 시작과 종료가 이루어지게 된다.\n이 말은 곧 서비스 레이어에서만 영속성 컨텍스트에 접근할 수 있다는 의미이다. 여기서 한가지 질문이 생긴다.</p>\n<blockquote>\n<p><strong>영속성 컨텍스트가 종료된 이후에 뷰 레이어에서 사용하던 지연로딩은 어떻게 가능한걸까?</strong></p>\n</blockquote>\n<p>말로만 설명하면 이해가 안될것 같아서 간단한 예시 코드를 작성해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Issue</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"issue\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> comments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IssueDto</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CommentDto</span><span class=\"token punctuation\">></span></span> comments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IssueDto</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Issue</span> issue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comments <span class=\"token operator\">=</span> <span class=\"token function\">convertCommentsToCommentsDto</span><span class=\"token punctuation\">(</span>issue<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CommentDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">convertCommentsToCommentsDto</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> comments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> comments<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CommentDto</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">//Service</span>\n<span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IssueService</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Issue</span> <span class=\"token function\">findIssue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Issue</span> issue <span class=\"token operator\">=</span> issueRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> issue<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IssueController</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/issue\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IssueDto</span> <span class=\"token function\">getIssue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IssueDto</span><span class=\"token punctuation\">(</span>issueService<span class=\"token punctuation\">.</span><span class=\"token function\">findIssue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"동작과정\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"동작과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;동작과정></h3>\n<ol>\n<li>사용자가 이슈를 조회한다.</li>\n<li>서비스에서 Issue 엔티티 객체를 찾아온다.</li>\n<li>조회한 Issue 엔티티 객체를 Controller에서 IssueDto 형태로 변환해서 리턴한다.</li>\n<li>IssueDto 내부에서 변환하는 과정에서 comments 리스트에 접근하는데 이때 지연로딩이 발생한다.</li>\n</ol>\n<p>분명 영속성 컨텍스트가 트랜잭션 단위로 관리된다면, 영속성 컨텍스트는 종료된 상태일텐데 어떻게 지연로딩이 발생할까?\n그건 바로 OSIV 때문이다.</p>\n<hr>\n<h2 id=\"-osiv란\" style=\"position:relative;\"><a href=\"#-osiv%EB%9E%80\" aria-label=\" osiv란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 OSIV란?</h2>\n<p>Open-Session-In-View의 약자인데, 한마디로 뷰 레이어에서도 세션을 열어두겠다는 의미다.\n(JPA에서는 EntityManager, JPA의 구현체인 Hibernate에서는 Session이라고 부른다.)</p>\n<p>OSIV를 사용할 경우 사용자의 요청이 발생하면 영속성 컨텍스트가 생성되고 요청이 종료될때 컨텍스트도 종료된다.\n즉, 생명주기가 트랜잭션 단위 -> 요청 단위 로 변경되는 것이다.</p>\n<p>스프링 부트에서는 기본적으로 OSIV 설정을 true로 설정해준다. 이 개념을 모른다면 나처럼 영속성 컨텍스트는 원래 요청단위로 생성되는것이라고 알고 있을 수 밖에 없다</p>\n<blockquote>\n<p><strong>설정을 바꾸려면 application-properties에서 false로 변경해주면 된다.<br>\nfalse로 설정하면 트랜잭션 단위로 관리된다.</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//application-properties</span>\n\nspring<span class=\"token punctuation\">.</span>jpa<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token operator\">-</span>in<span class=\"token operator\">-</span>view<span class=\"token operator\">=</span><span class=\"token boolean\">false</span></code></pre></div>\n<h2 id=\"-osiv의-장단점\" style=\"position:relative;\"><a href=\"#-osiv%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\" osiv의 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 OSIV의 장/단점</h2>\n<p>장점으로는 앞서 보았던 뷰 레이어에서도 지연로딩을 사용할 수 있게 된다는 장점이 생긴다.</p>\n<p>하지만 동시에 단점도 존재하는데 영속성 컨텍스트가 존재한다는 것은 하나의 DB 커넥션을 사용한다는 것이다. 사용자의 요청을 처리하는 스레드의 개수에 비해 DB 커넥션의 개수는 적다. 즉, 트래픽이 많은 서비스 같은 경우 하나의 요청에서 커넥션을 너무 오래 잡고 있어서 서비스 장애로 이어질 수 있다. (특히 해당 요청 내에서 I/O작업과 같이 시간이 소요되는 작업이 발생할 경우, 그만큼 커넥션을 오래 잡고 있게 된다.)\n또한 하나의 요청에서 2개 이상의 트랜잭션이 발생했을 경우, 동일한 영속성 컨텍스트를 공유하기 때문에 기존에 영속상태에 있던 엔티티를 의도치 않게 변경할 수 있다는 위험성도 존재한다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 마무리</h2>\n<p>이번 기회를 통해 OSIV에 대해 알게 되었다.\nOSIV를 사용하는것에 대해 좋고 나쁘고는 없는것 같다. OSIV를 켜두면 편하게 어디서든 지연로딩을 통해 접근할 수 있지만, 성능이슈가 발생할 수 있으며 안정성에도 문제가 생길 수 있다. 반대로 꺼두면 성능적인 안전성은 가져갈 수 있지만, 뷰 레이어에서 지연로딩이 지원되지 않기 때문에 fetch join을 통해 엔티티를 조회할 때 미리 데이터를 가져와야한다.\n결국 각 서비스의 특성에 맞춰서 사용하면 될 것 같다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\">🚴🏻 스프링에서의 영속성 컨텍스트 생명 주기</a></p>\n<ul>\n<li><a href=\"#%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\">&#x3C;동작과정></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-osiv%EB%9E%80\">💫 OSIV란?</a></p>\n</li>\n<li>\n<p><a href=\"#-osiv%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">💫 OSIV의 장/단점</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🤔 마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"서론 이번 글은 IssueTracker 프로젝트를 진행하면서 겪었던 영속성 컨텍스트와 관련된 문제를 맞닥트리면서 알게 된 OSIV라는 개념을 정리해보기 위해 작성하게 되었다. 고민 : 미션을 진행하며 대부분의 api에서 유저의 정보가 필요할것이라고 판단했고, 매번 유저를 조회하는 코드의 중복을 제거하고 싶었다. 해결책 : jwt 토큰을 통해 받은 유저의 id를 사용해 인터셉터에서 미리 유저 객체를 조회한 뒤, ArgumentResolver 를 사용해서 해당 유저 객체를 컨트롤러에서 파라미터로 받아서 사용하기로 했다. 하지만 예상하지 못한 문제가 발생했다. 인터셉터에서 조회해서 컨트롤러에서 넘겨받은 유저 객체는 영속성 컨텍스트에서 관리해주지 않았다. 원인은 영속성 컨텍스트가 생성되는 시점이 우리가 등록한 인터셉터가 실행된 이후였기 때문이다. 함께 원인을 찾던 중 영속성 컨텍스트의 생명주기에 대해 서로 다르게 알고 있었는데 토리는 “트랜잭션 단위”, 나는 “요청 단위”로 알고 있었다.…","frontmatter":{"date":"June 23, 2022","title":"OSIV란?","categories":"Spring","author":"@forkyy","emoji":"🌱"},"fields":{"slug":"/spring/osvi/"}},"next":null,"prev":{"id":"69caf21c-6b3e-5355-a016-4a36e66dba44","html":"<h2 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h2>\n<p>현재 진행하고 있는 <a href=\"https://github.com/jjik-muk/sikdorak\">식당 리뷰 sns 프로젝트</a>에서 유저 로그인 기능의 구현을 담당하고 있다.</p>\n<p>카카오 로그인을 구현하던 중, 카카오에서 제공하는 api에 Http 요청을 보내기 위해서는 클라이언트 객체를 사용해야했고 흔히 알고 있는 <strong>RestTemplate</strong>과 <strong>WebClient</strong>를 후보에 두고 고민하고 있었다.\n그러던 중 쿠킴의 소개로 <strong>Feign Client</strong>의 존재를 알게 되었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/8099416e-a8ab-4a7a-9dfa-fae7a93db4ac\" width=\"400\">\n<hr>\n<h2 id=\"-feign-client란\" style=\"position:relative;\"><a href=\"#-feign-client%EB%9E%80\" aria-label=\" feign client란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 Feign Client란?</h2>\n<p>Feign Client란 Netflix에서 개발한 Http Client다.<br>\n(HttpClient는 Http 요청을 간편하게 만들어서 보낼 수 있도록 돕는 객체라고 생각하면 될것 같다.)<br>\n처음에는 Netflix에서 자체적으로 개발을 진행했지만 현재는 오픈소스로 전환했으며 SpringCloud 프레임워크의 프로젝트 중 하나로 들어가있다.</p>\n<h3 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h3>\n<ul>\n<li>SpringMvc에서 제공되는 어노테이션을 그대로 사용할 수 있다. (Spring Cloud의 starter-openfeign을 사용할 경우)</li>\n<li>RestTemplate 보다 간편하게 사용할 수 있으며 가독성이 좋다.</li>\n<li>Feign Client를 사용한 통합 테스트가 비교적 간편하다.</li>\n<li>요청에 대한 커스텀이 간편하다.<br>\nex) 요청이 실패했을때 몇초 간격으로 몇번 재요청을 보낼것인지를 구체적으로 정할 수 있다.</li>\n</ul>\n<h3 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h3>\n<ul>\n<li>동기적으로 동작한다. 즉, 하나의 요청이 끝나야 다음 동작이 가능하다.<br>\n(이건 비동기적으로 동작해야하는 경우 단점이 될 수 있을것 같다.)</li>\n</ul>\n<blockquote>\n<p><strong>우리 서비스에서는 사용자 로그인 API에서만 사용하기 때문에 비동기가 지원될 필요가 없다고 판단했고<br>\nFeign Client를 도입해보기로 결정했다.</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"-프로젝트에-적용\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\" aria-label=\" 프로젝트에 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 프로젝트에 적용</h2>\n<p>FeignClient를 사용하기 위해 먼저 build.gradle에 관련 의존성을 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//프로젝트에서 사용한 버전 정보</span>\nspring<span class=\"token operator\">-</span>boot <span class=\"token operator\">:</span> <span class=\"token number\">2.7</span><span class=\"token number\">.1</span>\nspring<span class=\"token operator\">-</span>cloud <span class=\"token operator\">:</span> <span class=\"token number\">2021.0</span><span class=\"token number\">.3</span> \nspring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>openfeign <span class=\"token operator\">:</span> <span class=\"token number\">3.1</span><span class=\"token number\">.3</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">ext <span class=\"token punctuation\">{</span>\n\tspringCloudVersion <span class=\"token operator\">=</span> '<span class=\"token number\">2021.0</span><span class=\"token number\">.3</span>'\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\n\ndependencyManagement <span class=\"token punctuation\">{</span>\n\timports <span class=\"token punctuation\">{</span>\n\t\tmavenBom <span class=\"token string\">\"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//...</span>\ndependencies <span class=\"token punctuation\">{</span>\n\timplementation 'org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign'\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><strong>ext</strong> : gradle 내에서 사용할 변수를 설정할 수 있다. 여기서는 springCloudVersion을 변수로 관리하도록 했다.</li>\n<li><strong>dependencyManagement</strong> : 사용할 의존성의 버전을 명시해두면  dependencies에서 실제 의존성을 작성할때 버전을 따로 작성하지 않아도 위에 명시된 버전으로 가져온다.</li>\n</ul>\n<p>의존성을 가져온 뒤  Feign Client를 사용하여 API 호출을 담당할 클라이언트 인터페이스를 만들었다.<br>\n만드는 방법은 간단한데 클라이언트를 인터페이스로 만들고 내부에 호출할 메서드만 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//FeignClient를 사용한 코드</span>\n\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://oauth-server.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth/token\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"grant_type\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> grantType<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> clientId<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"redirect_uri\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> redirectUri<span class=\"token punctuation\">,</span>\n                                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>@FeignClient</strong> : 앱이 런타임 시 해당 어노테이션이 붙은 인터페이스를 토대로 실제 구현체를 만든다.\n<ul>\n<li>name : 실제 구현체가 Application Context에 빈으로 등록될때 이름으로 사용된다.</li>\n<li>url : 요청을 보낼 엔드포인트를 의미한다.</li>\n</ul>\n</li>\n<li><strong>@PostMapping</strong> : 해당 HttpMethod로 요청을 전송한다.</li>\n<li><strong>@RequestParam</strong> : 요청 시 함께 보낼 파라미터들 설정한다.\n<ul>\n<li>메서드의 파라미터에 @RequestParam, @RequestHeader 등의 어노테이션을 사용하지 않으면 기본적으로 요청의 Body에 파리미터의 값들이 들어간다.</li>\n</ul>\n</li>\n</ul>\n<p>코드를 작성하고나니 의문이 생겼다.</p>\n<blockquote>\n<p><strong>어떻게 SpringMvc의 어노테이션을 사용할 수 있는걸까?</strong></p>\n</blockquote>\n<p>찾아보니 FeignClient는 빈으로 생성될 때 설정된 configuration 을 읽어서 생성되는데 configuration 내부에는<br>\nClient 생성 시 사용할 Decoder, Encoder, Logger, Contract 등을 빈으로 등록하는 코드가 담겨있었다.</p>\n<p>이때 Client에 따로 Configuration 설정을 해주지 않으면 디폴트인 <strong>FeignClientsConfiguration</strong> 를 사용해서 생성하는데 default로 적용된 Contract는 SpringMvcContract였고 덕분에 SpringMvc의 어노테이션을 사용할 수 있었다.</p>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/70687782-c66c-4412-80a9-e8b3126a1e45\" width=\"1000\">\n<ul>\n<li>decoder, encoder, logger도 모두 Spring이 사용하는 객체들을 사용하도록 되어있다.</li>\n</ul>\n<img src=\"https://github.com/Seokho-Ham/seokho-ham.github.io/assets/57708971/317c2534-6f7c-46b2-9d71-53731eaed5bb\" width=\"600\">\n<p>이후 서비스의 로직에서는 만든 클라이언트 객체를 빈으로 주입받아 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAuthService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OAuthTokenClient</span> oAuthTokenClient<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//...</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JwtToken</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OAuthTokenResponse</span> oAuthTokenResponse <span class=\"token operator\">=</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OAuthTokenResponse</span> <span class=\"token function\">getOAuthAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> oAuthTokenClient<span class=\"token punctuation\">.</span><span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getGrantType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getClientId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                oAuthProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getRedirectUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>FeignClient는 SpringBootApplication이 실행될때 @FeignClient 어노테이션이 붙은 파일들을 읽어서 구현체를 만들기 때문에 앱 구동시 어노테이션을 읽을 수 있게 @EnableFeignClients 어노테이션을 붙여주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableFeignClients</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래는 위의 설정을 마치고 실제 OAuth 서버로 요청을 보냈을때의 요청/응답 로그다.<br>\n해당 로그가 출력되려면 프로젝트의 로깅 레벨은 DEBUG 로, FeignClient의 로깅 레벨은 FULL로 설정되어 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//application.yml</span>\nlogging<span class=\"token operator\">:</span>\n  level<span class=\"token operator\">:</span>\n    com<span class=\"token punctuation\">.</span>project<span class=\"token operator\">:</span> debug\n\nfeign<span class=\"token operator\">:</span>\n  client<span class=\"token operator\">:</span>\n    config<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        loggerLevel<span class=\"token operator\">:</span> FULL</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//요청</span>\n---> POST http<span class=\"token operator\">:</span><span class=\"token comment\">//oauth-server/oauth/token?grant_type=authorization_code&amp;client_id=1234&amp;redirect_uri=redirectUri&amp;code=code HTTP/1.1</span>\nContent-Type<span class=\"token operator\">:</span> application/x-www-form-urlencoded;charset=utf<span class=\"token number\">-8</span>\n---> END HTTP (<span class=\"token number\">0</span>-byte body)\n\n<span class=\"token comment\">// 응답</span>\n&lt;--- HTTP/<span class=\"token number\">1.1</span> <span class=\"token number\">200</span> OK (131ms)\naccess-control-allow-headers<span class=\"token operator\">:</span> Authorization<span class=\"token punctuation\">,</span> KA<span class=\"token punctuation\">,</span> Origin<span class=\"token punctuation\">,</span> X-Requested-With<span class=\"token punctuation\">,</span> Content-Type<span class=\"token punctuation\">,</span> Accept\naccess-control-allow-methods<span class=\"token operator\">:</span> GET<span class=\"token punctuation\">,</span> POST<span class=\"token punctuation\">,</span> OPTIONS\naccess-control-allow-origin<span class=\"token operator\">:</span> *\ncache-control<span class=\"token operator\">:</span> no-cache<span class=\"token punctuation\">,</span> no-store<span class=\"token punctuation\">,</span> max-age=<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> must-revalidate\nconnection<span class=\"token operator\">:</span> keep-alive\ncontent-type<span class=\"token operator\">:</span> application/json;charset=utf<span class=\"token number\">-8</span>\ndate<span class=\"token operator\">:</span> Sat<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span> Aug <span class=\"token number\">2022</span> <span class=\"token number\">02</span><span class=\"token operator\">:</span><span class=\"token number\">48</span><span class=\"token operator\">:</span><span class=\"token number\">13</span> GMT\nexpires<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\ntransfer-encoding<span class=\"token operator\">:</span> chunked\nx-content-type-options<span class=\"token operator\">:</span> nosniff\nx-frame-options<span class=\"token operator\">:</span> DENY\nx-xss-protection<span class=\"token operator\">:</span> <span class=\"token number\">1</span>; mode=block\nresponse-body<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"token_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">43199</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"refreshToken\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"refresh_token_expires_in\"</span><span class=\"token operator\">:</span><span class=\"token number\">25184000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scope\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"account_email profile\"</span>\n<span class=\"token punctuation\">}</span>\n&lt;--- END HTTP (<span class=\"token number\">190</span>-byte body)</code></pre></div>\n<p>아래는 추가적으로 해준 설정들이다.</p>\n<h2 id=\"-커스텀한-configuration-설정\" style=\"position:relative;\"><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\" aria-label=\" 커스텀한 configuration 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🛠 커스텀한 Configuration 설정</h2>\n<h3 id=\"1-공통-헤더적용을-위한-configuration\" style=\"position:relative;\"><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"1 공통 헤더적용을 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 공통 헤더적용을 위한 Configuration</h3>\n<ul>\n<li>요청에 content-type 헤더가 기본적으로 필요해서 configuration 파일을 만들었고 Client 객체에 적용했다.</li>\n<li>요청을 가로채서 헤더를 세팅하는 requestInterceptor를 빈으로 등록하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientHeaderConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span>APPLICATION_FORM_URLENCODED_VALUE <span class=\"token operator\">+</span> <span class=\"token string\">\";charset=utf-8\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestInterceptor</span> <span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> requestTemplate <span class=\"token operator\">-></span> requestTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> APPLICATION_FORM_URLENCODED_UTF8_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-feignclient-exception을-서비스-예외로-처리하기-위한-configuration\" style=\"position:relative;\"><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\" aria-label=\"2 feignclient exception을 서비스 예외로 처리하기 위한 configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</h3>\n<ul>\n<li>Feign Client를 통한 요청이 실패했을 경우 OAuthServer에서의 예외가 발생했다는 메세지를 사용자에게 전달하고 싶었고, 커스텀한 ErrorDecoder를 빈으로 등록하는 configuration을 Client 객체에 적용했다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ErrorDecoder</span> <span class=\"token function\">decoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 요청이 성공하지 못했습니다. requestUrl: {}, requestBody: {}, responseBody: {}\"</span><span class=\"token punctuation\">,</span>\n                    methodKey<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequestBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientResponseUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResponseBody</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OAuthServerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>위의 Configuration들을 적용한 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//적용</span>\n<span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"oauth-server\"</span><span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token class-name\">FeignClientHeaderConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FeignClientOAuthErrorConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 주의할 점으로는 configuration 파일에 <strong>@Configuration 어노테이션을 붙이는것을 지양</strong>해야한다.\n해당 어노테이션을 붙이게 되면 컴포넌트 스캔이 발생하는 시점에 빈으로 등록되어 모든 FeignClient에 적용된다.</p>\n<ul>\n<li>현재 서비스에서는 모든 요청에 대해 적용할 decoder라서 어노테이션을 붙일까 고민했지만 변경사항이 발생할 수 있기에 직접 configuration을 설정해줬다.</li>\n</ul>\n<h3 id=\"3-url을-applicationproperties에서-관리-후-적용\" style=\"position:relative;\"><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\" aria-label=\"3 url을 applicationproperties에서 관리 후 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. url을 application.properties에서 관리 후 적용</h3>\n<p>url을 하드코딩 하기보다는 프로퍼티에서 관리하는것이 변경이 발생했을때 변경사항을 적용하기 편리하다.</p>\n<p>아래와 같은 방식으로 작성하면 application.properties에서 해당 프로퍼티를 읽어온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"token-client\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"${oauth.kakao.service.token_url}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OAuthTokenClient</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫 마무리</h2>\n<p>이번에 FeignClient를 어노테이션만으로 요청에 필요한 모든 설정을 마칠 수 있다는 점에서 이전에 RestTemplate, WebClient를 사용했을때와 비교해 너무 간편하다는 느낌을 받았다.\n물론 추가적인 설정 없이는 비동기적으로 동작하지 않기에 WebClient를 대체할 수는 없지만 특별히 비동기적인 동작이 필요없다면 FeignClient를 사용하지 않을까 싶다.</p>\n<p>또한 WireMock을 함께 사용하면 테스트도 쉽게 할 수 있는데 이 내용은 다음 글에서 이어서 작성하려고 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%9C%EB%A1%A0\">서론</a></p>\n</li>\n<li>\n<p><a href=\"#-feign-client%EB%9E%80\">💫 Feign Client란?</a></p>\n<ul>\n<li><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9\">💫 프로젝트에 적용</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%9C-configuration-%EC%84%A4%EC%A0%95\">🛠 커스텀한 Configuration 설정</a></p>\n<ul>\n<li><a href=\"#1-%EA%B3%B5%ED%86%B5-%ED%97%A4%EB%8D%94%EC%A0%81%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-configuration\">1. 공통 헤더적용을 위한 Configuration</a></li>\n<li><a href=\"#2-feignclient-exception%EC%9D%84-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%98%88%EC%99%B8%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-configuration\">2. FeignClient Exception을 서비스 예외로 처리하기 위한 Configuration</a></li>\n<li><a href=\"#3-url%EC%9D%84-applicationproperties%EC%97%90%EC%84%9C-%EA%B4%80%EB%A6%AC-%ED%9B%84-%EC%A0%81%EC%9A%A9\">3. url을 application.properties에서 관리 후 적용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">💫 마무리</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 13, 2022","title":"프로젝트에 Feign Client를 적용해보자","categories":"Spring","author":"@forkyy","emoji":"🌱"},"fields":{"slug":"/spring/feign_client_적용기/"}},"site":{"siteMetadata":{"siteUrl":"https://seokho-ham.github.io","comments":{"utterances":{"repo":"seokho-ham/blog-comments"}}}}},"pageContext":{"slug":"/spring/osvi/","nextSlug":"","prevSlug":"/spring/feign_client_적용기/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}